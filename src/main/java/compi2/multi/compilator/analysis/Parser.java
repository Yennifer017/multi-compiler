
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package compi2.multi.compilator.analysis;

import compi2.multi.compilator.semantic.p.DefAst;
import compi2.multi.compilator.semantic.p.Statement;
import compi2.multi.compilator.semantic.p.Expression;
import java_cup.runtime.*;
import java.util.*;
import compi2.multi.compilator.analysis.symbolt.AccessMod;
import compi2.multi.compilator.analysis.typet.*;
import compi2.multi.compilator.analyzator.*;
import compi2.multi.compilator.semantic.*;
import compi2.multi.compilator.semantic.c.*;
import compi2.multi.compilator.semantic.cast.*;
import compi2.multi.compilator.semantic.cast.assign.*;
import compi2.multi.compilator.semantic.cast.dec.*;
import compi2.multi.compilator.semantic.cast.defaultfuncs.*;
import compi2.multi.compilator.semantic.cast.inv.*;
import compi2.multi.compilator.semantic.cast.inv.objs.*;
import compi2.multi.compilator.semantic.cexp.*;
import compi2.multi.compilator.semantic.util.*;
import compi2.multi.compilator.semantic.pexp.*;
import compi2.multi.compilator.semantic.pobj.*;
import compi2.multi.compilator.semantic.past.*;
import compi2.multi.compilator.semantic.pmodule.*;
import compi2.multi.compilator.semantic.jexp.*;
import compi2.multi.compilator.semantic.j.*;
import compi2.multi.compilator.semantic.jclases.*;
import compi2.multi.compilator.semantic.jclases.components.*;
import compi2.multi.compilator.semantic.jast.*;
import compi2.multi.compilator.semantic.jast.inv.*;
import compi2.multi.compilator.semantic.jast.others.*;
import compi2.multi.compilator.util.Position;
import compi2.multi.compilator.util.Index;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u01ad\000\002\002\004\000\002\002\005\000\002\003" +
    "\004\000\002\004\004\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\011\005\000\002" +
    "\011\003\000\002\025\007\000\002\026\010\000\002\023" +
    "\005\000\002\023\003\000\002\014\004\000\002\014\002" +
    "\000\002\013\005\000\002\013\004\000\002\013\006\000" +
    "\002\013\004\000\002\013\005\000\002\015\005\000\002" +
    "\015\010\000\002\015\005\000\002\015\005\000\002\015" +
    "\010\000\002\016\005\000\002\016\006\000\002\016\005" +
    "\000\002\016\006\000\002\016\004\000\002\016\003\000" +
    "\002\017\005\000\002\017\005\000\002\017\005\000\002" +
    "\017\005\000\002\017\005\000\002\017\005\000\002\017" +
    "\003\000\002\020\005\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\005\000\002\020\005\000" +
    "\002\020\005\000\002\020\005\000\002\020\005\000\002" +
    "\020\005\000\002\020\005\000\002\020\005\000\002\020" +
    "\003\000\002\020\006\000\002\020\006\000\002\020\005" +
    "\000\002\020\003\000\002\020\005\000\002\020\004\000" +
    "\002\020\004\000\002\020\005\000\002\020\004\000\002" +
    "\020\004\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\054\004" +
    "\000\002\054\005\000\002\054\006\000\002\022\007\000" +
    "\002\022\007\000\002\022\007\000\002\022\007\000\002" +
    "\022\007\000\002\036\003\000\002\036\003\000\002\036" +
    "\005\000\002\053\004\000\002\053\003\000\002\045\003" +
    "\000\002\045\003\000\002\045\005\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\044\014\000\002\055\007\000\002\055\006\000\002\024" +
    "\005\000\002\024\003\000\002\037\003\000\002\037\003" +
    "\000\002\037\005\000\002\040\003\000\002\040\004\000" +
    "\002\040\003\000\002\040\004\000\002\041\010\000\002" +
    "\041\010\000\002\042\012\000\002\042\012\000\002\042" +
    "\012\000\002\043\006\000\002\035\004\000\002\035\003" +
    "\000\002\035\006\000\002\034\003\000\002\034\002\000" +
    "\002\032\003\000\002\032\004\000\002\032\003\000\002" +
    "\032\005\000\002\032\004\000\002\033\004\000\002\033" +
    "\003\000\002\033\004\000\002\033\005\000\002\033\004" +
    "\000\002\033\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\005\000\002\027\006\000\002\027\005\000\002" +
    "\027\010\000\002\027\003\000\002\027\003\000\002\030" +
    "\003\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\007\003\000\002\007\002\000" +
    "\002\010\004\000\002\010\003\000\002\047\017\000\002" +
    "\005\003\000\002\005\002\000\002\006\004\000\002\006" +
    "\003\000\002\050\015\000\002\051\005\000\002\051\003" +
    "\000\002\051\002\000\002\052\006\000\002\052\005\000" +
    "\002\057\004\000\002\062\003\000\002\062\003\000\002" +
    "\062\003\000\002\077\004\000\002\077\004\000\002\077" +
    "\004\000\002\077\004\000\002\077\004\000\002\077\004" +
    "\000\002\077\003\000\002\077\003\000\002\077\003\000" +
    "\002\077\003\000\002\077\003\000\002\077\003\000\002" +
    "\100\004\000\002\100\003\000\002\056\004\000\002\121" +
    "\005\000\002\121\006\000\002\120\005\000\002\120\003" +
    "\000\002\113\003\000\002\113\003\000\002\113\003\000" +
    "\002\113\003\000\002\113\003\000\002\060\004\000\002" +
    "\060\002\000\002\061\011\000\002\063\004\000\002\063" +
    "\002\000\002\064\004\000\002\064\002\000\002\065\006" +
    "\000\002\065\006\000\002\065\012\000\002\066\003\000" +
    "\002\066\005\000\002\066\003\000\002\076\010\000\002" +
    "\067\003\000\002\067\002\000\002\070\005\000\002\070" +
    "\003\000\002\101\004\000\002\071\004\000\002\071\002" +
    "\000\002\072\003\000\002\072\004\000\002\072\004\000" +
    "\002\072\004\000\002\072\004\000\002\072\004\000\002" +
    "\072\004\000\002\074\003\000\002\074\003\000\002\074" +
    "\003\000\002\074\003\000\002\074\003\000\002\075\003" +
    "\000\002\075\003\000\002\075\004\000\002\122\006\000" +
    "\002\122\006\000\002\110\012\000\002\111\006\000\002" +
    "\111\004\000\002\111\002\000\002\102\011\000\002\103" +
    "\013\000\002\104\015\000\002\073\003\000\002\073\003" +
    "\000\002\073\003\000\002\073\002\000\002\105\011\000" +
    "\002\106\004\000\002\106\003\000\002\107\006\000\002" +
    "\107\005\000\002\112\005\000\002\112\006\000\002\112" +
    "\006\000\002\112\006\000\002\112\010\000\002\112\011" +
    "\000\002\112\010\000\002\112\011\000\002\112\011\000" +
    "\002\112\012\000\002\112\010\000\002\112\007\000\002" +
    "\125\006\000\002\125\004\000\002\126\004\000\002\126" +
    "\004\000\002\126\004\000\002\126\005\000\002\126\006" +
    "\000\002\126\006\000\002\126\007\000\002\126\007\000" +
    "\002\126\010\000\002\126\005\000\002\127\005\000\002" +
    "\127\006\000\002\127\005\000\002\127\006\000\002\123" +
    "\005\000\002\123\004\000\002\124\003\000\002\124\005" +
    "\000\002\124\006\000\002\124\006\000\002\124\007\000" +
    "\002\124\004\000\002\116\005\000\002\116\005\000\002" +
    "\116\004\000\002\116\003\000\002\115\005\000\002\115" +
    "\005\000\002\115\005\000\002\115\005\000\002\115\005" +
    "\000\002\115\005\000\002\115\003\000\002\114\005\000" +
    "\002\114\005\000\002\114\005\000\002\114\005\000\002" +
    "\114\005\000\002\114\005\000\002\114\005\000\002\114" +
    "\005\000\002\114\005\000\002\114\005\000\002\114\005" +
    "\000\002\114\005\000\002\114\003\000\002\114\003\000" +
    "\002\114\004\000\002\114\005\000\002\114\006\000\002" +
    "\114\005\000\002\114\007\000\002\114\006\000\002\114" +
    "\004\000\002\114\003\000\002\114\004\000\002\114\004" +
    "\000\002\114\006\000\002\114\007\000\002\114\003\000" +
    "\002\114\005\000\002\114\004\000\002\114\004\000\002" +
    "\117\005\000\002\117\005\000\002\117\005\000\002\130" +
    "\015\000\002\131\003\000\002\131\003\000\002\131\003" +
    "\000\002\131\003\000\002\131\003\000\002\151\006\000" +
    "\002\151\005\000\002\152\005\000\002\152\003\000\002" +
    "\153\003\000\002\153\003\000\002\153\003\000\002\153" +
    "\003\000\002\153\003\000\002\132\006\000\002\132\002" +
    "\000\002\154\011\000\002\154\002\000\002\155\004\000" +
    "\002\155\002\000\002\156\005\000\002\156\007\000\002" +
    "\156\006\000\002\156\003\000\002\161\006\000\002\161" +
    "\006\000\002\160\005\000\002\160\004\000\002\157\005" +
    "\000\002\157\006\000\002\162\006\000\002\162\005\000" +
    "\002\144\004\000\002\144\002\000\002\146\003\000\002" +
    "\146\004\000\002\146\004\000\002\146\004\000\002\146" +
    "\004\000\002\146\004\000\002\163\003\000\002\163\003" +
    "\000\002\147\011\000\002\147\006\000\002\147\006\000" +
    "\002\147\005\000\002\147\005\000\002\147\011\000\002" +
    "\150\003\000\002\150\003\000\002\150\003\000\002\150" +
    "\003\000\002\150\003\000\002\167\005\000\002\167\005" +
    "\000\002\165\012\000\002\166\004\000\002\166\006\000" +
    "\002\166\002\000\002\141\011\000\002\142\004\000\002" +
    "\142\003\000\002\143\010\000\002\143\007\000\002\136" +
    "\015\000\002\145\003\000\002\145\003\000\002\145\003" +
    "\000\002\145\002\000\002\137\011\000\002\140\013\000" +
    "\002\170\006\000\002\170\007\000\002\171\005\000\002" +
    "\171\004\000\002\172\003\000\002\172\005\000\002\172" +
    "\006\000\002\172\006\000\002\172\007\000\002\172\004" +
    "\000\002\164\007\000\002\164\010\000\002\133\005\000" +
    "\002\133\005\000\002\133\004\000\002\133\003\000\002" +
    "\134\005\000\002\134\005\000\002\134\005\000\002\134" +
    "\005\000\002\134\005\000\002\134\005\000\002\134\003" +
    "\000\002\135\005\000\002\135\005\000\002\135\005\000" +
    "\002\135\005\000\002\135\005\000\002\135\005\000\002" +
    "\135\005\000\002\135\005\000\002\135\005\000\002\135" +
    "\005\000\002\135\005\000\002\135\005\000\002\135\003" +
    "\000\002\135\003\000\002\135\003\000\002\135\003\000" +
    "\002\135\004\000\002\135\005\000\002\135\004\000\002" +
    "\135\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0389\000\004\031\006\001\002\000\004\002\u038b\001" +
    "\002\000\004\030\u013f\001\002\000\010\030\uff77\061\013" +
    "\106\uff77\001\002\000\010\030\uff75\061\uff75\106\uff75\001" +
    "\002\000\004\030\uffff\001\002\000\010\030\uff78\061\013" +
    "\106\uff78\001\002\000\006\030\uff72\106\u012e\001\002\000" +
    "\004\142\014\001\002\000\004\016\015\001\002\000\012" +
    "\012\uff6c\017\uff6c\130\017\142\016\001\002\000\010\003" +
    "\ufff5\013\ufff5\014\ufff5\001\002\000\004\142\016\001\002" +
    "\000\006\012\uff6d\017\uff6d\001\002\000\006\013\u0129\014" +
    "\u0107\001\002\000\006\012\023\017\024\001\002\000\006" +
    "\130\017\142\016\001\002\000\004\013\025\001\002\000" +
    "\020\003\031\036\035\042\030\057\032\070\033\120\034" +
    "\142\026\001\002\000\014\003\ufff8\012\ufff8\017\ufff8\035" +
    "\ufff8\142\ufff8\001\002\000\004\012\036\001\002\000\014" +
    "\003\ufffa\012\ufffa\017\ufffa\035\ufffa\142\ufffa\001\002\000" +
    "\014\003\ufff7\012\ufff7\017\ufff7\035\ufff7\142\ufff7\001\002" +
    "\000\014\003\ufffc\012\ufffc\017\ufffc\035\ufffc\142\ufffc\001" +
    "\002\000\014\003\ufffd\012\ufffd\017\ufffd\035\ufffd\142\ufffd" +
    "\001\002\000\014\003\ufff9\012\ufff9\017\ufff9\035\ufff9\142" +
    "\ufff9\001\002\000\014\003\ufffb\012\ufffb\017\ufffb\035\ufffb" +
    "\142\ufffb\001\002\000\006\035\uffef\130\037\001\002\000" +
    "\006\003\u0101\142\016\001\002\000\004\035\041\001\002" +
    "\000\026\003\056\037\054\040\057\046\044\053\uff91\060" +
    "\064\064\051\114\065\132\046\142\052\001\002\000\034" +
    "\003\uff7c\012\uff7c\037\uff7c\040\uff7c\046\uff7c\052\uff7c\053" +
    "\uff7c\060\uff7c\064\uff7c\114\uff7c\127\uff7c\132\uff7c\142\uff7c" +
    "\001\002\000\034\003\uff79\012\uff79\037\uff79\040\uff79\046" +
    "\uff79\052\uff79\053\uff79\060\uff79\064\uff79\114\uff79\127\uff79" +
    "\132\uff79\142\uff79\001\002\000\034\003\uff84\012\uff84\037" +
    "\uff84\040\uff84\046\uff84\052\uff84\053\uff84\060\uff84\064\uff84" +
    "\114\uff84\127\uff84\132\uff84\142\uff84\001\002\000\034\003" +
    "\uff7b\012\uff7b\037\uff7b\040\uff7b\046\uff7b\052\uff7b\053\uff7b" +
    "\060\uff7b\064\uff7b\114\uff7b\127\uff7b\132\uff7b\142\uff7b\001" +
    "\002\000\004\016\367\001\002\000\006\012\365\053\uff90" +
    "\001\002\000\004\053\uff92\001\002\000\006\003\346\016" +
    "\347\001\002\000\010\016\335\022\333\134\334\001\002" +
    "\000\026\003\056\037\054\040\057\046\044\053\uff8e\060" +
    "\064\064\051\114\065\132\046\142\052\001\002\000\034" +
    "\003\uff85\012\uff85\037\uff85\040\uff85\046\uff85\052\uff85\053" +
    "\uff85\060\uff85\064\uff85\114\uff85\127\uff85\132\uff85\142\uff85" +
    "\001\002\000\034\003\uff7f\012\uff7f\037\uff7f\040\uff7f\046" +
    "\uff7f\052\uff7f\053\uff7f\060\uff7f\064\uff7f\114\uff7f\127\uff7f" +
    "\132\uff7f\142\uff7f\001\002\000\034\003\uff7e\012\uff7e\037" +
    "\uff7e\040\uff7e\046\uff7e\052\uff7e\053\uff7e\060\uff7e\064\uff7e" +
    "\114\uff7e\127\uff7e\132\uff7e\142\uff7e\001\002\000\004\016" +
    "\266\001\002\000\034\003\uff7d\012\uff7d\037\uff7d\040\uff7d" +
    "\046\uff7d\052\uff7d\053\uff7d\060\uff7d\064\uff7d\114\uff7d\127" +
    "\uff7d\132\uff7d\142\uff7d\001\002\000\004\053\264\001\002" +
    "\000\026\003\056\035\241\037\054\040\057\046\044\060" +
    "\064\064\051\114\065\132\046\142\052\001\002\000\034" +
    "\003\uff7a\012\uff7a\037\uff7a\040\uff7a\046\uff7a\052\uff7a\053" +
    "\uff7a\060\uff7a\064\uff7a\114\uff7a\127\uff7a\132\uff7a\142\uff7a" +
    "\001\002\000\004\142\215\001\002\000\026\003\056\035" +
    "\067\037\054\040\057\046\044\060\064\064\051\114\065" +
    "\132\046\142\052\001\002\000\004\012\214\001\002\000" +
    "\026\003\056\037\054\040\057\046\044\053\uff91\060\064" +
    "\064\051\114\065\132\046\142\052\001\002\000\034\003" +
    "\uff94\012\uff94\037\uff94\040\uff94\046\uff94\052\uff94\053\uff94" +
    "\060\uff94\064\uff94\114\uff94\127\uff94\132\uff94\142\uff94\001" +
    "\002\000\004\127\072\001\002\000\030\003\104\004\100" +
    "\005\073\016\111\074\110\142\103\143\106\144\101\145" +
    "\076\146\074\147\107\001\002\000\026\003\210\004\100" +
    "\005\073\016\111\142\103\143\106\144\101\145\076\146" +
    "\074\147\107\001\002\000\110\003\uffc0\004\uffc0\005\uffc0" +
    "\006\uffc0\007\uffc0\011\uffc0\012\uffc0\013\uffc0\014\uffc0\015" +
    "\uffc0\017\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0\027\uffc0" +
    "\033\uffc0\035\uffc0\037\uffc0\040\uffc0\046\uffc0\050\uffc0\052" +
    "\uffc0\053\uffc0\054\uffc0\060\uffc0\064\uffc0\077\uffc0\114\uffc0" +
    "\125\uffc0\127\uffc0\132\uffc0\135\uffc0\137\uffc0\142\uffc0\001" +
    "\002\000\110\003\uffcb\004\uffcb\005\uffcb\006\uffcb\007\uffcb" +
    "\011\uffcb\012\uffcb\013\uffcb\014\uffcb\015\uffcb\017\uffcb\023" +
    "\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb\033\uffcb\035\uffcb" +
    "\037\uffcb\040\uffcb\046\uffcb\050\uffcb\052\uffcb\053\uffcb\054" +
    "\uffcb\060\uffcb\064\uffcb\077\uffcb\114\uffcb\125\uffcb\127\uffcb" +
    "\132\uffcb\135\uffcb\137\uffcb\142\uffcb\001\002\000\110\003" +
    "\uffbf\004\uffbf\005\uffbf\006\uffbf\007\uffbf\011\uffbf\012\uffbf" +
    "\013\uffbf\014\uffbf\015\uffbf\017\uffbf\023\uffbf\024\uffbf\025" +
    "\uffbf\026\uffbf\027\uffbf\033\uffbf\035\uffbf\037\uffbf\040\uffbf" +
    "\046\uffbf\050\uffbf\052\uffbf\053\uffbf\054\uffbf\060\uffbf\064" +
    "\uffbf\077\uffbf\114\uffbf\125\uffbf\127\uffbf\132\uffbf\135\uffbf" +
    "\137\uffbf\142\uffbf\001\002\000\110\003\uffd8\004\156\005" +
    "\160\006\162\007\161\011\157\012\uffd8\013\uffd8\014\uffd8" +
    "\015\uffd8\017\uffd8\023\uffd8\024\174\025\176\026\173\027" +
    "\200\033\uffd8\035\uffd8\037\uffd8\040\uffd8\046\uffd8\050\uffd8" +
    "\052\uffd8\053\uffd8\054\177\060\uffd8\064\uffd8\077\uffd8\114" +
    "\uffd8\125\uffd8\127\uffd8\132\uffd8\135\175\137\155\142\uffd8" +
    "\001\002\000\026\003\172\004\100\005\073\016\111\142" +
    "\103\143\106\144\101\145\076\146\074\147\107\001\002" +
    "\000\110\003\uffbd\004\uffbd\005\uffbd\006\uffbd\007\uffbd\011" +
    "\uffbd\012\uffbd\013\uffbd\014\uffbd\015\uffbd\017\uffbd\023\uffbd" +
    "\024\uffbd\025\uffbd\026\uffbd\027\uffbd\033\uffbd\035\uffbd\037" +
    "\uffbd\040\uffbd\046\uffbd\050\uffbd\052\uffbd\053\uffbd\054\uffbd" +
    "\060\uffbd\064\uffbd\077\uffbd\114\uffbd\125\uffbd\127\uffbd\132" +
    "\uffbd\135\uffbd\137\uffbd\142\uffbd\001\002\000\040\003\uff96" +
    "\012\uff96\033\132\037\uff96\040\uff96\046\uff96\052\uff96\053" +
    "\uff96\060\uff96\064\uff96\077\133\114\uff96\127\uff96\132\uff96" +
    "\142\uff96\001\002\000\114\003\uffc7\004\uffc7\005\uffc7\006" +
    "\uffc7\007\uffc7\011\uffc7\012\uffc7\013\uffc7\014\uffc7\015\uffc7" +
    "\016\144\017\uffc7\022\143\023\uffc7\024\uffc7\025\uffc7\026" +
    "\uffc7\027\uffc7\033\uffc7\035\uffc7\037\uffc7\040\uffc7\046\uffc7" +
    "\050\uffc7\052\uffc7\053\uffc7\054\uffc7\060\uffc7\064\uffc7\077" +
    "\uffc7\114\uffc7\125\uffc7\127\uffc7\132\uffc7\135\uffc7\137\uffc7" +
    "\142\uffc7\001\002\000\016\004\116\005\120\006\122\007" +
    "\121\137\114\141\117\001\002\000\060\003\uffdf\012\uffdf" +
    "\013\uffdf\014\uffdf\015\uffdf\017\uffdf\023\uffdf\033\uffdf\035" +
    "\uffdf\037\uffdf\040\uffdf\046\uffdf\050\uffdf\052\uffdf\053\uffdf" +
    "\060\uffdf\064\uffdf\077\uffdf\114\uffdf\125\uffdf\127\uffdf\132" +
    "\uffdf\142\uffdf\001\002\000\110\003\uffbc\004\uffbc\005\uffbc" +
    "\006\uffbc\007\uffbc\011\uffbc\012\uffbc\013\uffbc\014\uffbc\015" +
    "\uffbc\017\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc" +
    "\033\uffbc\035\uffbc\037\uffbc\040\uffbc\046\uffbc\050\uffbc\052" +
    "\uffbc\053\uffbc\054\uffbc\060\uffbc\064\uffbc\077\uffbc\114\uffbc" +
    "\125\uffbc\127\uffbc\132\uffbc\135\uffbc\137\uffbc\142\uffbc\001" +
    "\002\000\110\003\uffbe\004\uffbe\005\uffbe\006\uffbe\007\uffbe" +
    "\011\uffbe\012\uffbe\013\uffbe\014\uffbe\015\uffbe\017\uffbe\023" +
    "\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe\033\uffbe\035\uffbe" +
    "\037\uffbe\040\uffbe\046\uffbe\050\uffbe\052\uffbe\053\uffbe\054" +
    "\uffbe\060\uffbe\064\uffbe\077\uffbe\114\uffbe\125\uffbe\127\uffbe" +
    "\132\uffbe\135\uffbe\137\uffbe\142\uffbe\001\002\000\030\003" +
    "\104\004\100\005\073\016\111\074\110\142\103\143\106" +
    "\144\101\145\076\146\074\147\107\001\002\000\030\003" +
    "\113\004\100\005\073\016\111\074\110\142\103\143\106" +
    "\144\101\145\076\146\074\147\107\001\002\000\010\017" +
    "\131\033\132\077\133\001\002\000\020\004\116\005\120" +
    "\006\122\007\121\017\115\137\114\141\117\001\002\000" +
    "\004\003\130\001\002\000\110\003\uffc3\004\uffc3\005\uffc3" +
    "\006\uffc3\007\uffc3\011\uffc3\012\uffc3\013\uffc3\014\uffc3\015" +
    "\uffc3\017\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3" +
    "\033\uffc3\035\uffc3\037\uffc3\040\uffc3\046\uffc3\050\uffc3\052" +
    "\uffc3\053\uffc3\054\uffc3\060\uffc3\064\uffc3\077\uffc3\114\uffc3" +
    "\125\uffc3\127\uffc3\132\uffc3\135\uffc3\137\uffc3\142\uffc3\001" +
    "\002\000\004\003\127\001\002\000\004\003\126\001\002" +
    "\000\004\003\125\001\002\000\004\003\124\001\002\000" +
    "\004\003\123\001\002\000\110\003\uffd5\004\uffd5\005\uffd5" +
    "\006\uffd5\007\uffd5\011\uffd5\012\uffd5\013\uffd5\014\uffd5\015" +
    "\uffd5\017\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5" +
    "\033\uffd5\035\uffd5\037\uffd5\040\uffd5\046\uffd5\050\uffd5\052" +
    "\uffd5\053\uffd5\054\uffd5\060\uffd5\064\uffd5\077\uffd5\114\uffd5" +
    "\125\uffd5\127\uffd5\132\uffd5\135\uffd5\137\uffd5\142\uffd5\001" +
    "\002\000\110\003\uffd4\004\uffd4\005\uffd4\006\uffd4\007\uffd4" +
    "\011\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4\017\uffd4\023" +
    "\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\033\uffd4\035\uffd4" +
    "\037\uffd4\040\uffd4\046\uffd4\050\uffd4\052\uffd4\053\uffd4\054" +
    "\uffd4\060\uffd4\064\uffd4\077\uffd4\114\uffd4\125\uffd4\127\uffd4" +
    "\132\uffd4\135\uffd4\137\uffd4\142\uffd4\001\002\000\110\003" +
    "\uffd6\004\uffd6\005\uffd6\006\uffd6\007\uffd6\011\uffd6\012\uffd6" +
    "\013\uffd6\014\uffd6\015\uffd6\017\uffd6\023\uffd6\024\uffd6\025" +
    "\uffd6\026\uffd6\027\uffd6\033\uffd6\035\uffd6\037\uffd6\040\uffd6" +
    "\046\uffd6\050\uffd6\052\uffd6\053\uffd6\054\uffd6\060\uffd6\064" +
    "\uffd6\077\uffd6\114\uffd6\125\uffd6\127\uffd6\132\uffd6\135\uffd6" +
    "\137\uffd6\142\uffd6\001\002\000\110\003\uffd3\004\uffd3\005" +
    "\uffd3\006\uffd3\007\uffd3\011\uffd3\012\uffd3\013\uffd3\014\uffd3" +
    "\015\uffd3\017\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027" +
    "\uffd3\033\uffd3\035\uffd3\037\uffd3\040\uffd3\046\uffd3\050\uffd3" +
    "\052\uffd3\053\uffd3\054\uffd3\060\uffd3\064\uffd3\077\uffd3\114" +
    "\uffd3\125\uffd3\127\uffd3\132\uffd3\135\uffd3\137\uffd3\142\uffd3" +
    "\001\002\000\110\003\uffd7\004\uffd7\005\uffd7\006\uffd7\007" +
    "\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7\017\uffd7" +
    "\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\033\uffd7\035" +
    "\uffd7\037\uffd7\040\uffd7\046\uffd7\050\uffd7\052\uffd7\053\uffd7" +
    "\054\uffd7\060\uffd7\064\uffd7\077\uffd7\114\uffd7\125\uffd7\127" +
    "\uffd7\132\uffd7\135\uffd7\137\uffd7\142\uffd7\001\002\000\110" +
    "\003\uffd2\004\uffd2\005\uffd2\006\uffd2\007\uffd2\011\uffd2\012" +
    "\uffd2\013\uffd2\014\uffd2\015\uffd2\017\uffd2\023\uffd2\024\uffd2" +
    "\025\uffd2\026\uffd2\027\uffd2\033\uffd2\035\uffd2\037\uffd2\040" +
    "\uffd2\046\uffd2\050\uffd2\052\uffd2\053\uffd2\054\uffd2\060\uffd2" +
    "\064\uffd2\077\uffd2\114\uffd2\125\uffd2\127\uffd2\132\uffd2\135" +
    "\uffd2\137\uffd2\142\uffd2\001\002\000\110\003\uffc6\004\uffc6" +
    "\005\uffc6\006\uffc6\007\uffc6\011\uffc6\012\uffc6\013\uffc6\014" +
    "\uffc6\015\uffc6\017\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6" +
    "\027\uffc6\033\uffc6\035\uffc6\037\uffc6\040\uffc6\046\uffc6\050" +
    "\uffc6\052\uffc6\053\uffc6\054\uffc6\060\uffc6\064\uffc6\077\uffc6" +
    "\114\uffc6\125\uffc6\127\uffc6\132\uffc6\135\uffc6\137\uffc6\142" +
    "\uffc6\001\002\000\032\003\104\004\100\005\073\016\111" +
    "\074\110\123\137\142\103\143\106\144\101\145\076\146" +
    "\074\147\107\001\002\000\032\003\104\004\100\005\073" +
    "\016\111\052\135\074\110\142\103\143\106\144\101\145" +
    "\076\146\074\147\107\001\002\000\060\003\uffe2\012\uffe2" +
    "\013\uffe2\014\uffe2\015\uffe2\017\uffe2\023\uffe2\033\132\035" +
    "\uffe2\037\uffe2\040\uffe2\046\uffe2\050\uffe2\052\uffe2\053\uffe2" +
    "\060\uffe2\064\uffe2\077\uffe2\114\uffe2\125\uffe2\127\uffe2\132" +
    "\uffe2\142\uffe2\001\002\000\030\003\104\004\100\005\073" +
    "\016\111\074\110\142\103\143\106\144\101\145\076\146" +
    "\074\147\107\001\002\000\060\003\uffe1\012\uffe1\013\uffe1" +
    "\014\uffe1\015\uffe1\017\uffe1\023\uffe1\033\uffe1\035\uffe1\037" +
    "\uffe1\040\uffe1\046\uffe1\050\uffe1\052\uffe1\053\uffe1\060\uffe1" +
    "\064\uffe1\077\uffe1\114\uffe1\125\uffe1\127\uffe1\132\uffe1\142" +
    "\uffe1\001\002\000\030\003\104\004\100\005\073\016\111" +
    "\074\110\142\103\143\106\144\101\145\076\146\074\147" +
    "\107\001\002\000\060\003\uffe4\012\uffe4\013\uffe4\014\uffe4" +
    "\015\uffe4\017\uffe4\023\uffe4\033\uffe4\035\uffe4\037\uffe4\040" +
    "\uffe4\046\uffe4\050\uffe4\052\uffe4\053\uffe4\060\uffe4\064\uffe4" +
    "\077\uffe4\114\uffe4\125\uffe4\127\uffe4\132\uffe4\142\uffe4\001" +
    "\002\000\060\003\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3" +
    "\017\uffe3\023\uffe3\033\132\035\uffe3\037\uffe3\040\uffe3\046" +
    "\uffe3\050\uffe3\052\uffe3\053\uffe3\060\uffe3\064\uffe3\077\133" +
    "\114\uffe3\125\uffe3\127\uffe3\132\uffe3\142\uffe3\001\002\000" +
    "\060\003\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0\017\uffe0" +
    "\023\uffe0\033\uffe0\035\uffe0\037\uffe0\040\uffe0\046\uffe0\050" +
    "\uffe0\052\uffe0\053\uffe0\060\uffe0\064\uffe0\077\uffe0\114\uffe0" +
    "\125\uffe0\127\uffe0\132\uffe0\142\uffe0\001\002\000\026\003" +
    "\104\004\100\005\073\016\111\142\103\143\106\144\101" +
    "\145\076\146\074\147\107\001\002\000\032\003\104\004" +
    "\100\005\073\016\111\017\146\074\110\142\103\143\106" +
    "\144\101\145\076\146\074\147\107\001\002\000\012\014" +
    "\ufff1\017\ufff1\033\132\077\133\001\002\000\110\003\uffc8" +
    "\004\uffc8\005\uffc8\006\uffc8\007\uffc8\011\uffc8\012\uffc8\013" +
    "\uffc8\014\uffc8\015\uffc8\017\uffc8\023\uffc8\024\uffc8\025\uffc8" +
    "\026\uffc8\027\uffc8\033\uffc8\035\uffc8\037\uffc8\040\uffc8\046" +
    "\uffc8\050\uffc8\052\uffc8\053\uffc8\054\uffc8\060\uffc8\064\uffc8" +
    "\077\uffc8\114\uffc8\125\uffc8\127\uffc8\132\uffc8\135\uffc8\137" +
    "\uffc8\142\uffc8\001\002\000\006\014\150\017\151\001\002" +
    "\000\030\003\104\004\100\005\073\016\111\074\110\142" +
    "\103\143\106\144\101\145\076\146\074\147\107\001\002" +
    "\000\110\003\uffc9\004\uffc9\005\uffc9\006\uffc9\007\uffc9\011" +
    "\uffc9\012\uffc9\013\uffc9\014\uffc9\015\uffc9\017\uffc9\023\uffc9" +
    "\024\uffc9\025\uffc9\026\uffc9\027\uffc9\033\uffc9\035\uffc9\037" +
    "\uffc9\040\uffc9\046\uffc9\050\uffc9\052\uffc9\053\uffc9\054\uffc9" +
    "\060\uffc9\064\uffc9\077\uffc9\114\uffc9\125\uffc9\127\uffc9\132" +
    "\uffc9\135\uffc9\137\uffc9\142\uffc9\001\002\000\012\014\ufff2" +
    "\017\ufff2\033\132\077\133\001\002\000\020\004\156\005" +
    "\160\006\162\007\161\011\157\023\154\137\155\001\002" +
    "\000\110\003\uffca\004\uffca\005\uffca\006\uffca\007\uffca\011" +
    "\uffca\012\uffca\013\uffca\014\uffca\015\uffca\017\uffca\023\uffca" +
    "\024\uffca\025\uffca\026\uffca\027\uffca\033\uffca\035\uffca\037" +
    "\uffca\040\uffca\046\uffca\050\uffca\052\uffca\053\uffca\054\uffca" +
    "\060\uffca\064\uffca\077\uffca\114\uffca\125\uffca\127\uffca\132" +
    "\uffca\135\uffca\137\uffca\142\uffca\001\002\000\026\003\104" +
    "\004\100\005\073\016\111\142\103\143\106\144\101\145" +
    "\076\146\074\147\107\001\002\000\026\003\104\004\100" +
    "\005\073\016\111\142\103\143\106\144\101\145\076\146" +
    "\074\147\107\001\002\000\026\003\104\004\100\005\073" +
    "\016\111\142\103\143\106\144\101\145\076\146\074\147" +
    "\107\001\002\000\026\003\104\004\100\005\073\016\111" +
    "\142\103\143\106\144\101\145\076\146\074\147\107\001" +
    "\002\000\026\003\104\004\100\005\073\016\111\142\103" +
    "\143\106\144\101\145\076\146\074\147\107\001\002\000" +
    "\026\003\104\004\100\005\073\016\111\142\103\143\106" +
    "\144\101\145\076\146\074\147\107\001\002\000\110\003" +
    "\uffcf\004\uffcf\005\uffcf\006\uffcf\007\uffcf\011\157\012\uffcf" +
    "\013\uffcf\014\uffcf\015\uffcf\017\uffcf\023\uffcf\024\uffcf\025" +
    "\uffcf\026\uffcf\027\uffcf\033\uffcf\035\uffcf\037\uffcf\040\uffcf" +
    "\046\uffcf\050\uffcf\052\uffcf\053\uffcf\054\uffcf\060\uffcf\064" +
    "\uffcf\077\uffcf\114\uffcf\125\uffcf\127\uffcf\132\uffcf\135\uffcf" +
    "\137\uffcf\142\uffcf\001\002\000\110\003\uffce\004\uffce\005" +
    "\uffce\006\uffce\007\uffce\011\157\012\uffce\013\uffce\014\uffce" +
    "\015\uffce\017\uffce\023\uffce\024\uffce\025\uffce\026\uffce\027" +
    "\uffce\033\uffce\035\uffce\037\uffce\040\uffce\046\uffce\050\uffce" +
    "\052\uffce\053\uffce\054\uffce\060\uffce\064\uffce\077\uffce\114" +
    "\uffce\125\uffce\127\uffce\132\uffce\135\uffce\137\uffce\142\uffce" +
    "\001\002\000\110\003\uffd0\004\uffd0\005\uffd0\006\162\007" +
    "\161\011\157\012\uffd0\013\uffd0\014\uffd0\015\uffd0\017\uffd0" +
    "\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\033\uffd0\035" +
    "\uffd0\037\uffd0\040\uffd0\046\uffd0\050\uffd0\052\uffd0\053\uffd0" +
    "\054\uffd0\060\uffd0\064\uffd0\077\uffd0\114\uffd0\125\uffd0\127" +
    "\uffd0\132\uffd0\135\uffd0\137\155\142\uffd0\001\002\000\110" +
    "\003\uffcc\004\uffcc\005\uffcc\006\uffcc\007\uffcc\011\uffcc\012" +
    "\uffcc\013\uffcc\014\uffcc\015\uffcc\017\uffcc\023\uffcc\024\uffcc" +
    "\025\uffcc\026\uffcc\027\uffcc\033\uffcc\035\uffcc\037\uffcc\040" +
    "\uffcc\046\uffcc\050\uffcc\052\uffcc\053\uffcc\054\uffcc\060\uffcc" +
    "\064\uffcc\077\uffcc\114\uffcc\125\uffcc\127\uffcc\132\uffcc\135" +
    "\uffcc\137\uffcc\142\uffcc\001\002\000\110\003\uffd1\004\uffd1" +
    "\005\uffd1\006\162\007\161\011\157\012\uffd1\013\uffd1\014" +
    "\uffd1\015\uffd1\017\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1" +
    "\027\uffd1\033\uffd1\035\uffd1\037\uffd1\040\uffd1\046\uffd1\050" +
    "\uffd1\052\uffd1\053\uffd1\054\uffd1\060\uffd1\064\uffd1\077\uffd1" +
    "\114\uffd1\125\uffd1\127\uffd1\132\uffd1\135\uffd1\137\155\142" +
    "\uffd1\001\002\000\110\003\uffcd\004\uffcd\005\uffcd\006\uffcd" +
    "\007\uffcd\011\157\012\uffcd\013\uffcd\014\uffcd\015\uffcd\017" +
    "\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\033\uffcd" +
    "\035\uffcd\037\uffcd\040\uffcd\046\uffcd\050\uffcd\052\uffcd\053" +
    "\uffcd\054\uffcd\060\uffcd\064\uffcd\077\uffcd\114\uffcd\125\uffcd" +
    "\127\uffcd\132\uffcd\135\uffcd\137\uffcd\142\uffcd\001\002\000" +
    "\110\003\uffc5\004\uffc5\005\uffc5\006\uffc5\007\uffc5\011\uffc5" +
    "\012\uffc5\013\uffc5\014\uffc5\015\uffc5\017\uffc5\023\uffc5\024" +
    "\uffc5\025\uffc5\026\uffc5\027\uffc5\033\uffc5\035\uffc5\037\uffc5" +
    "\040\uffc5\046\uffc5\050\uffc5\052\uffc5\053\uffc5\054\uffc5\060" +
    "\uffc5\064\uffc5\077\uffc5\114\uffc5\125\uffc5\127\uffc5\132\uffc5" +
    "\135\uffc5\137\uffc5\142\uffc5\001\002\000\112\003\uffc1\004" +
    "\116\005\120\006\122\007\121\011\uffc1\012\uffc1\013\uffc1" +
    "\014\uffc1\015\uffc1\017\uffc1\023\uffc1\024\uffc1\025\uffc1\026" +
    "\uffc1\027\uffc1\033\uffc1\035\uffc1\037\uffc1\040\uffc1\046\uffc1" +
    "\050\uffc1\052\uffc1\053\uffc1\054\uffc1\060\uffc1\064\uffc1\077" +
    "\uffc1\114\uffc1\125\uffc1\127\uffc1\132\uffc1\135\uffc1\137\114" +
    "\141\117\142\uffc1\001\002\000\026\003\104\004\100\005" +
    "\073\016\111\142\103\143\106\144\101\145\076\146\074" +
    "\147\107\001\002\000\026\003\104\004\100\005\073\016" +
    "\111\142\103\143\106\144\101\145\076\146\074\147\107" +
    "\001\002\000\026\003\104\004\100\005\073\016\111\142" +
    "\103\143\106\144\101\145\076\146\074\147\107\001\002" +
    "\000\026\003\104\004\100\005\073\016\111\142\103\143" +
    "\106\144\101\145\076\146\074\147\107\001\002\000\026" +
    "\003\104\004\100\005\073\016\111\142\103\143\106\144" +
    "\101\145\076\146\074\147\107\001\002\000\026\003\104" +
    "\004\100\005\073\016\111\142\103\143\106\144\101\145" +
    "\076\146\074\147\107\001\002\000\074\003\uffd9\004\156" +
    "\005\160\006\162\007\161\011\157\012\uffd9\013\uffd9\014" +
    "\uffd9\015\uffd9\017\uffd9\023\uffd9\033\uffd9\035\uffd9\037\uffd9" +
    "\040\uffd9\046\uffd9\050\uffd9\052\uffd9\053\uffd9\060\uffd9\064" +
    "\uffd9\077\uffd9\114\uffd9\125\uffd9\127\uffd9\132\uffd9\137\155" +
    "\142\uffd9\001\002\000\074\003\uffde\004\156\005\160\006" +
    "\162\007\161\011\157\012\uffde\013\uffde\014\uffde\015\uffde" +
    "\017\uffde\023\uffde\033\uffde\035\uffde\037\uffde\040\uffde\046" +
    "\uffde\050\uffde\052\uffde\053\uffde\060\uffde\064\uffde\077\uffde" +
    "\114\uffde\125\uffde\127\uffde\132\uffde\137\155\142\uffde\001" +
    "\002\000\074\003\uffdb\004\156\005\160\006\162\007\161" +
    "\011\157\012\uffdb\013\uffdb\014\uffdb\015\uffdb\017\uffdb\023" +
    "\uffdb\033\uffdb\035\uffdb\037\uffdb\040\uffdb\046\uffdb\050\uffdb" +
    "\052\uffdb\053\uffdb\060\uffdb\064\uffdb\077\uffdb\114\uffdb\125" +
    "\uffdb\127\uffdb\132\uffdb\137\155\142\uffdb\001\002\000\074" +
    "\003\uffdd\004\156\005\160\006\162\007\161\011\157\012" +
    "\uffdd\013\uffdd\014\uffdd\015\uffdd\017\uffdd\023\uffdd\033\uffdd" +
    "\035\uffdd\037\uffdd\040\uffdd\046\uffdd\050\uffdd\052\uffdd\053" +
    "\uffdd\060\uffdd\064\uffdd\077\uffdd\114\uffdd\125\uffdd\127\uffdd" +
    "\132\uffdd\137\155\142\uffdd\001\002\000\074\003\uffdc\004" +
    "\156\005\160\006\162\007\161\011\157\012\uffdc\013\uffdc" +
    "\014\uffdc\015\uffdc\017\uffdc\023\uffdc\033\uffdc\035\uffdc\037" +
    "\uffdc\040\uffdc\046\uffdc\050\uffdc\052\uffdc\053\uffdc\060\uffdc" +
    "\064\uffdc\077\uffdc\114\uffdc\125\uffdc\127\uffdc\132\uffdc\137" +
    "\155\142\uffdc\001\002\000\074\003\uffda\004\156\005\160" +
    "\006\162\007\161\011\157\012\uffda\013\uffda\014\uffda\015" +
    "\uffda\017\uffda\023\uffda\033\uffda\035\uffda\037\uffda\040\uffda" +
    "\046\uffda\050\uffda\052\uffda\053\uffda\060\uffda\064\uffda\077" +
    "\uffda\114\uffda\125\uffda\127\uffda\132\uffda\137\155\142\uffda" +
    "\001\002\000\110\003\uffc4\004\uffc4\005\uffc4\006\uffc4\007" +
    "\uffc4\011\uffc4\012\uffc4\013\uffc4\014\uffc4\015\uffc4\017\uffc4" +
    "\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4\033\uffc4\035" +
    "\uffc4\037\uffc4\040\uffc4\046\uffc4\050\uffc4\052\uffc4\053\uffc4" +
    "\054\uffc4\060\uffc4\064\uffc4\077\uffc4\114\uffc4\125\uffc4\127" +
    "\uffc4\132\uffc4\135\uffc4\137\uffc4\142\uffc4\001\002\000\112" +
    "\003\uffc2\004\uffc2\005\uffc2\006\uffc2\007\uffc2\011\uffc2\012" +
    "\uffc2\013\uffc2\014\uffc2\015\uffc2\017\uffc2\023\uffc2\024\uffc2" +
    "\025\uffc2\026\uffc2\027\uffc2\033\uffc2\035\uffc2\037\uffc2\040" +
    "\uffc2\046\uffc2\050\uffc2\052\uffc2\053\uffc2\054\uffc2\060\uffc2" +
    "\064\uffc2\077\uffc2\114\uffc2\125\uffc2\127\uffc2\132\uffc2\135" +
    "\uffc2\137\uffc2\141\117\142\uffc2\001\002\000\004\053\212" +
    "\001\002\000\004\012\213\001\002\000\034\003\uff93\012" +
    "\uff93\037\uff93\040\uff93\046\uff93\052\uff93\053\uff93\060\uff93" +
    "\064\uff93\114\uff93\127\uff93\132\uff93\142\uff93\001\002\000" +
    "\034\003\uff95\012\uff95\037\uff95\040\uff95\046\uff95\052\uff95" +
    "\053\uff95\060\uff95\064\uff95\114\uff95\127\uff95\132\uff95\142" +
    "\uff95\001\002\000\006\003\216\134\217\001\002\000\030" +
    "\003\104\004\100\005\073\016\111\074\110\142\103\143" +
    "\106\144\101\145\076\146\074\147\107\001\002\000\030" +
    "\003\221\004\100\005\073\016\111\074\110\142\103\143" +
    "\106\144\101\145\076\146\074\147\107\001\002\000\010" +
    "\033\132\077\133\125\226\001\002\000\020\004\116\005" +
    "\120\006\122\007\121\125\222\137\114\141\117\001\002" +
    "\000\030\003\104\004\100\005\073\016\111\074\110\142" +
    "\103\143\106\144\101\145\076\146\074\147\107\001\002" +
    "\000\010\033\132\050\224\077\133\001\002\000\026\003" +
    "\056\035\067\037\054\040\057\046\044\060\064\064\051" +
    "\114\065\132\046\142\052\001\002\000\034\003\uff98\012" +
    "\uff98\037\uff98\040\uff98\046\uff98\052\uff98\053\uff98\060\uff98" +
    "\064\uff98\114\uff98\127\uff98\132\uff98\142\uff98\001\002\000" +
    "\030\003\104\004\100\005\073\016\111\074\110\142\103" +
    "\143\106\144\101\145\076\146\074\147\107\001\002\000" +
    "\010\033\132\050\230\077\133\001\002\000\026\003\056" +
    "\035\067\037\054\040\057\046\044\060\064\064\051\114" +
    "\065\132\046\142\052\001\002\000\034\003\uff99\012\uff99" +
    "\037\uff99\040\uff99\046\uff99\052\uff99\053\uff99\060\uff99\064" +
    "\uff99\114\uff99\127\uff99\132\uff99\142\uff99\001\002\000\010" +
    "\033\132\077\133\125\233\001\002\000\030\003\104\004" +
    "\100\005\073\016\111\074\110\142\103\143\106\144\101" +
    "\145\076\146\074\147\107\001\002\000\010\033\132\050" +
    "\235\077\133\001\002\000\026\003\056\035\067\037\054" +
    "\040\057\046\044\060\064\064\051\114\065\132\046\142" +
    "\052\001\002\000\034\003\uff97\012\uff97\037\uff97\040\uff97" +
    "\046\uff97\052\uff97\053\uff97\060\uff97\064\uff97\114\uff97\127" +
    "\uff97\132\uff97\142\uff97\001\002\000\034\003\uffb3\012\uffb3" +
    "\037\uffb3\040\uffb3\046\uffb3\052\uffb3\053\uffb3\060\uffb3\064" +
    "\uffb3\114\uffb3\127\uffb3\132\uffb3\142\uffb3\001\002\000\034" +
    "\003\uffbb\012\245\037\uffbb\040\uffbb\046\uffbb\052\246\053" +
    "\uffbb\060\uffbb\064\uffbb\114\uffbb\127\uffbb\132\uffbb\142\uffbb" +
    "\001\002\000\026\003\056\037\054\040\057\046\044\053" +
    "\uff91\060\064\064\051\114\065\132\046\142\052\001\002" +
    "\000\034\003\uffb2\012\uffb2\037\uffb2\040\uffb2\046\uffb2\052" +
    "\uffb2\053\uffb2\060\uffb2\064\uffb2\114\uffb2\127\uffb2\132\uffb2" +
    "\142\uffb2\001\002\000\004\053\244\001\002\000\034\003" +
    "\uffb1\012\uffb1\037\uffb1\040\uffb1\046\uffb1\052\uffb1\053\uffb1" +
    "\060\uffb1\064\uffb1\114\uffb1\127\uffb1\132\uffb1\142\uffb1\001" +
    "\002\000\034\003\uffba\012\uffba\037\uffba\040\uffba\046\uffba" +
    "\052\uffba\053\uffba\060\uffba\064\uffba\114\uffba\127\uffba\132" +
    "\uffba\142\uffba\001\002\000\026\003\056\035\256\037\054" +
    "\040\057\046\044\060\064\064\051\114\065\132\046\142" +
    "\052\001\002\000\004\012\uffa8\001\002\000\004\012\uffab" +
    "\001\002\000\004\012\uffaa\001\002\000\004\012\263\001" +
    "\002\000\004\012\uffad\001\002\000\034\003\uffb9\012\uffb9" +
    "\037\uffb9\040\uffb9\046\uffb9\052\uffb9\053\uffb9\060\uffb9\064" +
    "\uffb9\114\uffb9\127\uffb9\132\uffb9\142\uffb9\001\002\000\004" +
    "\012\uffae\001\002\000\026\003\056\037\054\040\057\046" +
    "\044\053\uff91\060\064\064\051\114\065\132\046\142\052" +
    "\001\002\000\034\003\uffaf\012\uffaf\037\uffaf\040\uffaf\046" +
    "\uffaf\052\uffaf\053\uffaf\060\uffaf\064\uffaf\114\uffaf\127\uffaf" +
    "\132\uffaf\142\uffaf\001\002\000\004\012\uffa9\001\002\000" +
    "\004\053\262\001\002\000\004\012\uffac\001\002\000\034" +
    "\003\uffb0\012\uffb0\037\uffb0\040\uffb0\046\uffb0\052\uffb0\053" +
    "\uffb0\060\uffb0\064\uffb0\114\uffb0\127\uffb0\132\uffb0\142\uffb0" +
    "\001\002\000\004\012\265\001\002\000\010\030\uff74\061" +
    "\uff74\106\uff74\001\002\000\030\003\104\004\100\005\073" +
    "\016\111\074\110\142\103\143\106\144\101\145\076\146" +
    "\074\147\107\001\002\000\010\017\270\033\132\077\133" +
    "\001\002\000\004\076\271\001\002\000\030\003\104\004" +
    "\100\005\073\016\111\074\110\142\103\143\106\144\101" +
    "\145\076\146\074\147\107\001\002\000\032\003\104\004" +
    "\100\005\073\016\111\052\310\074\110\142\103\143\106" +
    "\144\101\145\076\146\074\147\107\001\002\000\006\013" +
    "\276\014\275\001\002\000\012\013\uffa3\014\uffa3\033\132" +
    "\077\133\001\002\000\030\003\104\004\100\005\073\016" +
    "\111\074\110\142\103\143\106\144\101\145\076\146\074" +
    "\147\107\001\002\000\026\003\056\035\301\037\054\040" +
    "\057\046\044\060\064\064\051\114\065\132\046\142\052" +
    "\001\002\000\004\012\305\001\002\000\004\012\uffa2\001" +
    "\002\000\026\003\056\037\054\040\057\046\044\053\uff91" +
    "\060\064\064\051\114\065\132\046\142\052\001\002\000" +
    "\004\012\uffa1\001\002\000\004\053\304\001\002\000\004" +
    "\012\uffa0\001\002\000\032\003\uffa5\004\uffa5\005\uffa5\016" +
    "\uffa5\052\uffa5\074\uffa5\142\uffa5\143\uffa5\144\uffa5\145\uffa5" +
    "\146\uffa5\147\uffa5\001\002\000\012\013\uffa4\014\uffa4\033" +
    "\132\077\133\001\002\000\006\013\321\014\275\001\002" +
    "\000\026\003\056\035\312\037\054\040\057\046\044\060" +
    "\064\064\051\114\065\132\046\142\052\001\002\000\006" +
    "\012\320\053\uff9f\001\002\000\026\003\056\037\054\040" +
    "\057\046\044\053\uff91\060\064\064\051\114\065\132\046" +
    "\142\052\001\002\000\004\053\uff9d\001\002\000\004\053" +
    "\315\001\002\000\004\012\316\001\002\000\034\003\uffa7" +
    "\012\uffa7\037\uffa7\040\uffa7\046\uffa7\052\uffa7\053\uffa7\060" +
    "\uffa7\064\uffa7\114\uffa7\127\uffa7\132\uffa7\142\uffa7\001\002" +
    "\000\004\053\uff9c\001\002\000\004\053\uff9e\001\002\000" +
    "\026\003\056\035\301\037\054\040\057\046\044\060\064" +
    "\064\051\114\065\132\046\142\052\001\002\000\004\012" +
    "\323\001\002\000\032\003\uffa6\004\uffa6\005\uffa6\016\uffa6" +
    "\052\uffa6\074\uffa6\142\uffa6\143\uffa6\144\uffa6\145\uffa6\146" +
    "\uffa6\147\uffa6\001\002\000\010\003\331\012\330\053\uff8a" +
    "\001\002\000\026\003\056\037\054\040\057\046\044\053" +
    "\uff86\060\064\064\051\114\065\132\046\142\052\001\002" +
    "\000\004\053\uff8c\001\002\000\004\053\uff87\001\002\000" +
    "\026\003\056\037\054\040\057\046\044\053\uff89\060\064" +
    "\064\051\114\065\132\046\142\052\001\002\000\004\053" +
    "\uff8b\001\002\000\004\053\uff88\001\002\000\030\003\104" +
    "\004\100\005\073\016\111\074\110\142\103\143\106\144" +
    "\101\145\076\146\074\147\107\001\002\000\030\003\104" +
    "\004\100\005\073\016\111\074\110\142\103\143\106\144" +
    "\101\145\076\146\074\147\107\001\002\000\032\003\104" +
    "\004\100\005\073\016\111\017\336\074\110\142\103\143" +
    "\106\144\101\145\076\146\074\147\107\001\002\000\034" +
    "\003\uff81\012\uff81\037\uff81\040\uff81\046\uff81\052\uff81\053" +
    "\uff81\060\uff81\064\uff81\114\uff81\127\uff81\132\uff81\142\uff81" +
    "\001\002\000\006\014\150\017\340\001\002\000\034\003" +
    "\uff82\012\uff82\037\uff82\040\uff82\046\uff82\052\uff82\053\uff82" +
    "\060\uff82\064\uff82\114\uff82\127\uff82\132\uff82\142\uff82\001" +
    "\002\000\040\003\uff83\012\uff83\033\132\037\uff83\040\uff83" +
    "\046\uff83\052\uff83\053\uff83\060\uff83\064\uff83\077\133\114" +
    "\uff83\127\uff83\132\uff83\142\uff83\001\002\000\010\023\343" +
    "\033\132\077\133\001\002\000\004\134\344\001\002\000" +
    "\030\003\104\004\100\005\073\016\111\074\110\142\103" +
    "\143\106\144\101\145\076\146\074\147\107\001\002\000" +
    "\040\003\uff80\012\uff80\033\132\037\uff80\040\uff80\046\uff80" +
    "\052\uff80\053\uff80\060\uff80\064\uff80\077\133\114\uff80\127" +
    "\uff80\132\uff80\142\uff80\001\002\000\030\003\104\004\100" +
    "\005\073\016\111\074\110\142\103\143\106\144\101\145" +
    "\076\146\074\147\107\001\002\000\030\003\351\004\100" +
    "\005\073\016\111\074\110\142\103\143\106\144\101\145" +
    "\076\146\074\147\107\001\002\000\012\003\355\017\354" +
    "\033\132\077\133\001\002\000\020\004\116\005\120\006" +
    "\122\007\121\017\352\137\114\141\117\001\002\000\004" +
    "\123\353\001\002\000\026\003\uffb7\035\uffb7\037\uffb7\040" +
    "\uffb7\046\uffb7\060\uffb7\064\uffb7\114\uffb7\132\uffb7\142\uffb7" +
    "\001\002\000\004\123\357\001\002\000\004\123\356\001" +
    "\002\000\026\003\uffb6\035\uffb6\037\uffb6\040\uffb6\046\uffb6" +
    "\060\uffb6\064\uffb6\114\uffb6\132\uffb6\142\uffb6\001\002\000" +
    "\026\003\uffb8\035\uffb8\037\uffb8\040\uffb8\046\uffb8\060\uffb8" +
    "\064\uffb8\114\uffb8\132\uffb8\142\uffb8\001\002\000\012\003" +
    "\362\017\361\033\132\077\133\001\002\000\004\123\364" +
    "\001\002\000\004\123\363\001\002\000\026\003\uffb4\035" +
    "\uffb4\037\uffb4\040\uffb4\046\uffb4\060\uffb4\064\uffb4\114\uffb4" +
    "\132\uffb4\142\uffb4\001\002\000\026\003\uffb5\035\uffb5\037" +
    "\uffb5\040\uffb5\046\uffb5\060\uffb5\064\uffb5\114\uffb5\132\uffb5" +
    "\142\uffb5\001\002\000\026\003\056\037\054\040\057\046" +
    "\044\053\uff8f\060\064\064\051\114\065\132\046\142\052" +
    "\001\002\000\004\053\uff8d\001\002\000\030\003\371\004" +
    "\100\005\073\016\111\074\110\142\103\143\106\144\101" +
    "\145\076\146\074\147\107\001\002\000\010\017\375\033" +
    "\132\077\133\001\002\000\020\004\116\005\120\006\122" +
    "\007\121\017\372\137\114\141\117\001\002\000\004\050" +
    "\373\001\002\000\026\003\056\035\067\037\054\040\057" +
    "\046\044\060\064\064\051\114\065\132\046\142\052\001" +
    "\002\000\034\003\uff9a\012\uff9a\037\uff9a\040\uff9a\046\uff9a" +
    "\052\uff9a\053\uff9a\060\uff9a\064\uff9a\114\uff9a\127\uff9a\132" +
    "\uff9a\142\uff9a\001\002\000\004\050\376\001\002\000\026" +
    "\003\056\035\067\037\054\040\057\046\044\060\064\064" +
    "\051\114\065\132\046\142\052\001\002\000\034\003\uff9b" +
    "\012\uff9b\037\uff9b\040\uff9b\046\uff9b\052\uff9b\053\uff9b\060" +
    "\uff9b\064\uff9b\114\uff9b\127\uff9b\132\uff9b\142\uff9b\001\002" +
    "\000\006\035\ufff0\142\016\001\002\000\004\142\016\001" +
    "\002\000\010\003\u0108\013\u0109\014\u0107\001\002\000\006" +
    "\003\u0105\012\u0104\001\002\000\006\035\uffed\142\uffed\001" +
    "\002\000\004\142\016\001\002\000\006\035\uffea\142\uffea" +
    "\001\002\000\004\142\u0122\001\002\000\044\003\u0119\004" +
    "\100\005\073\016\111\034\u011a\036\035\042\030\057\032" +
    "\070\033\074\110\120\034\142\u0115\143\106\144\101\145" +
    "\076\146\074\147\107\001\002\000\022\003\031\034\u010a" +
    "\036\035\042\030\057\032\070\033\120\034\142\026\001" +
    "\002\000\004\022\u010d\001\002\000\012\003\uffe9\012\uffe9" +
    "\035\uffe9\142\uffe9\001\002\000\004\076\u0113\001\002\000" +
    "\030\003\104\004\100\005\073\016\111\074\110\142\103" +
    "\143\106\144\101\145\076\146\074\147\107\001\002\000" +
    "\010\015\u010f\033\132\077\133\001\002\000\004\015\u0110" +
    "\001\002\000\030\003\104\004\100\005\073\016\111\074" +
    "\110\142\103\143\106\144\101\145\076\146\074\147\107" +
    "\001\002\000\010\023\u0112\033\132\077\133\001\002\000" +
    "\004\076\ufff3\001\002\000\020\003\031\036\035\042\030" +
    "\057\032\070\033\120\034\142\026\001\002\000\012\003" +
    "\uffe8\012\uffe8\035\uffe8\142\uffe8\001\002\000\054\003\ufff8" +
    "\004\uffc7\005\uffc7\006\uffc7\007\uffc7\011\uffc7\012\ufff8\015" +
    "\uffc7\016\144\022\143\024\uffc7\025\uffc7\026\uffc7\027\uffc7" +
    "\033\uffc7\035\ufff8\054\uffc7\077\uffc7\135\uffc7\137\uffc7\142" +
    "\ufff8\001\002\000\012\003\uffe7\012\uffe7\035\uffe7\142\uffe7" +
    "\001\002\000\012\003\uffe6\012\uffe6\035\uffe6\142\uffe6\001" +
    "\002\000\010\015\u011e\033\132\077\133\001\002\000\026" +
    "\003\ufff7\004\116\005\120\006\122\007\121\012\ufff7\035" +
    "\ufff7\137\114\141\117\142\ufff7\001\002\000\004\022\u010d" +
    "\001\002\000\004\076\u011c\001\002\000\020\003\031\036" +
    "\035\042\030\057\032\070\033\120\034\142\026\001\002" +
    "\000\012\003\uffe5\012\uffe5\035\uffe5\142\uffe5\001\002\000" +
    "\004\015\u011f\001\002\000\004\015\u0120\001\002\000\030" +
    "\003\104\004\100\005\073\016\111\074\110\142\103\143" +
    "\106\144\101\145\076\146\074\147\107\001\002\000\016" +
    "\003\ufff4\012\ufff4\033\132\035\ufff4\077\133\142\ufff4\001" +
    "\002\000\010\003\ufff6\013\ufff6\014\ufff6\001\002\000\006" +
    "\035\uffeb\142\uffeb\001\002\000\006\003\u0126\012\u0125\001" +
    "\002\000\006\035\uffee\142\uffee\001\002\000\004\142\016" +
    "\001\002\000\006\035\uffec\142\uffec\001\002\000\006\012" +
    "\uff6e\017\uff6e\001\002\000\020\003\031\036\035\042\030" +
    "\057\032\070\033\120\034\142\026\001\002\000\006\012" +
    "\uff6a\017\uff6a\001\002\000\006\013\u012c\014\u0107\001\002" +
    "\000\020\003\031\036\035\042\030\057\032\070\033\120" +
    "\034\142\026\001\002\000\006\012\uff6b\017\uff6b\001\002" +
    "\000\004\142\u0133\001\002\000\004\030\ufffe\001\002\000" +
    "\006\030\uff70\106\uff70\001\002\000\006\030\uff73\106\u012e" +
    "\001\002\000\006\030\uff71\106\uff71\001\002\000\004\016" +
    "\u0134\001\002\000\012\012\uff6c\017\uff6c\130\017\142\016" +
    "\001\002\000\006\012\023\017\u0136\001\002\000\004\012" +
    "\u0137\001\002\000\006\035\uffef\130\037\001\002\000\004" +
    "\035\u0139\001\002\000\026\003\056\037\054\040\057\046" +
    "\044\053\uff91\060\064\064\051\114\065\132\046\142\052" +
    "\001\002\000\004\053\u013b\001\002\000\004\012\u013c\001" +
    "\002\000\006\030\uff6f\106\uff6f\001\002\000\010\030\uff76" +
    "\061\uff76\106\uff76\001\002\000\004\032\u0281\001\002\000" +
    "\006\032\uff4c\111\uff4c\001\002\000\006\032\uff69\111\u0142" +
    "\001\002\000\006\032\uff4d\111\uff4d\001\002\000\004\043" +
    "\u0143\001\002\000\004\142\u0144\001\002\000\006\020\uff49" +
    "\055\u0145\001\002\000\004\142\u027f\001\002\000\004\020" +
    "\u0147\001\002\000\012\021\uff47\105\uff47\110\uff47\111\uff47" +
    "\001\002\000\012\021\u014c\105\u014e\110\u014a\111\u014d\001" +
    "\002\000\020\036\u0155\042\u0150\057\u0152\070\u0153\120\u0154" +
    "\131\u0156\142\u014f\001\002\000\020\036\uff66\042\uff66\057" +
    "\uff66\070\uff66\120\uff66\131\uff66\142\uff66\001\002\000\012" +
    "\021\uff48\105\uff48\110\uff48\111\uff48\001\002\000\006\032" +
    "\uff4b\111\uff4b\001\002\000\020\036\uff68\042\uff68\057\uff68" +
    "\070\uff68\120\uff68\131\uff68\142\uff68\001\002\000\020\036" +
    "\uff67\042\uff67\057\uff67\070\uff67\120\uff67\131\uff67\142\uff67" +
    "\001\002\000\010\016\u0279\022\u0162\142\uff5a\001\002\000" +
    "\006\022\u0162\142\uff5b\001\002\000\004\142\u0271\001\002" +
    "\000\006\022\u0162\142\uff5d\001\002\000\006\022\u0162\142" +
    "\uff5f\001\002\000\006\022\u0162\142\uff5e\001\002\000\006" +
    "\022\u0162\142\uff5c\001\002\000\004\142\u0157\001\002\000" +
    "\004\016\u0159\001\002\000\012\021\uff45\105\uff45\110\uff45" +
    "\111\uff45\001\002\000\020\017\uff3e\036\u0155\042\u0150\057" +
    "\u0152\070\u0153\120\u0154\142\u015d\001\002\000\006\014\uff3c" +
    "\017\uff3c\001\002\000\004\017\u0167\001\002\000\004\142" +
    "\u0166\001\002\000\006\022\u0162\142\uff5a\001\002\000\006" +
    "\014\u015f\017\uff3f\001\002\000\016\036\u0155\042\u0150\057" +
    "\u0152\070\u0153\120\u0154\142\u015d\001\002\000\006\014\uff3d" +
    "\017\uff3d\001\002\000\006\022\u0162\142\uff60\001\002\000" +
    "\004\023\u0164\001\002\000\006\022\uff58\142\uff58\001\002" +
    "\000\006\022\uff57\142\uff57\001\002\000\006\022\uff59\142" +
    "\uff59\001\002\000\006\014\uff3b\017\uff3b\001\002\000\004" +
    "\020\u0168\001\002\000\050\021\uff39\036\uff39\037\uff39\042" +
    "\uff39\046\uff39\050\uff39\057\uff39\060\uff39\064\uff39\070\uff39" +
    "\102\uff39\103\uff39\115\uff39\120\uff39\121\uff39\122\uff39\124" +
    "\uff39\132\uff39\142\uff39\001\002\000\050\021\u016b\036\u0155" +
    "\037\u0177\042\u0150\046\u016a\050\u0174\057\u0152\060\u0181\064" +
    "\u0170\070\u0153\102\u017b\103\u0175\115\u016d\120\u0154\121\u0182" +
    "\122\u016f\124\u0173\132\u016c\142\u0171\001\002\000\004\012" +
    "\uff2b\001\002\000\012\021\uff40\105\uff40\110\uff40\111\uff40" +
    "\001\002\000\004\016\u0267\001\002\000\046\003\u01a1\004" +
    "\u0195\005\u01a0\016\u0199\041\u0198\056\u0193\067\u01a5\073\u01a4" +
    "\074\u0197\075\u01a3\121\u01a7\124\u019c\142\u019a\143\u0192\144" +
    "\u01a8\145\u019f\146\u0191\147\u01a6\001\002\000\054\021\uff3a" +
    "\036\uff3a\037\uff3a\040\uff3a\042\uff3a\046\uff3a\047\uff3a\050" +
    "\uff3a\057\uff3a\060\uff3a\064\uff3a\070\uff3a\102\uff3a\103\uff3a" +
    "\115\uff3a\120\uff3a\121\uff3a\122\uff3a\124\uff3a\132\uff3a\142" +
    "\uff3a\001\002\000\004\016\u0257\001\002\000\004\016\u024b" +
    "\001\002\000\014\015\u018a\016\u022b\022\u022a\134\u0229\142" +
    "\uff5a\001\002\000\054\021\uff30\036\uff30\037\uff30\040\uff30" +
    "\042\uff30\046\uff30\047\uff30\050\uff30\057\uff30\060\uff30\064" +
    "\uff30\070\uff30\102\uff30\103\uff30\115\uff30\120\uff30\121\uff30" +
    "\122\uff30\124\uff30\132\uff30\142\uff30\001\002\000\006\015" +
    "\u018a\016\u0223\001\002\000\004\020\u021b\001\002\000\004" +
    "\016\u0218\001\002\000\004\142\u0215\001\002\000\004\012" +
    "\uff2c\001\002\000\004\012\u0214\001\002\000\054\021\uff31" +
    "\036\uff31\037\uff31\040\uff31\042\uff31\046\uff31\047\uff31\050" +
    "\uff31\057\uff31\060\uff31\064\uff31\070\uff31\102\uff31\103\uff31" +
    "\115\uff31\120\uff31\121\uff31\122\uff31\124\uff31\132\uff31\142" +
    "\uff31\001\002\000\054\021\uff2d\036\uff2d\037\uff2d\040\uff2d" +
    "\042\uff2d\046\uff2d\047\uff2d\050\uff2d\057\uff2d\060\uff2d\064" +
    "\uff2d\070\uff2d\102\uff2d\103\uff2d\115\uff2d\120\uff2d\121\uff2d" +
    "\122\uff2d\124\uff2d\132\uff2d\142\uff2d\001\002\000\004\016" +
    "\u0211\001\002\000\004\012\u0210\001\002\000\004\012\u020f" +
    "\001\002\000\054\021\uff2e\036\uff2e\037\uff2e\040\uff2e\042" +
    "\uff2e\046\uff2e\047\uff2e\050\uff2e\057\uff2e\060\uff2e\064\uff2e" +
    "\070\uff2e\102\uff2e\103\uff2e\115\uff2e\120\uff2e\121\uff2e\122" +
    "\uff2e\124\uff2e\132\uff2e\142\uff2e\001\002\000\054\021\uff38" +
    "\036\uff38\037\uff38\040\uff38\042\uff38\046\uff38\047\uff38\050" +
    "\uff38\057\uff38\060\uff38\064\uff38\070\uff38\102\uff38\103\uff38" +
    "\115\uff38\120\uff38\121\uff38\122\uff38\124\uff38\132\uff38\142" +
    "\uff38\001\002\000\004\012\u020e\001\002\000\004\017\u01fc" +
    "\001\002\000\006\015\u018a\016\u0189\001\002\000\054\021" +
    "\uff2f\036\uff2f\037\uff2f\040\uff2f\042\uff2f\046\uff2f\047\uff2f" +
    "\050\uff2f\057\uff2f\060\uff2f\064\uff2f\070\uff2f\102\uff2f\103" +
    "\uff2f\115\uff2f\120\uff2f\121\uff2f\122\uff2f\124\uff2f\132\uff2f" +
    "\142\uff2f\001\002\000\004\012\u0187\001\002\000\004\012" +
    "\u0186\001\002\000\054\021\uff35\036\uff35\037\uff35\040\uff35" +
    "\042\uff35\046\uff35\047\uff35\050\uff35\057\uff35\060\uff35\064" +
    "\uff35\070\uff35\102\uff35\103\uff35\115\uff35\120\uff35\121\uff35" +
    "\122\uff35\124\uff35\132\uff35\142\uff35\001\002\000\054\021" +
    "\uff32\036\uff32\037\uff32\040\uff32\042\uff32\046\uff32\047\uff32" +
    "\050\uff32\057\uff32\060\uff32\064\uff32\070\uff32\102\uff32\103" +
    "\uff32\115\uff32\120\uff32\121\uff32\122\uff32\124\uff32\132\uff32" +
    "\142\uff32\001\002\000\010\012\uff08\017\uff08\134\u01fa\001" +
    "\002\000\050\003\u01a1\004\u0195\005\u01a0\016\u0199\017\u01f7" +
    "\041\u0198\056\u0193\067\u01a5\073\u01a4\074\u0197\075\u01a3\121" +
    "\u01a7\124\u019c\142\u019a\143\u0192\144\u01a8\145\u019f\146\u0191" +
    "\147\u01a6\001\002\000\004\142\u018b\001\002\000\060\004" +
    "\ufef9\005\ufef9\006\ufef9\007\ufef9\011\ufef9\012\ufef9\013\ufef9" +
    "\014\ufef9\015\ufef9\016\u0190\017\ufef9\022\u018f\023\ufef9\024" +
    "\ufef9\025\ufef9\026\ufef9\027\ufef9\033\ufef9\054\ufef9\077\ufef9" +
    "\134\ufef9\135\ufef9\137\ufef9\001\002\000\054\004\ufefa\005" +
    "\ufefa\006\ufefa\007\ufefa\011\ufefa\012\ufefa\013\ufefa\014\ufefa" +
    "\015\u018a\017\ufefa\023\ufefa\024\ufefa\025\ufefa\026\ufefa\027" +
    "\ufefa\033\ufefa\054\ufefa\077\ufefa\134\ufefa\135\ufefa\137\ufefa" +
    "\001\002\000\052\004\ufefb\005\ufefb\006\ufefb\007\ufefb\011" +
    "\ufefb\012\ufefb\013\ufefb\014\ufefb\017\ufefb\023\ufefb\024\ufefb" +
    "\025\ufefb\026\ufefb\027\ufefb\033\ufefb\054\ufefb\077\ufefb\134" +
    "\ufefb\135\ufefb\137\ufefb\001\002\000\056\004\ufef4\005\ufef4" +
    "\006\ufef4\007\ufef4\011\ufef4\012\ufef4\013\ufef4\014\ufef4\015" +
    "\ufef4\017\ufef4\022\u01e0\023\ufef4\024\ufef4\025\ufef4\026\ufef4" +
    "\027\ufef4\033\ufef4\054\ufef4\077\ufef4\134\ufef4\135\ufef4\137" +
    "\ufef4\001\002\000\046\003\u01a1\004\u0195\005\u01a0\016\u0199" +
    "\041\u0198\056\u0193\067\u01a5\073\u01a4\074\u0197\075\u01a3\121" +
    "\u01a7\124\u019c\142\u019a\143\u0192\144\u01a8\145\u019f\146\u0191" +
    "\147\u01a6\001\002\000\050\003\u01a1\004\u0195\005\u01a0\016" +
    "\u0199\017\u0196\041\u0198\056\u0193\067\u01a5\073\u01a4\074\u0197" +
    "\075\u01a3\121\u01a7\124\u019c\142\u019a\143\u0192\144\u01a8\145" +
    "\u019f\146\u0191\147\u01a6\001\002\000\050\004\uff50\005\uff50" +
    "\006\uff50\007\uff50\011\uff50\012\uff50\013\uff50\014\uff50\017" +
    "\uff50\023\uff50\024\uff50\025\uff50\026\uff50\027\uff50\033\uff50" +
    "\054\uff50\077\uff50\135\uff50\137\uff50\001\002\000\050\004" +
    "\uff51\005\uff51\006\uff51\007\uff51\011\uff51\012\uff51\013\uff51" +
    "\014\uff51\017\uff51\023\uff51\024\uff51\025\uff51\026\uff51\027" +
    "\uff51\033\uff51\054\uff51\077\uff51\135\uff51\137\uff51\001\002" +
    "\000\004\016\u01f3\001\002\000\012\014\uff53\017\uff53\033" +
    "\u01cc\077\u01cd\001\002\000\044\003\u01a1\004\u0195\005\u01a0" +
    "\016\u0199\041\u0198\056\u0193\067\u01a5\073\u01a4\075\u01a3\121" +
    "\u01a7\124\u019c\142\u019a\143\u0192\144\u01a8\145\u019f\146\u0191" +
    "\147\u01a6\001\002\000\056\004\ufef8\005\ufef8\006\ufef8\007" +
    "\ufef8\011\ufef8\012\ufef8\013\ufef8\014\ufef8\015\ufef8\017\ufef8" +
    "\022\u018f\023\ufef8\024\ufef8\025\ufef8\026\ufef8\027\ufef8\033" +
    "\ufef8\054\ufef8\077\ufef8\134\ufef8\135\ufef8\137\ufef8\001\002" +
    "\000\046\003\u01a1\004\u0195\005\u01a0\016\u0199\041\u0198\056" +
    "\u0193\067\u01a5\073\u01a4\074\u0197\075\u01a3\121\u01a7\124\u019c" +
    "\142\u019a\143\u0192\144\u01a8\145\u019f\146\u0191\147\u01a6\001" +
    "\002\000\004\016\u01ee\001\002\000\046\003\u01a1\004\u0195" +
    "\005\u01a0\016\u0199\041\u0198\056\u0193\067\u01a5\073\u01a4\074" +
    "\u0197\075\u01a3\121\u01a7\124\u019c\142\u019a\143\u0192\144\u01a8" +
    "\145\u019f\146\u0191\147\u01a6\001\002\000\056\004\ufed3\005" +
    "\ufed3\006\ufed3\007\ufed3\011\ufed3\012\ufed3\013\ufed3\014\ufed3" +
    "\015\u018a\016\u01e5\017\ufed3\022\u018f\023\ufed3\024\ufed3\025" +
    "\ufed3\026\ufed3\027\ufed3\033\ufed3\054\ufed3\077\ufed3\135\ufed3" +
    "\137\ufed3\001\002\000\006\014\u01c9\017\u01de\001\002\000" +
    "\004\015\u018a\001\002\000\020\012\ufef0\013\ufef0\014\ufef0" +
    "\017\ufef0\023\ufef0\033\ufef0\077\ufef0\001\002\000\050\004" +
    "\ufedc\005\ufedc\006\ufedc\007\ufedc\011\ufedc\012\ufedc\013\ufedc" +
    "\014\ufedc\017\ufedc\023\ufedc\024\ufedc\025\ufedc\026\ufedc\027" +
    "\ufedc\033\ufedc\054\ufedc\077\ufedc\135\ufedc\137\ufedc\001\002" +
    "\000\050\004\uff52\005\uff52\006\uff52\007\uff52\011\uff52\012" +
    "\uff52\013\uff52\014\uff52\017\uff52\023\uff52\024\uff52\025\uff52" +
    "\026\uff52\027\uff52\033\uff52\054\uff52\077\uff52\135\uff52\137" +
    "\uff52\001\002\000\044\003\u01a1\004\u0195\005\u01a0\016\u0199" +
    "\041\u0198\056\u0193\067\u01a5\073\u01a4\075\u01a3\121\u01a7\124" +
    "\u019c\142\u019a\143\u0192\144\u01a8\145\u019f\146\u0191\147\u01a6" +
    "\001\002\000\016\004\u01d1\005\u01d3\006\u01d5\007\u01d4\137" +
    "\u01d0\141\u01d2\001\002\000\050\004\ufece\005\ufece\006\ufece" +
    "\007\ufece\011\ufece\012\ufece\013\ufece\014\ufece\017\ufece\023" +
    "\ufece\024\ufece\025\ufece\026\ufece\027\ufece\033\ufece\054\ufece" +
    "\077\ufece\135\ufece\137\ufece\001\002\000\050\004\ufedb\005" +
    "\ufedb\006\ufedb\007\ufedb\011\ufedb\012\ufedb\013\ufedb\014\ufedb" +
    "\017\ufedb\023\ufedb\024\ufedb\025\ufedb\026\ufedb\027\ufedb\033" +
    "\ufedb\054\ufedb\077\ufedb\135\ufedb\137\ufedb\001\002\000\004" +
    "\142\u01c5\001\002\000\004\016\u01c3\001\002\000\050\004" +
    "\uff4e\005\uff4e\006\uff4e\007\uff4e\011\uff4e\012\uff4e\013\uff4e" +
    "\014\uff4e\017\uff4e\023\uff4e\024\uff4e\025\uff4e\026\uff4e\027" +
    "\uff4e\033\uff4e\054\uff4e\077\uff4e\135\uff4e\137\uff4e\001\002" +
    "\000\004\015\u018a\001\002\000\050\004\uff4f\005\uff4f\006" +
    "\uff4f\007\uff4f\011\uff4f\012\uff4f\013\uff4f\014\uff4f\017\uff4f" +
    "\023\uff4f\024\uff4f\025\uff4f\026\uff4f\027\uff4f\033\uff4f\054" +
    "\uff4f\077\uff4f\135\uff4f\137\uff4f\001\002\000\050\004\u01af" +
    "\005\u01aa\006\u01b2\007\u01b0\011\u01b3\012\ufee9\013\ufee9\014" +
    "\ufee9\017\ufee9\023\ufee9\024\u01ac\025\u01b1\026\u01ab\027\u01b5" +
    "\033\ufee9\054\u01b4\077\ufee9\135\u01ae\137\u01ad\001\002\000" +
    "\044\003\u01a1\004\u0195\005\u01a0\016\u0199\041\u0198\056\u0193" +
    "\067\u01a5\073\u01a4\075\u01a3\121\u01a7\124\u019c\142\u019a\143" +
    "\u0192\144\u01a8\145\u019f\146\u0191\147\u01a6\001\002\000\044" +
    "\003\u01a1\004\u0195\005\u01a0\016\u0199\041\u0198\056\u0193\067" +
    "\u01a5\073\u01a4\075\u01a3\121\u01a7\124\u019c\142\u019a\143\u0192" +
    "\144\u01a8\145\u019f\146\u0191\147\u01a6\001\002\000\044\003" +
    "\u01a1\004\u0195\005\u01a0\016\u0199\041\u0198\056\u0193\067\u01a5" +
    "\073\u01a4\075\u01a3\121\u01a7\124\u019c\142\u019a\143\u0192\144" +
    "\u01a8\145\u019f\146\u0191\147\u01a6\001\002\000\044\003\u01a1" +
    "\004\u0195\005\u01a0\016\u0199\041\u0198\056\u0193\067\u01a5\073" +
    "\u01a4\075\u01a3\121\u01a7\124\u019c\142\u019a\143\u0192\144\u01a8" +
    "\145\u019f\146\u0191\147\u01a6\001\002\000\044\003\u01a1\004" +
    "\u0195\005\u01a0\016\u0199\041\u0198\056\u0193\067\u01a5\073\u01a4" +
    "\075\u01a3\121\u01a7\124\u019c\142\u019a\143\u0192\144\u01a8\145" +
    "\u019f\146\u0191\147\u01a6\001\002\000\044\003\u01a1\004\u0195" +
    "\005\u01a0\016\u0199\041\u0198\056\u0193\067\u01a5\073\u01a4\075" +
    "\u01a3\121\u01a7\124\u019c\142\u019a\143\u0192\144\u01a8\145\u019f" +
    "\146\u0191\147\u01a6\001\002\000\044\003\u01a1\004\u0195\005" +
    "\u01a0\016\u0199\041\u0198\056\u0193\067\u01a5\073\u01a4\075\u01a3" +
    "\121\u01a7\124\u019c\142\u019a\143\u0192\144\u01a8\145\u019f\146" +
    "\u0191\147\u01a6\001\002\000\044\003\u01a1\004\u0195\005\u01a0" +
    "\016\u0199\041\u0198\056\u0193\067\u01a5\073\u01a4\075\u01a3\121" +
    "\u01a7\124\u019c\142\u019a\143\u0192\144\u01a8\145\u019f\146\u0191" +
    "\147\u01a6\001\002\000\044\003\u01a1\004\u0195\005\u01a0\016" +
    "\u0199\041\u0198\056\u0193\067\u01a5\073\u01a4\075\u01a3\121\u01a7" +
    "\124\u019c\142\u019a\143\u0192\144\u01a8\145\u019f\146\u0191\147" +
    "\u01a6\001\002\000\044\003\u01a1\004\u0195\005\u01a0\016\u0199" +
    "\041\u0198\056\u0193\067\u01a5\073\u01a4\075\u01a3\121\u01a7\124" +
    "\u019c\142\u019a\143\u0192\144\u01a8\145\u019f\146\u0191\147\u01a6" +
    "\001\002\000\044\003\u01a1\004\u0195\005\u01a0\016\u0199\041" +
    "\u0198\056\u0193\067\u01a5\073\u01a4\075\u01a3\121\u01a7\124\u019c" +
    "\142\u019a\143\u0192\144\u01a8\145\u019f\146\u0191\147\u01a6\001" +
    "\002\000\044\003\u01a1\004\u0195\005\u01a0\016\u0199\041\u0198" +
    "\056\u0193\067\u01a5\073\u01a4\075\u01a3\121\u01a7\124\u019c\142" +
    "\u019a\143\u0192\144\u01a8\145\u019f\146\u0191\147\u01a6\001\002" +
    "\000\034\004\u01af\005\u01aa\006\u01b2\007\u01b0\011\u01b3\012" +
    "\ufeea\013\ufeea\014\ufeea\017\ufeea\023\ufeea\033\ufeea\077\ufeea" +
    "\137\u01ad\001\002\000\034\004\u01af\005\u01aa\006\u01b2\007" +
    "\u01b0\011\u01b3\012\ufeef\013\ufeef\014\ufeef\017\ufeef\023\ufeef" +
    "\033\ufeef\077\ufeef\137\u01ad\001\002\000\050\004\ufedd\005" +
    "\ufedd\006\ufedd\007\ufedd\011\ufedd\012\ufedd\013\ufedd\014\ufedd" +
    "\017\ufedd\023\ufedd\024\ufedd\025\ufedd\026\ufedd\027\ufedd\033" +
    "\ufedd\054\ufedd\077\ufedd\135\ufedd\137\ufedd\001\002\000\050" +
    "\004\ufee0\005\ufee0\006\ufee0\007\ufee0\011\u01b3\012\ufee0\013" +
    "\ufee0\014\ufee0\017\ufee0\023\ufee0\024\ufee0\025\ufee0\026\ufee0" +
    "\027\ufee0\033\ufee0\054\ufee0\077\ufee0\135\ufee0\137\ufee0\001" +
    "\002\000\034\004\u01af\005\u01aa\006\u01b2\007\u01b0\011\u01b3" +
    "\012\ufeec\013\ufeec\014\ufeec\017\ufeec\023\ufeec\033\ufeec\077" +
    "\ufeec\137\u01ad\001\002\000\050\004\ufedf\005\ufedf\006\ufedf" +
    "\007\ufedf\011\u01b3\012\ufedf\013\ufedf\014\ufedf\017\ufedf\023" +
    "\ufedf\024\ufedf\025\ufedf\026\ufedf\027\ufedf\033\ufedf\054\ufedf" +
    "\077\ufedf\135\ufedf\137\ufedf\001\002\000\050\004\ufee2\005" +
    "\ufee2\006\u01b2\007\u01b0\011\u01b3\012\ufee2\013\ufee2\014\ufee2" +
    "\017\ufee2\023\ufee2\024\ufee2\025\ufee2\026\ufee2\027\ufee2\033" +
    "\ufee2\054\ufee2\077\ufee2\135\ufee2\137\u01ad\001\002\000\034" +
    "\004\u01af\005\u01aa\006\u01b2\007\u01b0\011\u01b3\012\ufeee\013" +
    "\ufeee\014\ufeee\017\ufeee\023\ufeee\033\ufeee\077\ufeee\137\u01ad" +
    "\001\002\000\050\004\ufede\005\ufede\006\ufede\007\ufede\011" +
    "\u01b3\012\ufede\013\ufede\014\ufede\017\ufede\023\ufede\024\ufede" +
    "\025\ufede\026\ufede\027\ufede\033\ufede\054\ufede\077\ufede\135" +
    "\ufede\137\ufede\001\002\000\034\004\u01af\005\u01aa\006\u01b2" +
    "\007\u01b0\011\u01b3\012\ufeed\013\ufeed\014\ufeed\017\ufeed\023" +
    "\ufeed\033\ufeed\077\ufeed\137\u01ad\001\002\000\034\004\u01af" +
    "\005\u01aa\006\u01b2\007\u01b0\011\u01b3\012\ufeeb\013\ufeeb\014" +
    "\ufeeb\017\ufeeb\023\ufeeb\033\ufeeb\077\ufeeb\137\u01ad\001\002" +
    "\000\050\004\ufee1\005\ufee1\006\u01b2\007\u01b0\011\u01b3\012" +
    "\ufee1\013\ufee1\014\ufee1\017\ufee1\023\ufee1\024\ufee1\025\ufee1" +
    "\026\ufee1\027\ufee1\033\ufee1\054\ufee1\077\ufee1\135\ufee1\137" +
    "\u01ad\001\002\000\050\004\ufed1\005\ufed1\006\ufed1\007\ufed1" +
    "\011\ufed1\012\ufed1\013\ufed1\014\ufed1\017\ufed1\023\ufed1\024" +
    "\ufed1\025\ufed1\026\ufed1\027\ufed1\033\ufed1\054\ufed1\077\ufed1" +
    "\135\ufed1\137\ufed1\001\002\000\004\017\u01c4\001\002\000" +
    "\050\004\ufec9\005\ufec9\006\ufec9\007\ufec9\011\ufec9\012\ufec9" +
    "\013\ufec9\014\ufec9\017\ufec9\023\ufec9\024\ufec9\025\ufec9\026" +
    "\ufec9\027\ufec9\033\ufec9\054\ufec9\077\ufec9\135\ufec9\137\ufec9" +
    "\001\002\000\004\016\u01c6\001\002\000\050\003\u01a1\004" +
    "\u0195\005\u01a0\016\u0199\017\u01c7\041\u0198\056\u0193\067\u01a5" +
    "\073\u01a4\074\u0197\075\u01a3\121\u01a7\124\u019c\142\u019a\143" +
    "\u0192\144\u01a8\145\u019f\146\u0191\147\u01a6\001\002\000\050" +
    "\004\ufed0\005\ufed0\006\ufed0\007\ufed0\011\ufed0\012\ufed0\013" +
    "\ufed0\014\ufed0\017\ufed0\023\ufed0\024\ufed0\025\ufed0\026\ufed0" +
    "\027\ufed0\033\ufed0\054\ufed0\077\ufed0\135\ufed0\137\ufed0\001" +
    "\002\000\006\014\u01c9\017\u01ca\001\002\000\046\003\u01a1" +
    "\004\u0195\005\u01a0\016\u0199\041\u0198\056\u0193\067\u01a5\073" +
    "\u01a4\074\u0197\075\u01a3\121\u01a7\124\u019c\142\u019a\143\u0192" +
    "\144\u01a8\145\u019f\146\u0191\147\u01a6\001\002\000\050\004" +
    "\ufecf\005\ufecf\006\ufecf\007\ufecf\011\ufecf\012\ufecf\013\ufecf" +
    "\014\ufecf\017\ufecf\023\ufecf\024\ufecf\025\ufecf\026\ufecf\027" +
    "\ufecf\033\ufecf\054\ufecf\077\ufecf\135\ufecf\137\ufecf\001\002" +
    "\000\012\014\uff54\017\uff54\033\u01cc\077\u01cd\001\002\000" +
    "\046\003\u01a1\004\u0195\005\u01a0\016\u0199\041\u0198\056\u0193" +
    "\067\u01a5\073\u01a4\074\u0197\075\u01a3\121\u01a7\124\u019c\142" +
    "\u019a\143\u0192\144\u01a8\145\u019f\146\u0191\147\u01a6\001\002" +
    "\000\046\003\u01a1\004\u0195\005\u01a0\016\u0199\041\u0198\056" +
    "\u0193\067\u01a5\073\u01a4\074\u0197\075\u01a3\121\u01a7\124\u019c" +
    "\142\u019a\143\u0192\144\u01a8\145\u019f\146\u0191\147\u01a6\001" +
    "\002\000\020\012\ufef2\013\ufef2\014\ufef2\017\ufef2\023\ufef2" +
    "\033\u01cc\077\ufef2\001\002\000\020\012\ufef3\013\ufef3\014" +
    "\ufef3\017\ufef3\023\ufef3\033\ufef3\077\ufef3\001\002\000\004" +
    "\003\u01db\001\002\000\004\003\u01da\001\002\000\004\003" +
    "\u01d9\001\002\000\004\003\u01d8\001\002\000\004\003\u01d7" +
    "\001\002\000\004\003\u01d6\001\002\000\050\004\ufee6\005" +
    "\ufee6\006\ufee6\007\ufee6\011\ufee6\012\ufee6\013\ufee6\014\ufee6" +
    "\017\ufee6\023\ufee6\024\ufee6\025\ufee6\026\ufee6\027\ufee6\033" +
    "\ufee6\054\ufee6\077\ufee6\135\ufee6\137\ufee6\001\002\000\050" +
    "\004\ufee5\005\ufee5\006\ufee5\007\ufee5\011\ufee5\012\ufee5\013" +
    "\ufee5\014\ufee5\017\ufee5\023\ufee5\024\ufee5\025\ufee5\026\ufee5" +
    "\027\ufee5\033\ufee5\054\ufee5\077\ufee5\135\ufee5\137\ufee5\001" +
    "\002\000\050\004\ufee7\005\ufee7\006\ufee7\007\ufee7\011\ufee7" +
    "\012\ufee7\013\ufee7\014\ufee7\017\ufee7\023\ufee7\024\ufee7\025" +
    "\ufee7\026\ufee7\027\ufee7\033\ufee7\054\ufee7\077\ufee7\135\ufee7" +
    "\137\ufee7\001\002\000\050\004\ufee4\005\ufee4\006\ufee4\007" +
    "\ufee4\011\ufee4\012\ufee4\013\ufee4\014\ufee4\017\ufee4\023\ufee4" +
    "\024\ufee4\025\ufee4\026\ufee4\027\ufee4\033\ufee4\054\ufee4\077" +
    "\ufee4\135\ufee4\137\ufee4\001\002\000\050\004\ufee8\005\ufee8" +
    "\006\ufee8\007\ufee8\011\ufee8\012\ufee8\013\ufee8\014\ufee8\017" +
    "\ufee8\023\ufee8\024\ufee8\025\ufee8\026\ufee8\027\ufee8\033\ufee8" +
    "\054\ufee8\077\ufee8\135\ufee8\137\ufee8\001\002\000\050\004" +
    "\ufee3\005\ufee3\006\ufee3\007\ufee3\011\ufee3\012\ufee3\013\ufee3" +
    "\014\ufee3\017\ufee3\023\ufee3\024\ufee3\025\ufee3\026\ufee3\027" +
    "\ufee3\033\ufee3\054\ufee3\077\ufee3\135\ufee3\137\ufee3\001\002" +
    "\000\050\004\ufecb\005\ufecb\006\u01b2\007\u01b0\011\u01b3\012" +
    "\ufecb\013\ufecb\014\ufecb\017\ufecb\023\ufecb\024\ufecb\025\ufecb" +
    "\026\ufecb\027\ufecb\033\ufecb\054\ufecb\077\ufecb\135\ufecb\137" +
    "\u01ad\001\002\000\050\004\ufed2\005\ufed2\006\ufed2\007\ufed2" +
    "\011\ufed2\012\ufed2\013\ufed2\014\ufed2\017\ufed2\023\ufed2\024" +
    "\ufed2\025\ufed2\026\ufed2\027\ufed2\033\ufed2\054\ufed2\077\ufed2" +
    "\135\ufed2\137\ufed2\001\002\000\056\004\ufef6\005\ufef6\006" +
    "\ufef6\007\ufef6\011\ufef6\012\ufef6\013\ufef6\014\ufef6\015\ufef6" +
    "\017\ufef6\022\u018f\023\ufef6\024\ufef6\025\ufef6\026\ufef6\027" +
    "\ufef6\033\ufef6\054\ufef6\077\ufef6\134\ufef6\135\ufef6\137\ufef6" +
    "\001\002\000\056\004\ufef5\005\ufef5\006\ufef5\007\ufef5\011" +
    "\ufef5\012\ufef5\013\ufef5\014\ufef5\015\ufef5\017\ufef5\022\u01e0" +
    "\023\ufef5\024\ufef5\025\ufef5\026\ufef5\027\ufef5\033\ufef5\054" +
    "\ufef5\077\ufef5\134\ufef5\135\ufef5\137\ufef5\001\002\000\046" +
    "\003\u01a1\004\u0195\005\u01a0\016\u0199\041\u0198\056\u0193\067" +
    "\u01a5\073\u01a4\074\u0197\075\u01a3\121\u01a7\124\u019c\142\u019a" +
    "\143\u0192\144\u01a8\145\u019f\146\u0191\147\u01a6\001\002\000" +
    "\010\023\u01e2\033\u01cc\077\u01cd\001\002\000\056\004\uff55" +
    "\005\uff55\006\uff55\007\uff55\011\uff55\012\uff55\013\uff55\014" +
    "\uff55\015\uff55\017\uff55\022\uff55\023\uff55\024\uff55\025\uff55" +
    "\026\uff55\027\uff55\033\uff55\054\uff55\077\uff55\134\uff55\135" +
    "\uff55\137\uff55\001\002\000\050\004\ufed4\005\ufed4\006\ufed4" +
    "\007\ufed4\011\ufed4\012\ufed4\013\ufed4\014\ufed4\017\ufed4\023" +
    "\ufed4\024\ufed4\025\ufed4\026\ufed4\027\ufed4\033\ufed4\054\ufed4" +
    "\077\ufed4\135\ufed4\137\ufed4\001\002\000\054\004\ufeda\005" +
    "\ufeda\006\ufeda\007\ufeda\011\ufeda\012\ufeda\013\ufeda\014\ufeda" +
    "\015\u018a\017\ufeda\022\u01e0\023\ufeda\024\ufeda\025\ufeda\026" +
    "\ufeda\027\ufeda\033\ufeda\054\ufeda\077\ufeda\135\ufeda\137\ufeda" +
    "\001\002\000\050\003\u01a1\004\u0195\005\u01a0\016\u0199\017" +
    "\u01e6\041\u0198\056\u0193\067\u01a5\073\u01a4\074\u0197\075\u01a3" +
    "\121\u01a7\124\u019c\142\u019a\143\u0192\144\u01a8\145\u019f\146" +
    "\u0191\147\u01a6\001\002\000\052\004\ufed7\005\ufed7\006\ufed7" +
    "\007\ufed7\011\ufed7\012\ufed7\013\ufed7\014\ufed7\015\u018a\017" +
    "\ufed7\023\ufed7\024\ufed7\025\ufed7\026\ufed7\027\ufed7\033\ufed7" +
    "\054\ufed7\077\ufed7\135\ufed7\137\ufed7\001\002\000\006\014" +
    "\u01c9\017\u01e8\001\002\000\052\004\ufed8\005\ufed8\006\ufed8" +
    "\007\ufed8\011\ufed8\012\ufed8\013\ufed8\014\ufed8\015\u018a\017" +
    "\ufed8\023\ufed8\024\ufed8\025\ufed8\026\ufed8\027\ufed8\033\ufed8" +
    "\054\ufed8\077\ufed8\135\ufed8\137\ufed8\001\002\000\050\004" +
    "\ufed6\005\ufed6\006\ufed6\007\ufed6\011\ufed6\012\ufed6\013\ufed6" +
    "\014\ufed6\017\ufed6\023\ufed6\024\ufed6\025\ufed6\026\ufed6\027" +
    "\ufed6\033\ufed6\054\ufed6\077\ufed6\135\ufed6\137\ufed6\001\002" +
    "\000\050\004\ufed5\005\ufed5\006\ufed5\007\ufed5\011\ufed5\012" +
    "\ufed5\013\ufed5\014\ufed5\017\ufed5\023\ufed5\024\ufed5\025\ufed5" +
    "\026\ufed5\027\ufed5\033\ufed5\054\ufed5\077\ufed5\135\ufed5\137" +
    "\ufed5\001\002\000\050\004\ufed9\005\ufed9\006\ufed9\007\ufed9" +
    "\011\ufed9\012\ufed9\013\ufed9\014\ufed9\017\ufed9\023\ufed9\024" +
    "\ufed9\025\ufed9\026\ufed9\027\ufed9\033\ufed9\054\ufed9\077\ufed9" +
    "\135\ufed9\137\ufed9\001\002\000\010\017\u01ed\033\u01cc\077" +
    "\u01cd\001\002\000\050\004\ufecd\005\ufecd\006\ufecd\007\ufecd" +
    "\011\ufecd\012\ufecd\013\ufecd\014\ufecd\017\ufecd\023\ufecd\024" +
    "\ufecd\025\ufecd\026\ufecd\027\ufecd\033\ufecd\054\ufecd\077\ufecd" +
    "\135\ufecd\137\ufecd\001\002\000\004\017\u01ef\001\002\000" +
    "\050\004\ufeca\005\ufeca\006\ufeca\007\ufeca\011\ufeca\012\ufeca" +
    "\013\ufeca\014\ufeca\017\ufeca\023\ufeca\024\ufeca\025\ufeca\026" +
    "\ufeca\027\ufeca\033\ufeca\054\ufeca\077\ufeca\135\ufeca\137\ufeca" +
    "\001\002\000\020\012\ufef1\013\ufef1\014\ufef1\017\ufef1\023" +
    "\ufef1\033\ufef1\077\ufef1\001\002\000\056\004\ufef7\005\ufef7" +
    "\006\ufef7\007\ufef7\011\ufef7\012\ufef7\013\ufef7\014\ufef7\015" +
    "\ufef7\017\ufef7\022\u01e0\023\ufef7\024\ufef7\025\ufef7\026\ufef7" +
    "\027\ufef7\033\ufef7\054\ufef7\077\ufef7\134\ufef7\135\ufef7\137" +
    "\ufef7\001\002\000\050\004\ufecc\005\ufecc\006\ufecc\007\ufecc" +
    "\011\ufecc\012\ufecc\013\ufecc\014\ufecc\017\ufecc\023\ufecc\024" +
    "\ufecc\025\ufecc\026\ufecc\027\ufecc\033\ufecc\054\ufecc\077\ufecc" +
    "\135\ufecc\137\ufecc\001\002\000\004\017\u01f4\001\002\000" +
    "\050\004\ufec8\005\ufec8\006\ufec8\007\ufec8\011\ufec8\012\ufec8" +
    "\013\ufec8\014\ufec8\017\ufec8\023\ufec8\024\ufec8\025\ufec8\026" +
    "\ufec8\027\ufec8\033\ufec8\054\ufec8\077\ufec8\135\ufec8\137\ufec8" +
    "\001\002\000\010\023\u01f6\033\u01cc\077\u01cd\001\002\000" +
    "\056\004\uff56\005\uff56\006\uff56\007\uff56\011\uff56\012\uff56" +
    "\013\uff56\014\uff56\015\uff56\017\uff56\022\uff56\023\uff56\024" +
    "\uff56\025\uff56\026\uff56\027\uff56\033\uff56\054\uff56\077\uff56" +
    "\134\uff56\135\uff56\137\uff56\001\002\000\004\012\ufefd\001" +
    "\002\000\006\014\u01c9\017\u01f9\001\002\000\004\012\ufefc" +
    "\001\002\000\046\003\u01a1\004\u0195\005\u01a0\016\u0199\041" +
    "\u0198\056\u0193\067\u01a5\073\u01a4\074\u0197\075\u01a3\121\u01a7" +
    "\124\u019c\142\u019a\143\u0192\144\u01a8\145\u019f\146\u0191\147" +
    "\u01a6\001\002\000\012\012\uff15\017\uff15\033\u01cc\077\u01cd" +
    "\001\002\000\024\012\uff1d\036\u0155\042\u0150\057\u0152\070" +
    "\u0153\120\u0154\121\u01fd\124\u0200\142\u0171\001\002\000\004" +
    "\015\u018a\001\002\000\004\012\u0206\001\002\000\006\012" +
    "\uff1e\017\uff1e\001\002\000\004\015\u018a\001\002\000\006" +
    "\012\uff1f\017\uff1f\001\002\000\006\012\uff20\017\uff20\001" +
    "\002\000\010\012\uff09\017\uff09\134\u0204\001\002\000\046" +
    "\003\u01a1\004\u0195\005\u01a0\016\u0199\041\u0198\056\u0193\067" +
    "\u01a5\073\u01a4\074\u0197\075\u01a3\121\u01a7\124\u019c\142\u019a" +
    "\143\u0192\144\u01a8\145\u019f\146\u0191\147\u01a6\001\002\000" +
    "\012\012\uff16\017\uff16\033\u01cc\077\u01cd\001\002\000\046" +
    "\003\u01a1\004\u0195\005\u01a0\016\u0199\041\u0198\056\u0193\067" +
    "\u01a5\073\u01a4\074\u0197\075\u01a3\121\u01a7\124\u019c\142\u019a" +
    "\143\u0192\144\u01a8\145\u019f\146\u0191\147\u01a6\001\002\000" +
    "\010\012\u0208\033\u01cc\077\u01cd\001\002\000\024\017\uff1d" +
    "\036\u0155\042\u0150\057\u0152\070\u0153\120\u0154\121\u01fd\124" +
    "\u0200\142\u0171\001\002\000\004\017\u020a\001\002\000\004" +
    "\020\u020b\001\002\000\050\021\uff39\036\uff39\037\uff39\042" +
    "\uff39\046\uff39\050\uff39\057\uff39\060\uff39\064\uff39\070\uff39" +
    "\102\uff39\103\uff39\115\uff39\120\uff39\121\uff39\122\uff39\124" +
    "\uff39\132\uff39\142\uff39\001\002\000\050\021\u020d\036\u0155" +
    "\037\u0177\042\u0150\046\u016a\050\u0174\057\u0152\060\u0181\064" +
    "\u0170\070\u0153\102\u017b\103\u0175\115\u016d\120\u0154\121\u0182" +
    "\122\u016f\124\u0173\132\u016c\142\u0171\001\002\000\054\021" +
    "\uff21\036\uff21\037\uff21\040\uff21\042\uff21\046\uff21\047\uff21" +
    "\050\uff21\057\uff21\060\uff21\064\uff21\070\uff21\102\uff21\103" +
    "\uff21\115\uff21\120\uff21\121\uff21\122\uff21\124\uff21\132\uff21" +
    "\142\uff21\001\002\000\054\021\uff33\036\uff33\037\uff33\040" +
    "\uff33\042\uff33\046\uff33\047\uff33\050\uff33\057\uff33\060\uff33" +
    "\064\uff33\070\uff33\102\uff33\103\uff33\115\uff33\120\uff33\121" +
    "\uff33\122\uff33\124\uff33\132\uff33\142\uff33\001\002\000\054" +
    "\021\uff36\036\uff36\037\uff36\040\uff36\042\uff36\046\uff36\047" +
    "\uff36\050\uff36\057\uff36\060\uff36\064\uff36\070\uff36\102\uff36" +
    "\103\uff36\115\uff36\120\uff36\121\uff36\122\uff36\124\uff36\132" +
    "\uff36\142\uff36\001\002\000\054\021\uff37\036\uff37\037\uff37" +
    "\040\uff37\042\uff37\046\uff37\047\uff37\050\uff37\057\uff37\060" +
    "\uff37\064\uff37\070\uff37\102\uff37\103\uff37\115\uff37\120\uff37" +
    "\121\uff37\122\uff37\124\uff37\132\uff37\142\uff37\001\002\000" +
    "\046\003\u01a1\004\u0195\005\u01a0\016\u0199\041\u0198\056\u0193" +
    "\067\u01a5\073\u01a4\074\u0197\075\u01a3\121\u01a7\124\u019c\142" +
    "\u019a\143\u0192\144\u01a8\145\u019f\146\u0191\147\u01a6\001\002" +
    "\000\006\014\u01c9\017\u0213\001\002\000\004\012\uff29\001" +
    "\002\000\054\021\uff34\036\uff34\037\uff34\040\uff34\042\uff34" +
    "\046\uff34\047\uff34\050\uff34\057\uff34\060\uff34\064\uff34\070" +
    "\uff34\102\uff34\103\uff34\115\uff34\120\uff34\121\uff34\122\uff34" +
    "\124\uff34\132\uff34\142\uff34\001\002\000\010\012\uff0a\017" +
    "\uff0a\134\u0216\001\002\000\046\003\u01a1\004\u0195\005\u01a0" +
    "\016\u0199\041\u0198\056\u0193\067\u01a5\073\u01a4\074\u0197\075" +
    "\u01a3\121\u01a7\124\u019c\142\u019a\143\u0192\144\u01a8\145\u019f" +
    "\146\u0191\147\u01a6\001\002\000\012\012\uff0b\017\uff0b\033" +
    "\u01cc\077\u01cd\001\002\000\046\003\u01a1\004\u0195\005\u01a0" +
    "\016\u0199\041\u0198\056\u0193\067\u01a5\073\u01a4\074\u0197\075" +
    "\u01a3\121\u01a7\124\u019c\142\u019a\143\u0192\144\u01a8\145\u019f" +
    "\146\u0191\147\u01a6\001\002\000\006\014\u01c9\017\u021a\001" +
    "\002\000\004\012\uff28\001\002\000\050\021\uff39\036\uff39" +
    "\037\uff39\042\uff39\046\uff39\050\uff39\057\uff39\060\uff39\064" +
    "\uff39\070\uff39\102\uff39\103\uff39\115\uff39\120\uff39\121\uff39" +
    "\122\uff39\124\uff39\132\uff39\142\uff39\001\002\000\050\021" +
    "\u021d\036\u0155\037\u0177\042\u0150\046\u016a\050\u0174\057\u0152" +
    "\060\u0181\064\u0170\070\u0153\102\u017b\103\u0175\115\u016d\120" +
    "\u0154\121\u0182\122\u016f\124\u0173\132\u016c\142\u0171\001\002" +
    "\000\004\132\u021e\001\002\000\004\016\u021f\001\002\000" +
    "\046\003\u01a1\004\u0195\005\u01a0\016\u0199\041\u0198\056\u0193" +
    "\067\u01a5\073\u01a4\074\u0197\075\u01a3\121\u01a7\124\u019c\142" +
    "\u019a\143\u0192\144\u01a8\145\u019f\146\u0191\147\u01a6\001\002" +
    "\000\010\017\u0221\033\u01cc\077\u01cd\001\002\000\004\012" +
    "\u0222\001\002\000\054\021\uff22\036\uff22\037\uff22\040\uff22" +
    "\042\uff22\046\uff22\047\uff22\050\uff22\057\uff22\060\uff22\064" +
    "\uff22\070\uff22\102\uff22\103\uff22\115\uff22\120\uff22\121\uff22" +
    "\122\uff22\124\uff22\132\uff22\142\uff22\001\002\000\050\003" +
    "\u01a1\004\u0195\005\u01a0\016\u0199\017\u0224\041\u0198\056\u0193" +
    "\067\u01a5\073\u01a4\074\u0197\075\u01a3\121\u01a7\124\u019c\142" +
    "\u019a\143\u0192\144\u01a8\145\u019f\146\u0191\147\u01a6\001\002" +
    "\000\004\012\ufeff\001\002\000\006\014\u01c9\017\u0226\001" +
    "\002\000\004\012\ufefe\001\002\000\010\012\uff07\017\uff07" +
    "\134\u0249\001\002\000\010\015\u018a\022\u01e0\134\u0243\001" +
    "\002\000\046\003\u01a1\004\u0195\005\u01a0\016\u0199\041\u0198" +
    "\056\u0193\067\u01a5\073\u01a4\074\u0197\075\u01a3\121\u01a7\124" +
    "\u019c\142\u019a\143\u0192\144\u01a8\145\u019f\146\u0191\147\u01a6" +
    "\001\002\000\050\003\u01a1\004\u0195\005\u01a0\016\u0199\023" +
    "\u0164\041\u0198\056\u0193\067\u01a5\073\u01a4\074\u0197\075\u01a3" +
    "\121\u01a7\124\u019c\142\u019a\143\u0192\144\u01a8\145\u019f\146" +
    "\u0191\147\u01a6\001\002\000\050\003\u01a1\004\u0195\005\u01a0" +
    "\016\u0199\017\u022c\041\u0198\056\u0193\067\u01a5\073\u01a4\074" +
    "\u0197\075\u01a3\121\u01a7\124\u019c\142\u019a\143\u0192\144\u01a8" +
    "\145\u019f\146\u0191\147\u01a6\001\002\000\012\012\uff06\015" +
    "\u018a\017\uff06\022\u018f\001\002\000\006\014\u01c9\017\u022e" +
    "\001\002\000\012\012\uff05\015\u018a\017\uff05\022\u018f\001" +
    "\002\000\010\012\uff03\017\uff03\134\u0236\001\002\000\010" +
    "\015\u018a\022\u01e0\134\u0232\001\002\000\010\012\uff01\017" +
    "\uff01\134\u0234\001\002\000\046\003\u01a1\004\u0195\005\u01a0" +
    "\016\u0199\041\u0198\056\u0193\067\u01a5\073\u01a4\074\u0197\075" +
    "\u01a3\121\u01a7\124\u019c\142\u019a\143\u0192\144\u01a8\145\u019f" +
    "\146\u0191\147\u01a6\001\002\000\012\012\uff0f\017\uff0f\033" +
    "\u01cc\077\u01cd\001\002\000\046\003\u01a1\004\u0195\005\u01a0" +
    "\016\u0199\041\u0198\056\u0193\067\u01a5\073\u01a4\074\u0197\075" +
    "\u01a3\121\u01a7\124\u019c\142\u019a\143\u0192\144\u01a8\145\u019f" +
    "\146\u0191\147\u01a6\001\002\000\012\012\uff0e\017\uff0e\033" +
    "\u01cc\077\u01cd\001\002\000\046\003\u01a1\004\u0195\005\u01a0" +
    "\016\u0199\041\u0198\056\u0193\067\u01a5\073\u01a4\074\u0197\075" +
    "\u01a3\121\u01a7\124\u019c\142\u019a\143\u0192\144\u01a8\145\u019f" +
    "\146\u0191\147\u01a6\001\002\000\012\012\uff12\017\uff12\033" +
    "\u01cc\077\u01cd\001\002\000\010\012\uff04\017\uff04\134\u023f" +
    "\001\002\000\010\015\u018a\022\u01e0\134\u023b\001\002\000" +
    "\010\012\uff02\017\uff02\134\u023d\001\002\000\046\003\u01a1" +
    "\004\u0195\005\u01a0\016\u0199\041\u0198\056\u0193\067\u01a5\073" +
    "\u01a4\074\u0197\075\u01a3\121\u01a7\124\u019c\142\u019a\143\u0192" +
    "\144\u01a8\145\u019f\146\u0191\147\u01a6\001\002\000\012\012" +
    "\uff11\017\uff11\033\u01cc\077\u01cd\001\002\000\046\003\u01a1" +
    "\004\u0195\005\u01a0\016\u0199\041\u0198\056\u0193\067\u01a5\073" +
    "\u01a4\074\u0197\075\u01a3\121\u01a7\124\u019c\142\u019a\143\u0192" +
    "\144\u01a8\145\u019f\146\u0191\147\u01a6\001\002\000\012\012" +
    "\uff10\017\uff10\033\u01cc\077\u01cd\001\002\000\046\003\u01a1" +
    "\004\u0195\005\u01a0\016\u0199\041\u0198\056\u0193\067\u01a5\073" +
    "\u01a4\074\u0197\075\u01a3\121\u01a7\124\u019c\142\u019a\143\u0192" +
    "\144\u01a8\145\u019f\146\u0191\147\u01a6\001\002\000\012\012" +
    "\uff13\017\uff13\033\u01cc\077\u01cd\001\002\000\012\012\uff17" +
    "\017\uff17\033\u01cc\077\u01cd\001\002\000\010\012\uff00\017" +
    "\uff00\134\u0246\001\002\000\046\003\u01a1\004\u0195\005\u01a0" +
    "\016\u0199\041\u0198\056\u0193\067\u01a5\073\u01a4\074\u0197\075" +
    "\u01a3\121\u01a7\124\u019c\142\u019a\143\u0192\144\u01a8\145\u019f" +
    "\146\u0191\147\u01a6\001\002\000\010\012\u0245\033\u01cc\077" +
    "\u01cd\001\002\000\006\012\uff0c\017\uff0c\001\002\000\046" +
    "\003\u01a1\004\u0195\005\u01a0\016\u0199\041\u0198\056\u0193\067" +
    "\u01a5\073\u01a4\074\u0197\075\u01a3\121\u01a7\124\u019c\142\u019a" +
    "\143\u0192\144\u01a8\145\u019f\146\u0191\147\u01a6\001\002\000" +
    "\010\012\u0248\033\u01cc\077\u01cd\001\002\000\006\012\uff0d" +
    "\017\uff0d\001\002\000\046\003\u01a1\004\u0195\005\u01a0\016" +
    "\u0199\041\u0198\056\u0193\067\u01a5\073\u01a4\074\u0197\075\u01a3" +
    "\121\u01a7\124\u019c\142\u019a\143\u0192\144\u01a8\145\u019f\146" +
    "\u0191\147\u01a6\001\002\000\012\012\uff14\017\uff14\033\u01cc" +
    "\077\u01cd\001\002\000\046\003\u01a1\004\u0195\005\u01a0\016" +
    "\u0199\041\u0198\056\u0193\067\u01a5\073\u01a4\074\u0197\075\u01a3" +
    "\121\u01a7\124\u019c\142\u019a\143\u0192\144\u01a8\145\u019f\146" +
    "\u0191\147\u01a6\001\002\000\010\017\u024d\033\u01cc\077\u01cd" +
    "\001\002\000\004\020\u024e\001\002\000\050\021\uff39\036" +
    "\uff39\037\uff39\042\uff39\046\uff39\050\uff39\057\uff39\060\uff39" +
    "\064\uff39\070\uff39\102\uff39\103\uff39\115\uff39\120\uff39\121" +
    "\uff39\122\uff39\124\uff39\132\uff39\142\uff39\001\002\000\050" +
    "\021\u0250\036\u0155\037\u0177\042\u0150\046\u016a\050\u0174\057" +
    "\u0152\060\u0181\064\u0170\070\u0153\102\u017b\103\u0175\115\u016d" +
    "\120\u0154\121\u0182\122\u016f\124\u0173\132\u016c\142\u0171\001" +
    "\002\000\056\021\uff24\036\uff24\037\uff24\040\uff24\042\uff24" +
    "\046\uff24\047\uff24\050\uff24\052\u0252\057\uff24\060\uff24\064" +
    "\uff24\070\uff24\102\uff24\103\uff24\115\uff24\120\uff24\121\uff24" +
    "\122\uff24\124\uff24\132\uff24\142\uff24\001\002\000\054\021" +
    "\uff27\036\uff27\037\uff27\040\uff27\042\uff27\046\uff27\047\uff27" +
    "\050\uff27\057\uff27\060\uff27\064\uff27\070\uff27\102\uff27\103" +
    "\uff27\115\uff27\120\uff27\121\uff27\122\uff27\124\uff27\132\uff27" +
    "\142\uff27\001\002\000\006\020\u0253\064\u0170\001\002\000" +
    "\050\021\uff39\036\uff39\037\uff39\042\uff39\046\uff39\050\uff39" +
    "\057\uff39\060\uff39\064\uff39\070\uff39\102\uff39\103\uff39\115" +
    "\uff39\120\uff39\121\uff39\122\uff39\124\uff39\132\uff39\142\uff39" +
    "\001\002\000\054\021\uff25\036\uff25\037\uff25\040\uff25\042" +
    "\uff25\046\uff25\047\uff25\050\uff25\057\uff25\060\uff25\064\uff25" +
    "\070\uff25\102\uff25\103\uff25\115\uff25\120\uff25\121\uff25\122" +
    "\uff25\124\uff25\132\uff25\142\uff25\001\002\000\050\021\u0256" +
    "\036\u0155\037\u0177\042\u0150\046\u016a\050\u0174\057\u0152\060" +
    "\u0181\064\u0170\070\u0153\102\u017b\103\u0175\115\u016d\120\u0154" +
    "\121\u0182\122\u016f\124\u0173\132\u016c\142\u0171\001\002\000" +
    "\054\021\uff26\036\uff26\037\uff26\040\uff26\042\uff26\046\uff26" +
    "\047\uff26\050\uff26\057\uff26\060\uff26\064\uff26\070\uff26\102" +
    "\uff26\103\uff26\115\uff26\120\uff26\121\uff26\122\uff26\124\uff26" +
    "\132\uff26\142\uff26\001\002\000\046\003\u01a1\004\u0195\005" +
    "\u01a0\016\u0199\041\u0198\056\u0193\067\u01a5\073\u01a4\074\u0197" +
    "\075\u01a3\121\u01a7\124\u019c\142\u019a\143\u0192\144\u01a8\145" +
    "\u019f\146\u0191\147\u01a6\001\002\000\010\017\u0259\033\u01cc" +
    "\077\u01cd\001\002\000\004\020\u025a\001\002\000\006\040" +
    "\u025d\047\u025b\001\002\000\004\013\u0264\001\002\000\010" +
    "\021\uff1a\040\uff1a\047\uff1a\001\002\000\046\003\u01a1\004" +
    "\u0195\005\u01a0\016\u0199\041\u0198\056\u0193\067\u01a5\073\u01a4" +
    "\074\u0197\075\u01a3\121\u01a7\124\u019c\142\u019a\143\u0192\144" +
    "\u01a8\145\u019f\146\u0191\147\u01a6\001\002\000\010\021\u0260" +
    "\040\u025d\047\u025b\001\002\000\010\021\uff1b\040\uff1b\047" +
    "\uff1b\001\002\000\054\021\uff1c\036\uff1c\037\uff1c\040\uff1c" +
    "\042\uff1c\046\uff1c\047\uff1c\050\uff1c\057\uff1c\060\uff1c\064" +
    "\uff1c\070\uff1c\102\uff1c\103\uff1c\115\uff1c\120\uff1c\121\uff1c" +
    "\122\uff1c\124\uff1c\132\uff1c\142\uff1c\001\002\000\010\013" +
    "\u0262\033\u01cc\077\u01cd\001\002\000\054\021\uff39\036\uff39" +
    "\037\uff39\040\uff39\042\uff39\046\uff39\047\uff39\050\uff39\057" +
    "\uff39\060\uff39\064\uff39\070\uff39\102\uff39\103\uff39\115\uff39" +
    "\120\uff39\121\uff39\122\uff39\124\uff39\132\uff39\142\uff39\001" +
    "\002\000\054\021\uff19\036\u0155\037\u0177\040\uff19\042\u0150" +
    "\046\u016a\047\uff19\050\u0174\057\u0152\060\u0181\064\u0170\070" +
    "\u0153\102\u017b\103\u0175\115\u016d\120\u0154\121\u0182\122\u016f" +
    "\124\u0173\132\u016c\142\u0171\001\002\000\054\021\uff39\036" +
    "\uff39\037\uff39\040\uff39\042\uff39\046\uff39\047\uff39\050\uff39" +
    "\057\uff39\060\uff39\064\uff39\070\uff39\102\uff39\103\uff39\115" +
    "\uff39\120\uff39\121\uff39\122\uff39\124\uff39\132\uff39\142\uff39" +
    "\001\002\000\054\021\uff18\036\u0155\037\u0177\040\uff18\042" +
    "\u0150\046\u016a\047\uff18\050\u0174\057\u0152\060\u0181\064\u0170" +
    "\070\u0153\102\u017b\103\u0175\115\u016d\120\u0154\121\u0182\122" +
    "\u016f\124\u0173\132\u016c\142\u0171\001\002\000\010\012\uff2a" +
    "\033\u01cc\077\u01cd\001\002\000\046\003\u01a1\004\u0195\005" +
    "\u01a0\016\u0199\041\u0198\056\u0193\067\u01a5\073\u01a4\074\u0197" +
    "\075\u01a3\121\u01a7\124\u019c\142\u019a\143\u0192\144\u01a8\145" +
    "\u019f\146\u0191\147\u01a6\001\002\000\010\017\u0269\033\u01cc" +
    "\077\u01cd\001\002\000\004\020\u026a\001\002\000\050\021" +
    "\uff39\036\uff39\037\uff39\042\uff39\046\uff39\050\uff39\057\uff39" +
    "\060\uff39\064\uff39\070\uff39\102\uff39\103\uff39\115\uff39\120" +
    "\uff39\121\uff39\122\uff39\124\uff39\132\uff39\142\uff39\001\002" +
    "\000\050\021\u026c\036\u0155\037\u0177\042\u0150\046\u016a\050" +
    "\u0174\057\u0152\060\u0181\064\u0170\070\u0153\102\u017b\103\u0175" +
    "\115\u016d\120\u0154\121\u0182\122\u016f\124\u0173\132\u016c\142" +
    "\u0171\001\002\000\054\021\uff23\036\uff23\037\uff23\040\uff23" +
    "\042\uff23\046\uff23\047\uff23\050\uff23\057\uff23\060\uff23\064" +
    "\uff23\070\uff23\102\uff23\103\uff23\115\uff23\120\uff23\121\uff23" +
    "\122\uff23\124\uff23\132\uff23\142\uff23\001\002\000\006\022" +
    "\u0162\142\uff62\001\002\000\006\022\u0162\142\uff64\001\002" +
    "\000\006\022\u0162\142\uff65\001\002\000\006\022\u0162\142" +
    "\uff63\001\002\000\010\012\u0272\016\u0159\134\u0275\001\002" +
    "\000\012\021\uff43\105\uff43\110\uff43\111\uff43\001\002\000" +
    "\012\021\uff41\105\uff41\110\uff41\111\uff41\001\002\000\012" +
    "\021\uff46\105\uff46\110\uff46\111\uff46\001\002\000\046\003" +
    "\u01a1\004\u0195\005\u01a0\016\u0199\041\u0198\056\u0193\067\u01a5" +
    "\073\u01a4\074\u0197\075\u01a3\121\u01a7\124\u019c\142\u019a\143" +
    "\u0192\144\u01a8\145\u019f\146\u0191\147\u01a6\001\002\000\010" +
    "\012\u0277\033\u01cc\077\u01cd\001\002\000\012\021\uff42\105" +
    "\uff42\110\uff42\111\uff42\001\002\000\006\022\u0162\142\uff61" +
    "\001\002\000\020\017\uff3e\036\u0155\042\u0150\057\u0152\070" +
    "\u0153\120\u0154\142\u015d\001\002\000\004\017\u027b\001\002" +
    "\000\004\020\u027c\001\002\000\050\021\uff39\036\uff39\037" +
    "\uff39\042\uff39\046\uff39\050\uff39\057\uff39\060\uff39\064\uff39" +
    "\070\uff39\102\uff39\103\uff39\115\uff39\120\uff39\121\uff39\122" +
    "\uff39\124\uff39\132\uff39\142\uff39\001\002\000\050\021\u027e" +
    "\036\u0155\037\u0177\042\u0150\046\u016a\050\u0174\057\u0152\060" +
    "\u0181\064\u0170\070\u0153\102\u017b\103\u0175\115\u016d\120\u0154" +
    "\121\u0182\122\u016f\124\u0173\132\u016c\142\u0171\001\002\000" +
    "\012\021\uff44\105\uff44\110\uff44\111\uff44\001\002\000\004" +
    "\020\uff4a\001\002\000\004\002\000\001\002\000\024\036" +
    "\ufeb7\042\ufeb7\045\ufeb7\057\ufeb7\063\ufeb7\070\ufeb7\071\ufeb7" +
    "\120\ufeb7\131\ufeb7\001\002\000\024\036\ufeb5\042\ufeb5\045" +
    "\ufeb5\057\ufeb5\063\u0283\070\ufeb5\071\ufeb5\120\ufeb5\131\ufeb5" +
    "\001\002\000\004\066\u0389\001\002\000\022\036\u028a\042" +
    "\u028e\045\u028f\057\u0288\070\u0289\071\u0286\120\u0285\131\ufeb3" +
    "\001\002\000\004\142\ufec3\001\002\000\004\015\u0376\001" +
    "\002\000\004\142\u036f\001\002\000\004\142\ufec4\001\002" +
    "\000\004\142\ufec6\001\002\000\004\142\ufec2\001\002\000" +
    "\004\131\u02f5\001\002\000\020\036\ufeaf\042\ufeaf\057\ufeaf" +
    "\070\ufeaf\071\ufeaf\120\ufeaf\131\ufeaf\001\002\000\020\036" +
    "\u028a\042\u028e\057\u0288\070\u0289\071\u0286\120\u0285\131\ufeb3" +
    "\001\002\000\004\142\ufec5\001\002\000\014\036\u028a\042" +
    "\u028e\057\u0288\070\u0289\120\u0285\001\002\000\004\142\u0291" +
    "\001\002\000\004\134\u0292\001\002\000\034\003\u02a1\004" +
    "\u0296\005\u02a0\016\u0299\071\u02a4\074\u0297\101\u029f\142\u029a" +
    "\143\u0294\144\u02a5\145\u029d\146\u0293\147\u02a3\001\002\000" +
    "\050\004\ufeba\005\ufeba\006\ufeba\007\ufeba\011\ufeba\012\ufeba" +
    "\013\ufeba\014\ufeba\017\ufeba\023\ufeba\024\ufeba\025\ufeba\026" +
    "\ufeba\027\ufeba\033\ufeba\054\ufeba\077\ufeba\135\ufeba\137\ufeba" +
    "\001\002\000\050\004\ufebd\005\ufebd\006\ufebd\007\ufebd\011" +
    "\ufebd\012\ufebd\013\ufebd\014\ufebd\017\ufebd\023\ufebd\024\ufebd" +
    "\025\ufebd\026\ufebd\027\ufebd\033\ufebd\054\ufebd\077\ufebd\135" +
    "\ufebd\137\ufebd\001\002\000\010\012\u02f3\033\u02b4\077\u02b5" +
    "\001\002\000\032\003\u02a1\004\u0296\005\u02a0\016\u0299\071" +
    "\u02a4\101\u029f\142\u029a\143\u0294\144\u02a5\145\u029d\146\u0293" +
    "\147\u02a3\001\002\000\034\003\u02a1\004\u0296\005\u02a0\016" +
    "\u0299\071\u02a4\074\u0297\101\u029f\142\u029a\143\u0294\144\u02a5" +
    "\145\u029d\146\u0293\147\u02a3\001\002\000\050\004\ufe5a\005" +
    "\ufe5a\006\ufe5a\007\ufe5a\011\ufe5a\012\ufe5a\013\ufe5a\014\ufe5a" +
    "\017\ufe5a\023\ufe5a\024\ufe5a\025\ufe5a\026\ufe5a\027\ufe5a\033" +
    "\ufe5a\054\ufe5a\077\ufe5a\135\ufe5a\137\ufe5a\001\002\000\034" +
    "\003\u02a1\004\u0296\005\u02a0\016\u0299\071\u02a4\074\u0297\101" +
    "\u029f\142\u029a\143\u0294\144\u02a5\145\u029d\146\u0293\147\u02a3" +
    "\001\002\000\052\004\ufe59\005\ufe59\006\ufe59\007\ufe59\011" +
    "\ufe59\012\ufe59\013\ufe59\014\ufe59\017\ufe59\022\u02a8\023\ufe59" +
    "\024\ufe59\025\ufe59\026\ufe59\027\ufe59\033\ufe59\054\ufe59\077" +
    "\ufe59\135\ufe59\137\ufe59\001\002\000\050\004\u02d1\005\u02d3" +
    "\006\u02d5\007\u02d4\011\u02d2\012\ufe69\013\ufe69\014\ufe69\017" +
    "\ufe69\023\ufe69\024\u02e3\025\u02e5\026\u02e2\027\u02e7\033\ufe69" +
    "\054\u02e6\077\ufe69\135\u02e4\137\u02d0\001\002\000\020\012" +
    "\ufe70\013\ufe70\014\ufe70\017\ufe70\023\ufe70\033\ufe70\077\ufe70" +
    "\001\002\000\050\004\ufebb\005\ufebb\006\ufebb\007\ufebb\011" +
    "\ufebb\012\ufebb\013\ufebb\014\ufebb\017\ufebb\023\ufebb\024\ufebb" +
    "\025\ufebb\026\ufebb\027\ufebb\033\ufebb\054\ufebb\077\ufebb\135" +
    "\ufebb\137\ufebb\001\002\000\050\004\ufe5b\005\ufe5b\006\ufe5b" +
    "\007\ufe5b\011\ufe5b\012\ufe5b\013\ufe5b\014\ufe5b\017\ufe5b\023" +
    "\ufe5b\024\ufe5b\025\ufe5b\026\ufe5b\027\ufe5b\033\ufe5b\054\ufe5b" +
    "\077\ufe5b\135\ufe5b\137\ufe5b\001\002\000\004\015\u02dc\001" +
    "\002\000\032\003\u02a1\004\u0296\005\u02a0\016\u0299\071\u02a4" +
    "\101\u029f\142\u029a\143\u0294\144\u02a5\145\u029d\146\u0293\147" +
    "\u02a3\001\002\000\016\004\u02c5\005\u02c6\006\u02c8\007\u02c7" +
    "\137\u02c3\141\u02c4\001\002\000\050\004\ufe5c\005\ufe5c\006" +
    "\ufe5c\007\ufe5c\011\ufe5c\012\ufe5c\013\ufe5c\014\ufe5c\017\ufe5c" +
    "\023\ufe5c\024\ufe5c\025\ufe5c\026\ufe5c\027\ufe5c\033\ufe5c\054" +
    "\ufe5c\077\ufe5c\135\ufe5c\137\ufe5c\001\002\000\050\004\ufebc" +
    "\005\ufebc\006\ufebc\007\ufebc\011\ufebc\012\ufebc\013\ufebc\014" +
    "\ufebc\017\ufebc\023\ufebc\024\ufebc\025\ufebc\026\ufebc\027\ufebc" +
    "\033\ufebc\054\ufebc\077\ufebc\135\ufebc\137\ufebc\001\002\000" +
    "\004\015\u02a6\001\002\000\050\004\ufeb9\005\ufeb9\006\ufeb9" +
    "\007\ufeb9\011\ufeb9\012\ufeb9\013\ufeb9\014\ufeb9\017\ufeb9\023" +
    "\ufeb9\024\ufeb9\025\ufeb9\026\ufeb9\027\ufeb9\033\ufeb9\054\ufeb9" +
    "\077\ufeb9\135\ufeb9\137\ufeb9\001\002\000\004\142\u02a7\001" +
    "\002\000\006\015\u02ab\022\u02a8\001\002\000\034\003\u02a1" +
    "\004\u0296\005\u02a0\016\u0299\071\u02a4\074\u0297\101\u029f\142" +
    "\u029a\143\u0294\144\u02a5\145\u029d\146\u0293\147\u02a3\001\002" +
    "\000\052\004\ufe7f\005\ufe7f\006\ufe7f\007\ufe7f\011\ufe7f\012" +
    "\ufe7f\013\ufe7f\014\ufe7f\017\ufe7f\023\ufe7f\024\ufe7f\025\ufe7f" +
    "\026\ufe7f\027\ufe7f\033\ufe7f\054\ufe7f\077\ufe7f\134\ufe7f\135" +
    "\ufe7f\137\ufe7f\001\002\000\006\015\u02ab\022\u02b1\001\002" +
    "\000\004\142\u02ac\001\002\000\060\004\ufe7b\005\ufe7b\006" +
    "\ufe7b\007\ufe7b\011\ufe7b\012\ufe7b\013\ufe7b\014\ufe7b\015\ufe7b" +
    "\016\u02af\017\ufe7b\022\u02a8\023\ufe7b\024\ufe7b\025\ufe7b\026" +
    "\ufe7b\027\ufe7b\033\ufe7b\054\ufe7b\077\ufe7b\134\ufe7b\135\ufe7b" +
    "\137\ufe7b\001\002\000\054\004\ufe7c\005\ufe7c\006\ufe7c\007" +
    "\ufe7c\011\ufe7c\012\ufe7c\013\ufe7c\014\ufe7c\015\u02ab\017\ufe7c" +
    "\023\ufe7c\024\ufe7c\025\ufe7c\026\ufe7c\027\ufe7c\033\ufe7c\054" +
    "\ufe7c\077\ufe7c\134\ufe7c\135\ufe7c\137\ufe7c\001\002\000\052" +
    "\004\ufe7d\005\ufe7d\006\ufe7d\007\ufe7d\011\ufe7d\012\ufe7d\013" +
    "\ufe7d\014\ufe7d\017\ufe7d\023\ufe7d\024\ufe7d\025\ufe7d\026\ufe7d" +
    "\027\ufe7d\033\ufe7d\054\ufe7d\077\ufe7d\134\ufe7d\135\ufe7d\137" +
    "\ufe7d\001\002\000\036\003\u02a1\004\u0296\005\u02a0\016\u0299" +
    "\017\u02b9\071\u02a4\074\u0297\101\u029f\142\u029a\143\u0294\144" +
    "\u02a5\145\u029d\146\u0293\147\u02a3\001\002\000\056\004\ufe76" +
    "\005\ufe76\006\ufe76\007\ufe76\011\ufe76\012\ufe76\013\ufe76\014" +
    "\ufe76\015\ufe76\017\ufe76\022\u02b1\023\ufe76\024\ufe76\025\ufe76" +
    "\026\ufe76\027\ufe76\033\ufe76\054\ufe76\077\ufe76\134\ufe76\135" +
    "\ufe76\137\ufe76\001\002\000\034\003\u02a1\004\u0296\005\u02a0" +
    "\016\u0299\071\u02a4\074\u0297\101\u029f\142\u029a\143\u0294\144" +
    "\u02a5\145\u029d\146\u0293\147\u02a3\001\002\000\010\023\u02b3" +
    "\033\u02b4\077\u02b5\001\002\000\056\004\ufec1\005\ufec1\006" +
    "\ufec1\007\ufec1\011\ufec1\012\ufec1\013\ufec1\014\ufec1\015\ufec1" +
    "\017\ufec1\022\ufec1\023\ufec1\024\ufec1\025\ufec1\026\ufec1\027" +
    "\ufec1\033\ufec1\054\ufec1\077\ufec1\134\ufec1\135\ufec1\137\ufec1" +
    "\001\002\000\034\003\u02a1\004\u0296\005\u02a0\016\u0299\071" +
    "\u02a4\074\u0297\101\u029f\142\u029a\143\u0294\144\u02a5\145\u029d" +
    "\146\u0293\147\u02a3\001\002\000\034\003\u02a1\004\u0296\005" +
    "\u02a0\016\u0299\071\u02a4\074\u0297\101\u029f\142\u029a\143\u0294" +
    "\144\u02a5\145\u029d\146\u0293\147\u02a3\001\002\000\020\012" +
    "\ufe72\013\ufe72\014\ufe72\017\ufe72\023\ufe72\033\u02b4\077\ufe72" +
    "\001\002\000\020\012\ufe73\013\ufe73\014\ufe73\017\ufe73\023" +
    "\ufe73\033\ufe73\077\ufe73\001\002\000\012\014\ufebe\017\ufebe" +
    "\033\u02b4\077\u02b5\001\002\000\056\004\ufe7a\005\ufe7a\006" +
    "\ufe7a\007\ufe7a\011\ufe7a\012\ufe7a\013\ufe7a\014\ufe7a\015\ufe7a" +
    "\017\ufe7a\022\u02a8\023\ufe7a\024\ufe7a\025\ufe7a\026\ufe7a\027" +
    "\ufe7a\033\ufe7a\054\ufe7a\077\ufe7a\134\ufe7a\135\ufe7a\137\ufe7a" +
    "\001\002\000\006\014\u02bb\017\u02bc\001\002\000\034\003" +
    "\u02a1\004\u0296\005\u02a0\016\u0299\071\u02a4\074\u0297\101\u029f" +
    "\142\u029a\143\u0294\144\u02a5\145\u029d\146\u0293\147\u02a3\001" +
    "\002\000\056\004\ufe78\005\ufe78\006\ufe78\007\ufe78\011\ufe78" +
    "\012\ufe78\013\ufe78\014\ufe78\015\ufe78\017\ufe78\022\u02a8\023" +
    "\ufe78\024\ufe78\025\ufe78\026\ufe78\027\ufe78\033\ufe78\054\ufe78" +
    "\077\ufe78\134\ufe78\135\ufe78\137\ufe78\001\002\000\056\004" +
    "\ufe77\005\ufe77\006\ufe77\007\ufe77\011\ufe77\012\ufe77\013\ufe77" +
    "\014\ufe77\015\ufe77\017\ufe77\022\u02b1\023\ufe77\024\ufe77\025" +
    "\ufe77\026\ufe77\027\ufe77\033\ufe77\054\ufe77\077\ufe77\134\ufe77" +
    "\135\ufe77\137\ufe77\001\002\000\012\014\ufebf\017\ufebf\033" +
    "\u02b4\077\u02b5\001\002\000\056\004\ufe79\005\ufe79\006\ufe79" +
    "\007\ufe79\011\ufe79\012\ufe79\013\ufe79\014\ufe79\015\ufe79\017" +
    "\ufe79\022\u02b1\023\ufe79\024\ufe79\025\ufe79\026\ufe79\027\ufe79" +
    "\033\ufe79\054\ufe79\077\ufe79\134\ufe79\135\ufe79\137\ufe79\001" +
    "\002\000\052\004\ufe7e\005\ufe7e\006\ufe7e\007\ufe7e\011\ufe7e" +
    "\012\ufe7e\013\ufe7e\014\ufe7e\017\ufe7e\023\ufe7e\024\ufe7e\025" +
    "\ufe7e\026\ufe7e\027\ufe7e\033\ufe7e\054\ufe7e\077\ufe7e\134\ufe7e" +
    "\135\ufe7e\137\ufe7e\001\002\000\010\023\u02c2\033\u02b4\077" +
    "\u02b5\001\002\000\056\004\ufec0\005\ufec0\006\ufec0\007\ufec0" +
    "\011\ufec0\012\ufec0\013\ufec0\014\ufec0\015\ufec0\017\ufec0\022" +
    "\ufec0\023\ufec0\024\ufec0\025\ufec0\026\ufec0\027\ufec0\033\ufec0" +
    "\054\ufec0\077\ufec0\134\ufec0\135\ufec0\137\ufec0\001\002\000" +
    "\004\003\u02ce\001\002\000\004\003\u02cd\001\002\000\004" +
    "\003\u02cc\001\002\000\004\003\u02cb\001\002\000\004\003" +
    "\u02ca\001\002\000\004\003\u02c9\001\002\000\050\004\ufe66" +
    "\005\ufe66\006\ufe66\007\ufe66\011\ufe66\012\ufe66\013\ufe66\014" +
    "\ufe66\017\ufe66\023\ufe66\024\ufe66\025\ufe66\026\ufe66\027\ufe66" +
    "\033\ufe66\054\ufe66\077\ufe66\135\ufe66\137\ufe66\001\002\000" +
    "\050\004\ufe65\005\ufe65\006\ufe65\007\ufe65\011\ufe65\012\ufe65" +
    "\013\ufe65\014\ufe65\017\ufe65\023\ufe65\024\ufe65\025\ufe65\026" +
    "\ufe65\027\ufe65\033\ufe65\054\ufe65\077\ufe65\135\ufe65\137\ufe65" +
    "\001\002\000\050\004\ufe67\005\ufe67\006\ufe67\007\ufe67\011" +
    "\ufe67\012\ufe67\013\ufe67\014\ufe67\017\ufe67\023\ufe67\024\ufe67" +
    "\025\ufe67\026\ufe67\027\ufe67\033\ufe67\054\ufe67\077\ufe67\135" +
    "\ufe67\137\ufe67\001\002\000\050\004\ufe68\005\ufe68\006\ufe68" +
    "\007\ufe68\011\ufe68\012\ufe68\013\ufe68\014\ufe68\017\ufe68\023" +
    "\ufe68\024\ufe68\025\ufe68\026\ufe68\027\ufe68\033\ufe68\054\ufe68" +
    "\077\ufe68\135\ufe68\137\ufe68\001\002\000\050\004\ufe64\005" +
    "\ufe64\006\ufe64\007\ufe64\011\ufe64\012\ufe64\013\ufe64\014\ufe64" +
    "\017\ufe64\023\ufe64\024\ufe64\025\ufe64\026\ufe64\027\ufe64\033" +
    "\ufe64\054\ufe64\077\ufe64\135\ufe64\137\ufe64\001\002\000\050" +
    "\004\ufe63\005\ufe63\006\ufe63\007\ufe63\011\ufe63\012\ufe63\013" +
    "\ufe63\014\ufe63\017\ufe63\023\ufe63\024\ufe63\025\ufe63\026\ufe63" +
    "\027\ufe63\033\ufe63\054\ufe63\077\ufe63\135\ufe63\137\ufe63\001" +
    "\002\000\050\004\ufe55\005\ufe55\006\u02d5\007\u02d4\011\u02d2" +
    "\012\ufe55\013\ufe55\014\ufe55\017\ufe55\023\ufe55\024\ufe55\025" +
    "\ufe55\026\ufe55\027\ufe55\033\ufe55\054\ufe55\077\ufe55\135\ufe55" +
    "\137\u02d0\001\002\000\032\003\u02a1\004\u0296\005\u02a0\016" +
    "\u0299\071\u02a4\101\u029f\142\u029a\143\u0294\144\u02a5\145\u029d" +
    "\146\u0293\147\u02a3\001\002\000\032\003\u02a1\004\u0296\005" +
    "\u02a0\016\u0299\071\u02a4\101\u029f\142\u029a\143\u0294\144\u02a5" +
    "\145\u029d\146\u0293\147\u02a3\001\002\000\032\003\u02a1\004" +
    "\u0296\005\u02a0\016\u0299\071\u02a4\101\u029f\142\u029a\143\u0294" +
    "\144\u02a5\145\u029d\146\u0293\147\u02a3\001\002\000\032\003" +
    "\u02a1\004\u0296\005\u02a0\016\u0299\071\u02a4\101\u029f\142\u029a" +
    "\143\u0294\144\u02a5\145\u029d\146\u0293\147\u02a3\001\002\000" +
    "\032\003\u02a1\004\u0296\005\u02a0\016\u0299\071\u02a4\101\u029f" +
    "\142\u029a\143\u0294\144\u02a5\145\u029d\146\u0293\147\u02a3\001" +
    "\002\000\032\003\u02a1\004\u0296\005\u02a0\016\u0299\071\u02a4" +
    "\101\u029f\142\u029a\143\u0294\144\u02a5\145\u029d\146\u0293\147" +
    "\u02a3\001\002\000\050\004\ufe60\005\ufe60\006\ufe60\007\ufe60" +
    "\011\u02d2\012\ufe60\013\ufe60\014\ufe60\017\ufe60\023\ufe60\024" +
    "\ufe60\025\ufe60\026\ufe60\027\ufe60\033\ufe60\054\ufe60\077\ufe60" +
    "\135\ufe60\137\ufe60\001\002\000\050\004\ufe5f\005\ufe5f\006" +
    "\ufe5f\007\ufe5f\011\u02d2\012\ufe5f\013\ufe5f\014\ufe5f\017\ufe5f" +
    "\023\ufe5f\024\ufe5f\025\ufe5f\026\ufe5f\027\ufe5f\033\ufe5f\054" +
    "\ufe5f\077\ufe5f\135\ufe5f\137\ufe5f\001\002\000\050\004\ufe61" +
    "\005\ufe61\006\u02d5\007\u02d4\011\u02d2\012\ufe61\013\ufe61\014" +
    "\ufe61\017\ufe61\023\ufe61\024\ufe61\025\ufe61\026\ufe61\027\ufe61" +
    "\033\ufe61\054\ufe61\077\ufe61\135\ufe61\137\u02d0\001\002\000" +
    "\050\004\ufe5d\005\ufe5d\006\ufe5d\007\ufe5d\011\ufe5d\012\ufe5d" +
    "\013\ufe5d\014\ufe5d\017\ufe5d\023\ufe5d\024\ufe5d\025\ufe5d\026" +
    "\ufe5d\027\ufe5d\033\ufe5d\054\ufe5d\077\ufe5d\135\ufe5d\137\ufe5d" +
    "\001\002\000\050\004\ufe62\005\ufe62\006\u02d5\007\u02d4\011" +
    "\u02d2\012\ufe62\013\ufe62\014\ufe62\017\ufe62\023\ufe62\024\ufe62" +
    "\025\ufe62\026\ufe62\027\ufe62\033\ufe62\054\ufe62\077\ufe62\135" +
    "\ufe62\137\u02d0\001\002\000\050\004\ufe5e\005\ufe5e\006\ufe5e" +
    "\007\ufe5e\011\u02d2\012\ufe5e\013\ufe5e\014\ufe5e\017\ufe5e\023" +
    "\ufe5e\024\ufe5e\025\ufe5e\026\ufe5e\027\ufe5e\033\ufe5e\054\ufe5e" +
    "\077\ufe5e\135\ufe5e\137\ufe5e\001\002\000\004\142\u02dd\001" +
    "\002\000\004\016\u02de\001\002\000\036\003\u02a1\004\u0296" +
    "\005\u02a0\016\u0299\017\u02df\071\u02a4\074\u0297\101\u029f\142" +
    "\u029a\143\u0294\144\u02a5\145\u029d\146\u0293\147\u02a3\001\002" +
    "\000\050\004\ufe75\005\ufe75\006\ufe75\007\ufe75\011\ufe75\012" +
    "\ufe75\013\ufe75\014\ufe75\017\ufe75\023\ufe75\024\ufe75\025\ufe75" +
    "\026\ufe75\027\ufe75\033\ufe75\054\ufe75\077\ufe75\135\ufe75\137" +
    "\ufe75\001\002\000\006\014\u02bb\017\u02e1\001\002\000\050" +
    "\004\ufe74\005\ufe74\006\ufe74\007\ufe74\011\ufe74\012\ufe74\013" +
    "\ufe74\014\ufe74\017\ufe74\023\ufe74\024\ufe74\025\ufe74\026\ufe74" +
    "\027\ufe74\033\ufe74\054\ufe74\077\ufe74\135\ufe74\137\ufe74\001" +
    "\002\000\032\003\u02a1\004\u0296\005\u02a0\016\u0299\071\u02a4" +
    "\101\u029f\142\u029a\143\u0294\144\u02a5\145\u029d\146\u0293\147" +
    "\u02a3\001\002\000\032\003\u02a1\004\u0296\005\u02a0\016\u0299" +
    "\071\u02a4\101\u029f\142\u029a\143\u0294\144\u02a5\145\u029d\146" +
    "\u0293\147\u02a3\001\002\000\032\003\u02a1\004\u0296\005\u02a0" +
    "\016\u0299\071\u02a4\101\u029f\142\u029a\143\u0294\144\u02a5\145" +
    "\u029d\146\u0293\147\u02a3\001\002\000\032\003\u02a1\004\u0296" +
    "\005\u02a0\016\u0299\071\u02a4\101\u029f\142\u029a\143\u0294\144" +
    "\u02a5\145\u029d\146\u0293\147\u02a3\001\002\000\032\003\u02a1" +
    "\004\u0296\005\u02a0\016\u0299\071\u02a4\101\u029f\142\u029a\143" +
    "\u0294\144\u02a5\145\u029d\146\u0293\147\u02a3\001\002\000\032" +
    "\003\u02a1\004\u0296\005\u02a0\016\u0299\071\u02a4\101\u029f\142" +
    "\u029a\143\u0294\144\u02a5\145\u029d\146\u0293\147\u02a3\001\002" +
    "\000\034\004\u02d1\005\u02d3\006\u02d5\007\u02d4\011\u02d2\012" +
    "\ufe6a\013\ufe6a\014\ufe6a\017\ufe6a\023\ufe6a\033\ufe6a\077\ufe6a" +
    "\137\u02d0\001\002\000\034\004\u02d1\005\u02d3\006\u02d5\007" +
    "\u02d4\011\u02d2\012\ufe6f\013\ufe6f\014\ufe6f\017\ufe6f\023\ufe6f" +
    "\033\ufe6f\077\ufe6f\137\u02d0\001\002\000\034\004\u02d1\005" +
    "\u02d3\006\u02d5\007\u02d4\011\u02d2\012\ufe6c\013\ufe6c\014\ufe6c" +
    "\017\ufe6c\023\ufe6c\033\ufe6c\077\ufe6c\137\u02d0\001\002\000" +
    "\034\004\u02d1\005\u02d3\006\u02d5\007\u02d4\011\u02d2\012\ufe6e" +
    "\013\ufe6e\014\ufe6e\017\ufe6e\023\ufe6e\033\ufe6e\077\ufe6e\137" +
    "\u02d0\001\002\000\034\004\u02d1\005\u02d3\006\u02d5\007\u02d4" +
    "\011\u02d2\012\ufe6d\013\ufe6d\014\ufe6d\017\ufe6d\023\ufe6d\033" +
    "\ufe6d\077\ufe6d\137\u02d0\001\002\000\034\004\u02d1\005\u02d3" +
    "\006\u02d5\007\u02d4\011\u02d2\012\ufe6b\013\ufe6b\014\ufe6b\017" +
    "\ufe6b\023\ufe6b\033\ufe6b\077\ufe6b\137\u02d0\001\002\000\052" +
    "\004\ufe58\005\ufe58\006\ufe58\007\ufe58\011\ufe58\012\ufe58\013" +
    "\ufe58\014\ufe58\017\ufe58\022\u02b1\023\ufe58\024\ufe58\025\ufe58" +
    "\026\ufe58\027\ufe58\033\ufe58\054\ufe58\077\ufe58\135\ufe58\137" +
    "\ufe58\001\002\000\010\017\u02f0\033\u02b4\077\u02b5\001\002" +
    "\000\050\004\ufe57\005\ufe57\006\ufe57\007\ufe57\011\ufe57\012" +
    "\ufe57\013\ufe57\014\ufe57\017\ufe57\023\ufe57\024\ufe57\025\ufe57" +
    "\026\ufe57\027\ufe57\033\ufe57\054\ufe57\077\ufe57\135\ufe57\137" +
    "\ufe57\001\002\000\020\012\ufe71\013\ufe71\014\ufe71\017\ufe71" +
    "\023\ufe71\033\ufe71\077\ufe71\001\002\000\050\004\ufe56\005" +
    "\ufe56\006\ufe56\007\ufe56\011\ufe56\012\ufe56\013\ufe56\014\ufe56" +
    "\017\ufe56\023\ufe56\024\ufe56\025\ufe56\026\ufe56\027\ufe56\033" +
    "\ufe56\054\ufe56\077\ufe56\135\ufe56\137\ufe56\001\002\000\022" +
    "\036\ufeb6\042\ufeb6\045\ufeb6\057\ufeb6\070\ufeb6\071\ufeb6\120" +
    "\ufeb6\131\ufeb6\001\002\000\004\131\ufeb4\001\002\000\004" +
    "\072\u02f6\001\002\000\004\016\u02f7\001\002\000\004\017" +
    "\u02f8\001\002\000\004\020\u02f9\001\002\000\044\021\ufea5" +
    "\037\ufea5\044\ufea5\046\ufea5\050\ufea5\060\ufea5\062\ufea5\064" +
    "\ufea5\071\ufea5\101\ufea5\102\ufea5\103\ufea5\104\ufea5\116\ufea5" +
    "\122\ufea5\132\ufea5\142\ufea5\001\002\000\044\021\u02fe\037" +
    "\u030e\044\u0302\046\u02fc\050\u030c\060\u0314\062\u0312\064\u0308" +
    "\071\u02a4\101\u029f\102\u0310\103\u030d\104\u030a\116\u0303\122" +
    "\u0307\132\u0301\142\u030b\001\002\000\044\021\ufea6\037\ufea6" +
    "\044\ufea6\046\ufea6\050\ufea6\060\ufea6\062\ufea6\064\ufea6\071" +
    "\ufea6\101\ufea6\102\ufea6\103\ufea6\104\ufea6\116\ufea6\122\ufea6" +
    "\132\ufea6\142\ufea6\001\002\000\004\012\ufe9d\001\002\000" +
    "\044\021\ufe95\037\ufe95\044\ufe95\046\ufe95\050\ufe95\060\ufe95" +
    "\062\ufe95\064\ufe95\071\ufe95\101\ufe95\102\ufe95\103\ufe95\104" +
    "\ufe95\116\ufe95\122\ufe95\132\ufe95\142\ufe95\001\002\000\004" +
    "\002\ufec7\001\002\000\044\021\ufe96\037\ufe96\044\ufe96\046" +
    "\ufe96\050\ufe96\060\ufe96\062\ufe96\064\ufe96\071\ufe96\101\ufe96" +
    "\102\ufe96\103\ufe96\104\ufe96\116\ufe96\122\ufe96\132\ufe96\142" +
    "\ufe96\001\002\000\044\021\ufe93\037\ufe93\044\ufe93\046\ufe93" +
    "\050\ufe93\060\ufe93\062\ufe93\064\ufe93\071\ufe93\101\ufe93\102" +
    "\ufe93\103\ufe93\104\ufe93\116\ufe93\122\ufe93\132\ufe93\142\ufe93" +
    "\001\002\000\004\016\u0369\001\002\000\004\016\u0367\001" +
    "\002\000\004\016\u0361\001\002\000\004\012\u0360\001\002" +
    "\000\004\012\u035f\001\002\000\044\021\ufea4\037\ufea4\044" +
    "\ufea4\046\ufea4\050\ufea4\060\ufea4\062\ufea4\064\ufea4\071\ufea4" +
    "\101\ufea4\102\ufea4\103\ufea4\104\ufea4\116\ufea4\122\ufea4\132" +
    "\ufea4\142\ufea4\001\002\000\004\016\u034c\001\002\000\004" +
    "\016\u0340\001\002\000\044\021\ufe92\037\ufe92\044\ufe92\046" +
    "\ufe92\050\ufe92\060\ufe92\062\ufe92\064\ufe92\071\ufe92\101\ufe92" +
    "\102\ufe92\103\ufe92\104\ufe92\116\ufe92\122\ufe92\132\ufe92\142" +
    "\ufe92\001\002\000\004\016\u033a\001\002\000\004\134\u0338" +
    "\001\002\000\004\020\u0330\001\002\000\004\016\u032d\001" +
    "\002\000\004\012\ufe9e\001\002\000\006\012\u032c\134\u0323" +
    "\001\002\000\004\016\u0329\001\002\000\004\012\u0328\001" +
    "\002\000\004\016\u0326\001\002\000\004\012\u0325\001\002" +
    "\000\004\016\u0316\001\002\000\044\021\ufe94\037\ufe94\044" +
    "\ufe94\046\ufe94\050\ufe94\060\ufe94\062\ufe94\064\ufe94\071\ufe94" +
    "\101\ufe94\102\ufe94\103\ufe94\104\ufe94\116\ufe94\122\ufe94\132" +
    "\ufe94\142\ufe94\001\002\000\012\012\ufe82\071\u02a4\101\u029f" +
    "\142\u030b\001\002\000\010\012\ufe85\017\ufe85\134\u0323\001" +
    "\002\000\004\012\u031b\001\002\000\006\012\ufe83\017\ufe83" +
    "\001\002\000\006\012\ufe84\017\ufe84\001\002\000\034\003" +
    "\u02a1\004\u0296\005\u02a0\016\u0299\071\u02a4\074\u0297\101\u029f" +
    "\142\u029a\143\u0294\144\u02a5\145\u029d\146\u0293\147\u02a3\001" +
    "\002\000\010\012\u031d\033\u02b4\077\u02b5\001\002\000\012" +
    "\017\ufe82\071\u02a4\101\u029f\142\u030b\001\002\000\004\017" +
    "\u031f\001\002\000\004\020\u0320\001\002\000\044\021\ufea5" +
    "\037\ufea5\044\ufea5\046\ufea5\050\ufea5\060\ufea5\062\ufea5\064" +
    "\ufea5\071\ufea5\101\ufea5\102\ufea5\103\ufea5\104\ufea5\116\ufea5" +
    "\122\ufea5\132\ufea5\142\ufea5\001\002\000\044\021\u0322\037" +
    "\u030e\044\u0302\046\u02fc\050\u030c\060\u0314\062\u0312\064\u0308" +
    "\071\u02a4\101\u029f\102\u0310\103\u030d\104\u030a\116\u0303\122" +
    "\u0307\132\u0301\142\u030b\001\002\000\044\021\ufe86\037\ufe86" +
    "\044\ufe86\046\ufe86\050\ufe86\060\ufe86\062\ufe86\064\ufe86\071" +
    "\ufe86\101\ufe86\102\ufe86\103\ufe86\104\ufe86\116\ufe86\122\ufe86" +
    "\132\ufe86\142\ufe86\001\002\000\034\003\u02a1\004\u0296\005" +
    "\u02a0\016\u0299\071\u02a4\074\u0297\101\u029f\142\u029a\143\u0294" +
    "\144\u02a5\145\u029d\146\u0293\147\u02a3\001\002\000\012\012" +
    "\ufe91\017\ufe91\033\u02b4\077\u02b5\001\002\000\044\021\ufe9f" +
    "\037\ufe9f\044\ufe9f\046\ufe9f\050\ufe9f\060\ufe9f\062\ufe9f\064" +
    "\ufe9f\071\ufe9f\101\ufe9f\102\ufe9f\103\ufe9f\104\ufe9f\116\ufe9f" +
    "\122\ufe9f\132\ufe9f\142\ufe9f\001\002\000\004\017\u0327\001" +
    "\002\000\004\012\ufe98\001\002\000\044\021\ufea3\037\ufea3" +
    "\044\ufea3\046\ufea3\050\ufea3\060\ufea3\062\ufea3\064\ufea3\071" +
    "\ufea3\101\ufea3\102\ufea3\103\ufea3\104\ufea3\116\ufea3\122\ufea3" +
    "\132\ufea3\142\ufea3\001\002\000\034\003\u02a1\004\u0296\005" +
    "\u02a0\016\u0299\071\u02a4\074\u0297\101\u029f\142\u029a\143\u0294" +
    "\144\u02a5\145\u029d\146\u0293\147\u02a3\001\002\000\006\014" +
    "\u02bb\017\u032b\001\002\000\004\012\ufe9b\001\002\000\044" +
    "\021\ufea1\037\ufea1\044\ufea1\046\ufea1\050\ufea1\060\ufea1\062" +
    "\ufea1\064\ufea1\071\ufea1\101\ufea1\102\ufea1\103\ufea1\104\ufea1" +
    "\116\ufea1\122\ufea1\132\ufea1\142\ufea1\001\002\000\034\003" +
    "\u02a1\004\u0296\005\u02a0\016\u0299\071\u02a4\074\u0297\101\u029f" +
    "\142\u029a\143\u0294\144\u02a5\145\u029d\146\u0293\147\u02a3\001" +
    "\002\000\006\014\u02bb\017\u032f\001\002\000\004\012\ufe9a" +
    "\001\002\000\044\021\ufea5\037\ufea5\044\ufea5\046\ufea5\050" +
    "\ufea5\060\ufea5\062\ufea5\064\ufea5\071\ufea5\101\ufea5\102\ufea5" +
    "\103\ufea5\104\ufea5\116\ufea5\122\ufea5\132\ufea5\142\ufea5\001" +
    "\002\000\044\021\u0332\037\u030e\044\u0302\046\u02fc\050\u030c" +
    "\060\u0314\062\u0312\064\u0308\071\u02a4\101\u029f\102\u0310\103" +
    "\u030d\104\u030a\116\u0303\122\u0307\132\u0301\142\u030b\001\002" +
    "\000\004\132\u0333\001\002\000\004\016\u0334\001\002\000" +
    "\034\003\u02a1\004\u0296\005\u02a0\016\u0299\071\u02a4\074\u0297" +
    "\101\u029f\142\u029a\143\u0294\144\u02a5\145\u029d\146\u0293\147" +
    "\u02a3\001\002\000\010\017\u0336\033\u02b4\077\u02b5\001\002" +
    "\000\004\012\u0337\001\002\000\044\021\ufe80\037\ufe80\044" +
    "\ufe80\046\ufe80\050\ufe80\060\ufe80\062\ufe80\064\ufe80\071\ufe80" +
    "\101\ufe80\102\ufe80\103\ufe80\104\ufe80\116\ufe80\122\ufe80\132" +
    "\ufe80\142\ufe80\001\002\000\034\003\u02a1\004\u0296\005\u02a0" +
    "\016\u0299\071\u02a4\074\u0297\101\u029f\142\u029a\143\u0294\144" +
    "\u02a5\145\u029d\146\u0293\147\u02a3\001\002\000\012\012\ufe90" +
    "\017\ufe90\033\u02b4\077\u02b5\001\002\000\004\143\u033b\001" +
    "\002\000\004\014\u033c\001\002\000\004\136\u033d\001\002" +
    "\000\004\142\u033e\001\002\000\004\017\u033f\001\002\000" +
    "\004\012\ufe97\001\002\000\034\003\u02a1\004\u0296\005\u02a0" +
    "\016\u0299\071\u02a4\074\u0297\101\u029f\142\u029a\143\u0294\144" +
    "\u02a5\145\u029d\146\u0293\147\u02a3\001\002\000\010\017\u0342" +
    "\033\u02b4\077\u02b5\001\002\000\004\020\u0343\001\002\000" +
    "\044\021\ufea5\037\ufea5\044\ufea5\046\ufea5\050\ufea5\060\ufea5" +
    "\062\ufea5\064\ufea5\071\ufea5\101\ufea5\102\ufea5\103\ufea5\104" +
    "\ufea5\116\ufea5\122\ufea5\132\ufea5\142\ufea5\001\002\000\044" +
    "\021\u0345\037\u030e\044\u0302\046\u02fc\050\u030c\060\u0314\062" +
    "\u0312\064\u0308\071\u02a4\101\u029f\102\u0310\103\u030d\104\u030a" +
    "\116\u0303\122\u0307\132\u0301\142\u030b\001\002\000\046\021" +
    "\ufe8c\037\ufe8c\044\ufe8c\046\ufe8c\050\ufe8c\052\u0346\060\ufe8c" +
    "\062\ufe8c\064\ufe8c\071\ufe8c\101\ufe8c\102\ufe8c\103\ufe8c\104" +
    "\ufe8c\116\ufe8c\122\ufe8c\132\ufe8c\142\ufe8c\001\002\000\006" +
    "\020\u0349\064\u0308\001\002\000\044\021\ufe8f\037\ufe8f\044" +
    "\ufe8f\046\ufe8f\050\ufe8f\060\ufe8f\062\ufe8f\064\ufe8f\071\ufe8f" +
    "\101\ufe8f\102\ufe8f\103\ufe8f\104\ufe8f\116\ufe8f\122\ufe8f\132" +
    "\ufe8f\142\ufe8f\001\002\000\044\021\ufe8e\037\ufe8e\044\ufe8e" +
    "\046\ufe8e\050\ufe8e\060\ufe8e\062\ufe8e\064\ufe8e\071\ufe8e\101" +
    "\ufe8e\102\ufe8e\103\ufe8e\104\ufe8e\116\ufe8e\122\ufe8e\132\ufe8e" +
    "\142\ufe8e\001\002\000\044\021\ufea5\037\ufea5\044\ufea5\046" +
    "\ufea5\050\ufea5\060\ufea5\062\ufea5\064\ufea5\071\ufea5\101\ufea5" +
    "\102\ufea5\103\ufea5\104\ufea5\116\ufea5\122\ufea5\132\ufea5\142" +
    "\ufea5\001\002\000\044\021\u034b\037\u030e\044\u0302\046\u02fc" +
    "\050\u030c\060\u0314\062\u0312\064\u0308\071\u02a4\101\u029f\102" +
    "\u0310\103\u030d\104\u030a\116\u0303\122\u0307\132\u0301\142\u030b" +
    "\001\002\000\044\021\ufe8d\037\ufe8d\044\ufe8d\046\ufe8d\050" +
    "\ufe8d\060\ufe8d\062\ufe8d\064\ufe8d\071\ufe8d\101\ufe8d\102\ufe8d" +
    "\103\ufe8d\104\ufe8d\116\ufe8d\122\ufe8d\132\ufe8d\142\ufe8d\001" +
    "\002\000\034\003\u02a1\004\u0296\005\u02a0\016\u0299\071\u02a4" +
    "\074\u0297\101\u029f\142\u029a\143\u0294\144\u02a5\145\u029d\146" +
    "\u0293\147\u02a3\001\002\000\010\017\u034e\033\u02b4\077\u02b5" +
    "\001\002\000\004\020\u034f\001\002\000\006\040\u0353\047" +
    "\u0350\001\002\000\004\013\u035b\001\002\000\010\021\ufe89" +
    "\040\ufe89\047\ufe89\001\002\000\010\021\u035a\040\u0353\047" +
    "\u0350\001\002\000\034\003\u02a1\004\u0296\005\u02a0\016\u0299" +
    "\071\u02a4\074\u0297\101\u029f\142\u029a\143\u0294\144\u02a5\145" +
    "\u029d\146\u0293\147\u02a3\001\002\000\010\013\u0355\033\u02b4" +
    "\077\u02b5\001\002\000\042\037\ufea5\044\ufea5\046\ufea5\050" +
    "\ufea5\060\ufea5\062\ufea5\064\ufea5\071\ufea5\101\ufea5\102\ufea5" +
    "\103\ufea5\104\ufea5\116\ufea5\122\ufea5\132\ufea5\142\ufea5\001" +
    "\002\000\042\037\u0357\044\u0302\046\u02fc\050\u030c\060\u0314" +
    "\062\u0312\064\u0308\071\u02a4\101\u029f\102\u0310\103\u030d\104" +
    "\u030a\116\u0303\122\u0307\132\u0301\142\u030b\001\002\000\004" +
    "\012\u0358\001\002\000\010\021\ufe88\040\ufe88\047\ufe88\001" +
    "\002\000\010\021\ufe8a\040\ufe8a\047\ufe8a\001\002\000\044" +
    "\021\ufe8b\037\ufe8b\044\ufe8b\046\ufe8b\050\ufe8b\060\ufe8b\062" +
    "\ufe8b\064\ufe8b\071\ufe8b\101\ufe8b\102\ufe8b\103\ufe8b\104\ufe8b" +
    "\116\ufe8b\122\ufe8b\132\ufe8b\142\ufe8b\001\002\000\042\037" +
    "\ufea5\044\ufea5\046\ufea5\050\ufea5\060\ufea5\062\ufea5\064\ufea5" +
    "\071\ufea5\101\ufea5\102\ufea5\103\ufea5\104\ufea5\116\ufea5\122" +
    "\ufea5\132\ufea5\142\ufea5\001\002\000\042\037\u035d\044\u0302" +
    "\046\u02fc\050\u030c\060\u0314\062\u0312\064\u0308\071\u02a4\101" +
    "\u029f\102\u0310\103\u030d\104\u030a\116\u0303\122\u0307\132\u0301" +
    "\142\u030b\001\002\000\004\012\u035e\001\002\000\010\021" +
    "\ufe87\040\ufe87\047\ufe87\001\002\000\044\021\ufea0\037\ufea0" +
    "\044\ufea0\046\ufea0\050\ufea0\060\ufea0\062\ufea0\064\ufea0\071" +
    "\ufea0\101\ufea0\102\ufea0\103\ufea0\104\ufea0\116\ufea0\122\ufea0" +
    "\132\ufea0\142\ufea0\001\002\000\044\021\ufea2\037\ufea2\044" +
    "\ufea2\046\ufea2\050\ufea2\060\ufea2\062\ufea2\064\ufea2\071\ufea2" +
    "\101\ufea2\102\ufea2\103\ufea2\104\ufea2\116\ufea2\122\ufea2\132" +
    "\ufea2\142\ufea2\001\002\000\004\143\u0362\001\002\000\004" +
    "\014\u0363\001\002\000\004\136\u0364\001\002\000\004\142" +
    "\u0365\001\002\000\004\017\u0366\001\002\000\004\012\ufe9c" +
    "\001\002\000\004\017\u0368\001\002\000\004\012\ufe99\001" +
    "\002\000\034\003\u02a1\004\u0296\005\u02a0\016\u0299\071\u02a4" +
    "\074\u0297\101\u029f\142\u029a\143\u0294\144\u02a5\145\u029d\146" +
    "\u0293\147\u02a3\001\002\000\010\017\u036b\033\u02b4\077\u02b5" +
    "\001\002\000\004\020\u036c\001\002\000\044\021\ufea5\037" +
    "\ufea5\044\ufea5\046\ufea5\050\ufea5\060\ufea5\062\ufea5\064\ufea5" +
    "\071\ufea5\101\ufea5\102\ufea5\103\ufea5\104\ufea5\116\ufea5\122" +
    "\ufea5\132\ufea5\142\ufea5\001\002\000\044\021\u036e\037\u030e" +
    "\044\u0302\046\u02fc\050\u030c\060\u0314\062\u0312\064\u0308\071" +
    "\u02a4\101\u029f\102\u0310\103\u030d\104\u030a\116\u0303\122\u0307" +
    "\132\u0301\142\u030b\001\002\000\044\021\ufe81\037\ufe81\044" +
    "\ufe81\046\ufe81\050\ufe81\060\ufe81\062\ufe81\064\ufe81\071\ufe81" +
    "\101\ufe81\102\ufe81\103\ufe81\104\ufe81\116\ufe81\122\ufe81\132" +
    "\ufe81\142\ufe81\001\002\000\010\012\u0370\022\u02a8\134\u0371" +
    "\001\002\000\020\036\ufeb2\042\ufeb2\057\ufeb2\070\ufeb2\071" +
    "\ufeb2\120\ufeb2\131\ufeb2\001\002\000\034\003\u02a1\004\u0296" +
    "\005\u02a0\016\u0299\071\u02a4\074\u0297\101\u029f\142\u029a\143" +
    "\u0294\144\u02a5\145\u029d\146\u0293\147\u02a3\001\002\000\006" +
    "\012\u0373\022\u02b1\001\002\000\020\036\ufeb0\042\ufeb0\057" +
    "\ufeb0\070\ufeb0\071\ufeb0\120\ufeb0\131\ufeb0\001\002\000\010" +
    "\012\u0375\033\u02b4\077\u02b5\001\002\000\020\036\ufeb1\042" +
    "\ufeb1\057\ufeb1\070\ufeb1\071\ufeb1\120\ufeb1\131\ufeb1\001\002" +
    "\000\004\142\u0377\001\002\000\004\142\u0379\001\002\000" +
    "\020\036\ufeae\042\ufeae\057\ufeae\070\ufeae\071\ufeae\120\ufeae" +
    "\131\ufeae\001\002\000\006\016\u0380\022\u02a8\001\002\000" +
    "\006\012\u037d\014\u037c\001\002\000\020\036\ufead\042\ufead" +
    "\057\ufead\070\ufead\071\ufead\120\ufead\131\ufead\001\002\000" +
    "\004\142\u037f\001\002\000\020\036\ufeab\042\ufeab\057\ufeab" +
    "\070\ufeab\071\ufeab\120\ufeab\131\ufeab\001\002\000\020\036" +
    "\ufeac\042\ufeac\057\ufeac\070\ufeac\071\ufeac\120\ufeac\131\ufeac" +
    "\001\002\000\004\016\u0380\001\002\000\036\003\u02a1\004" +
    "\u0296\005\u02a0\016\u0299\017\u0381\071\u02a4\074\u0297\101\u029f" +
    "\142\u029a\143\u0294\144\u02a5\145\u029d\146\u0293\147\u02a3\001" +
    "\002\000\006\012\ufeaa\014\ufeaa\001\002\000\006\014\u02bb" +
    "\017\u0383\001\002\000\006\012\ufea9\014\ufea9\001\002\000" +
    "\010\012\u0386\014\u0385\022\u02b1\001\002\000\004\142\u0387" +
    "\001\002\000\020\036\ufea7\042\ufea7\057\ufea7\070\ufea7\071" +
    "\ufea7\120\ufea7\131\ufea7\001\002\000\004\022\u02a8\001\002" +
    "\000\020\036\ufea8\042\ufea8\057\ufea8\070\ufea8\071\ufea8\120" +
    "\ufea8\131\ufea8\001\002\000\004\143\u038a\001\002\000\024" +
    "\036\ufeb8\042\ufeb8\045\ufeb8\057\ufeb8\063\ufeb8\070\ufeb8\071" +
    "\ufeb8\120\ufeb8\131\ufeb8\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0389\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\004\057\u013d\001\001\000\012\004\007\007\011" +
    "\010\010\047\006\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\047\u013c\001\001\000\010\005\u012e\006\u0130" +
    "\050\u012f\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\011\020\051\021\052\017\001\001\000\002\001\001" +
    "\000\004\011\u012a\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\011\020\052\u0127\001\001" +
    "\000\002\001\001\000\004\012\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\037\001\001\000\010\011\u0101" +
    "\013\377\015\u0102\001\001\000\002\001\001\000\030\022" +
    "\061\027\046\030\052\032\047\034\060\041\044\042\062" +
    "\043\042\044\041\046\054\054\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\022\061\027\323" +
    "\030\324\033\325\041\044\042\062\043\042\044\041\046" +
    "\054\054\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\022\061\027\236\030\241\036\237" +
    "\041\044\042\062\043\042\044\041\046\054\054\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\022\061" +
    "\027\065\030\067\035\070\041\044\042\062\043\042\044" +
    "\041\046\054\054\057\001\001\000\002\001\001\000\030" +
    "\022\061\027\046\030\052\032\047\034\210\041\044\042" +
    "\062\043\042\044\041\046\054\054\057\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\016\101\017\104\020" +
    "\076\021\074\001\001\000\006\020\206\021\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\020\170\021\074\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\016\141\017\104\020\076\021\074\001\001\000" +
    "\012\016\111\017\104\020\076\021\074\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\016" +
    "\137\017\104\020\076\021\074\001\001\000\012\016\133" +
    "\017\104\020\076\021\074\001\001\000\002\001\001\000" +
    "\012\016\135\017\104\020\076\021\074\001\001\000\002" +
    "\001\001\000\012\016\140\017\104\020\076\021\074\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\020\152\021\074\001\001\000\014\016\144\017" +
    "\104\020\076\021\074\023\146\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\016\151\017" +
    "\104\020\076\021\074\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\020" +
    "\167\021\074\001\001\000\006\020\166\021\074\001\001" +
    "\000\006\020\165\021\074\001\001\000\006\020\164\021" +
    "\074\001\001\000\006\020\163\021\074\001\001\000\006" +
    "\020\162\021\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\020\205\021\074\001\001\000\006\020\204\021\074" +
    "\001\001\000\006\020\203\021\074\001\001\000\006\020" +
    "\202\021\074\001\001\000\006\020\201\021\074\001\001" +
    "\000\006\020\200\021\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\016\231\017" +
    "\104\020\076\021\074\001\001\000\012\016\217\017\104" +
    "\020\076\021\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\016\222\017\104\020\076\021\074\001\001" +
    "\000\002\001\001\000\026\022\061\027\065\030\067\035" +
    "\224\041\044\042\062\043\042\044\041\046\054\054\057" +
    "\001\001\000\002\001\001\000\012\016\226\017\104\020" +
    "\076\021\074\001\001\000\002\001\001\000\026\022\061" +
    "\027\065\030\067\035\230\041\044\042\062\043\042\044" +
    "\041\046\054\054\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\016\233\017\104\020\076\021\074\001" +
    "\001\000\002\001\001\000\026\022\061\027\065\030\067" +
    "\035\235\041\044\042\062\043\042\044\041\046\054\054" +
    "\057\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\022\061\027\046\030\052\032\047\034" +
    "\242\041\044\042\062\043\042\044\041\046\054\054\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\022\061\027\252\031\254" +
    "\041\250\042\257\043\246\044\247\045\251\046\054\053" +
    "\253\054\256\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\022\061\027\046" +
    "\030\052\032\047\034\260\041\044\042\062\043\042\044" +
    "\041\046\054\054\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\016\266" +
    "\017\104\020\076\021\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\016\273\017\104\020\076\021\074" +
    "\024\272\055\271\001\001\000\014\016\273\017\104\020" +
    "\076\021\074\024\306\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\016\305\017\104\020\076\021\074\001" +
    "\001\000\026\022\061\027\277\030\301\037\276\041\044" +
    "\042\062\043\042\044\041\046\054\054\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\022\061\027\046" +
    "\030\052\032\047\034\302\041\044\042\062\043\042\044" +
    "\041\046\054\054\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\022\061\027\310\030\312" +
    "\040\313\041\044\042\062\043\042\044\041\046\054\054" +
    "\057\001\001\000\002\001\001\000\030\022\061\027\046" +
    "\030\052\032\047\034\316\041\044\042\062\043\042\044" +
    "\041\046\054\054\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\022\061\027\277\030\301" +
    "\037\321\041\044\042\062\043\042\044\041\046\054\054" +
    "\057\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\022\061\027\323\030\324\033\326\041" +
    "\044\042\062\043\042\044\041\046\054\054\057\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\022\061\027" +
    "\323\030\324\033\331\041\044\042\062\043\042\044\041" +
    "\046\054\054\057\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\016\341\017\104\020\076\021\074\001\001" +
    "\000\012\016\340\017\104\020\076\021\074\001\001\000" +
    "\014\016\144\017\104\020\076\021\074\023\336\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\016\344\017\104\020\076\021\074\001\001\000\002\001" +
    "\001\000\012\016\357\017\104\020\076\021\074\001\001" +
    "\000\012\016\347\017\104\020\076\021\074\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\022\061\027\323\030\324\033\365\041\044\042\062" +
    "\043\042\044\041\046\054\054\057\001\001\000\002\001" +
    "\001\000\012\016\367\017\104\020\076\021\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\022\061\027\065\030\067\035\373\041\044\042\062" +
    "\043\042\044\041\046\054\054\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\022\061\027\065\030\067" +
    "\035\376\041\044\042\062\043\042\044\041\046\054\054" +
    "\057\001\001\000\002\001\001\000\006\011\u0101\015\u0123" +
    "\001\001\000\006\011\u0101\015\u0122\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\011\u0101" +
    "\015\u0105\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\012\u0115\016\u0117\017\104\020\076\021\074\025\u0116" +
    "\001\001\000\004\012\u010a\001\001\000\004\026\u010b\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\016\u010d" +
    "\017\104\020\076\021\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\016\u0110\017\104\020\076\021\074" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\u0113\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\u011a\001\001\000\002\001\001\000\004" +
    "\012\u011c\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\016\u0120\017\104\020\076\021\074" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\011\u0101" +
    "\015\u0126\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\u0129\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\u012c\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\050\u0131" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\011" +
    "\020\051\u0134\052\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\u0137\001\001\000\002\001\001\000" +
    "\030\022\061\027\046\030\052\032\047\034\u0139\041\044" +
    "\042\062\043\042\044\041\046\054\054\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\130\u027f\001\001\000\004\060\u013f\001" +
    "\001\000\004\061\u0140\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\063\u0145\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\064\u0147\001\001" +
    "\000\006\062\u0148\065\u014a\001\001\000\004\077\u0150\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\056\u0162\100" +
    "\u0160\001\001\000\006\056\u0162\100\u0277\001\001\000\002" +
    "\001\001\000\006\056\u0162\100\u026f\001\001\000\006\056" +
    "\u0162\100\u026e\001\001\000\006\056\u0162\100\u026d\001\001" +
    "\000\006\056\u0162\100\u026c\001\001\000\002\001\001\000" +
    "\004\076\u0157\001\001\000\002\001\001\000\012\067\u015a" +
    "\070\u015d\077\u015b\101\u0159\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\056\u0162\100\u0160" +
    "\001\001\000\002\001\001\000\006\077\u015b\101\u015f\001" +
    "\001\000\002\001\001\000\004\056\u0164\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\071\u0168" +
    "\001\001\000\036\072\u016d\074\u017e\075\u017b\077\u0175\102" +
    "\u0171\103\u0182\104\u017d\105\u0179\110\u0178\112\u017f\122\u0183" +
    "\125\u017c\126\u0184\127\u0177\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\113\u019d\114\u01a8" +
    "\115\u019c\116\u0265\117\u01a1\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\056\u0162\100\u0160" +
    "\121\u0227\123\u0226\001\001\000\002\001\001\000\004\123" +
    "\u0202\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\123\u0187\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\113\u019d\114\u01a8\115\u019c\116\u0193\117\u01a1\120\u01f7\001" +
    "\001\000\004\124\u018b\001\001\000\004\121\u018d\001\001" +
    "\000\004\123\u018c\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\113\u019d\114\u01a8\115\u019c\116\u01f4\117\u01a1" +
    "\001\001\000\016\113\u019d\114\u01a8\115\u019c\116\u0193\117" +
    "\u01a1\120\u019a\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\113\u019d\114" +
    "\u01f1\117\u01a1\001\001\000\004\121\u01f0\001\001\000\014" +
    "\113\u019d\114\u01a8\115\u019c\116\u01ef\117\u01a1\001\001\000" +
    "\002\001\001\000\014\113\u019d\114\u01a8\115\u019c\116\u01eb" +
    "\117\u01a1\001\001\000\006\121\u01e3\123\u01e2\001\001\000" +
    "\002\001\001\000\004\123\u01dc\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\113\u019d\114" +
    "\u01db\117\u01a1\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\123\u01c1\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\113\u019d\114\u01c0\117\u01a1\001" +
    "\001\000\010\113\u019d\114\u01bf\117\u01a1\001\001\000\010" +
    "\113\u019d\114\u01be\117\u01a1\001\001\000\010\113\u019d\114" +
    "\u01bd\117\u01a1\001\001\000\010\113\u019d\114\u01bc\117\u01a1" +
    "\001\001\000\010\113\u019d\114\u01bb\117\u01a1\001\001\000" +
    "\010\113\u019d\114\u01ba\117\u01a1\001\001\000\010\113\u019d" +
    "\114\u01b9\117\u01a1\001\001\000\010\113\u019d\114\u01b8\117" +
    "\u01a1\001\001\000\010\113\u019d\114\u01b7\117\u01a1\001\001" +
    "\000\010\113\u019d\114\u01b6\117\u01a1\001\001\000\010\113" +
    "\u019d\114\u01b5\117\u01a1\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\113\u019d\114\u01a8\115" +
    "\u019c\116\u0193\117\u01a1\120\u01c7\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\113\u019d\114\u01a8\115\u019c\116" +
    "\u01ca\117\u01a1\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\113\u019d\114\u01a8\115\u019c\116\u01ce\117\u01a1\001" +
    "\001\000\014\113\u019d\114\u01a8\115\u019c\116\u01cd\117\u01a1" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\121\u01de\001\001\000\002\001\001\000\014" +
    "\113\u019d\114\u01a8\115\u019c\116\u01e0\117\u01a1\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\123\u01ea\001\001\000\016\113\u019d\114\u01a8\115\u019c\116" +
    "\u0193\117\u01a1\120\u01e6\001\001\000\004\123\u01e9\001\001" +
    "\000\002\001\001\000\004\123\u01e8\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\113\u019d\114\u01a8\115\u019c\116\u01fa\117\u01a1\001" +
    "\001\000\002\001\001\000\014\073\u01fd\077\u0175\112\u01fe" +
    "\125\u0201\126\u0200\001\001\000\004\123\u0187\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\123\u0202\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\113\u019d\114\u01a8\115\u019c\116\u0204\117\u01a1\001\001" +
    "\000\002\001\001\000\014\113\u019d\114\u01a8\115\u019c\116" +
    "\u0206\117\u01a1\001\001\000\002\001\001\000\014\073\u0208" +
    "\077\u0175\112\u01fe\125\u0201\126\u0200\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\071\u020b\001\001\000\036" +
    "\072\u016d\074\u017e\075\u017b\077\u0175\102\u0171\103\u0182\104" +
    "\u017d\105\u0179\110\u0178\112\u017f\122\u0183\125\u017c\126\u0184" +
    "\127\u0177\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\113\u019d\114\u01a8" +
    "\115\u019c\116\u0193\117\u01a1\120\u0211\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\113\u019d\114\u01a8\115\u019c\116\u0216\117\u01a1\001" +
    "\001\000\002\001\001\000\016\113\u019d\114\u01a8\115\u019c" +
    "\116\u0193\117\u01a1\120\u0218\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\071\u021b\001\001\000\036\072\u016d" +
    "\074\u017e\075\u017b\077\u0175\102\u0171\103\u0182\104\u017d\105" +
    "\u0179\110\u0178\112\u017f\122\u0183\125\u017c\126\u0184\127\u0177" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\113" +
    "\u019d\114\u01a8\115\u019c\116\u021f\117\u01a1\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\113" +
    "\u019d\114\u01a8\115\u019c\116\u0193\117\u01a1\120\u0224\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\123\u0241\001\001\000\014\113\u019d" +
    "\114\u01a8\115\u019c\116\u0240\117\u01a1\001\001\000\014\113" +
    "\u019d\114\u01a8\115\u019c\116\u01f4\117\u01a1\001\001\000\016" +
    "\113\u019d\114\u01a8\115\u019c\116\u0193\117\u01a1\120\u022c\001" +
    "\001\000\006\121\u0238\123\u0237\001\001\000\002\001\001" +
    "\000\006\121\u022f\123\u022e\001\001\000\002\001\001\000" +
    "\004\123\u0230\001\001\000\002\001\001\000\014\113\u019d" +
    "\114\u01a8\115\u019c\116\u0232\117\u01a1\001\001\000\002\001" +
    "\001\000\014\113\u019d\114\u01a8\115\u019c\116\u0234\117\u01a1" +
    "\001\001\000\002\001\001\000\014\113\u019d\114\u01a8\115" +
    "\u019c\116\u0236\117\u01a1\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\123\u0239\001\001\000\002\001\001\000" +
    "\014\113\u019d\114\u01a8\115\u019c\116\u023b\117\u01a1\001\001" +
    "\000\002\001\001\000\014\113\u019d\114\u01a8\115\u019c\116" +
    "\u023d\117\u01a1\001\001\000\002\001\001\000\014\113\u019d" +
    "\114\u01a8\115\u019c\116\u023f\117\u01a1\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\113\u019d" +
    "\114\u01a8\115\u019c\116\u0243\117\u01a1\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\113\u019d\114\u01a8\115\u019c" +
    "\116\u0246\117\u01a1\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\113\u019d\114\u01a8\115\u019c\116\u0249\117\u01a1" +
    "\001\001\000\002\001\001\000\014\113\u019d\114\u01a8\115" +
    "\u019c\116\u024b\117\u01a1\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\071\u024e\001\001\000\036\072\u016d\074" +
    "\u017e\075\u017b\077\u0175\102\u0171\103\u0182\104\u017d\105\u0179" +
    "\110\u0178\112\u017f\122\u0183\125\u017c\126\u0184\127\u0177\001" +
    "\001\000\004\111\u0250\001\001\000\002\001\001\000\004" +
    "\110\u0253\001\001\000\004\071\u0254\001\001\000\002\001" +
    "\001\000\036\072\u016d\074\u017e\075\u017b\077\u0175\102\u0171" +
    "\103\u0182\104\u017d\105\u0179\110\u0178\112\u017f\122\u0183\125" +
    "\u017c\126\u0184\127\u0177\001\001\000\002\001\001\000\014" +
    "\113\u019d\114\u01a8\115\u019c\116\u0257\117\u01a1\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\106\u025d\107\u025b" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\113" +
    "\u019d\114\u01a8\115\u019c\116\u0260\117\u01a1\001\001\000\004" +
    "\107\u025e\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\071\u0262\001\001\000\036\072\u016d" +
    "\074\u017e\075\u017b\077\u0175\102\u0171\103\u0182\104\u017d\105" +
    "\u0179\110\u0178\112\u017f\122\u0183\125\u017c\126\u0184\127\u0177" +
    "\001\001\000\004\071\u0264\001\001\000\036\072\u016d\074" +
    "\u017e\075\u017b\077\u0175\102\u0171\103\u0182\104\u017d\105\u0179" +
    "\110\u0178\112\u017f\122\u0183\125\u017c\126\u0184\127\u0177\001" +
    "\001\000\002\001\001\000\014\113\u019d\114\u01a8\115\u019c" +
    "\116\u0267\117\u01a1\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\071\u026a\001\001\000\036\072\u016d\074\u017e" +
    "\075\u017b\077\u0175\102\u0171\103\u0182\104\u017d\105\u0179\110" +
    "\u0178\112\u017f\122\u0183\125\u017c\126\u0184\127\u0177\001\001" +
    "\000\002\001\001\000\004\056\u0164\001\001\000\004\056" +
    "\u0164\001\001\000\004\056\u0164\001\001\000\004\056\u0164" +
    "\001\001\000\006\066\u0273\076\u0272\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\113\u019d" +
    "\114\u01a8\115\u019c\116\u0275\117\u01a1\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\056\u0164\001\001\000\012" +
    "\067\u0279\070\u015d\077\u015b\101\u0159\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\071\u027c\001\001\000\036" +
    "\072\u016d\074\u017e\075\u017b\077\u0175\102\u0171\103\u0182\104" +
    "\u017d\105\u0179\110\u0178\112\u017f\122\u0183\125\u017c\126\u0184" +
    "\127\u0177\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\132\u0281\001\001\000\004\154\u0283" +
    "\001\001\000\002\001\001\000\012\131\u0286\155\u028a\156" +
    "\u028c\161\u028b\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\131\u0286\155\u02f3\156\u028c\161\u028b\001\001\000\002\001" +
    "\001\000\004\131\u028f\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\133\u0294\134\u029b\135\u029a\153\u02a1\164" +
    "\u0297\170\u029d\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\135\u02f1\153\u02a1\164\u0297\170" +
    "\u029d\001\001\000\016\133\u02f0\134\u029b\135\u029a\153\u02a1" +
    "\164\u0297\170\u029d\001\001\000\002\001\001\000\016\133" +
    "\u02ee\134\u029b\135\u029a\153\u02a1\164\u0297\170\u029d\001\001" +
    "\000\004\151\u02ed\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\135\u02ce\153\u02a1\164\u0297\170\u029d\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\151" +
    "\u02a9\171\u02a8\001\001\000\016\133\u02c0\134\u029b\135\u029a" +
    "\153\u02a1\164\u0297\170\u029d\001\001\000\002\001\001\000" +
    "\004\171\u02bf\001\001\000\004\172\u02ac\001\001\000\004" +
    "\151\u02af\001\001\000\004\171\u02ad\001\001\000\002\001" +
    "\001\000\020\133\u02b7\134\u029b\135\u029a\152\u02b9\153\u02a1" +
    "\164\u0297\170\u029d\001\001\000\002\001\001\000\016\133" +
    "\u02b1\134\u029b\135\u029a\153\u02a1\164\u0297\170\u029d\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\133\u02b6\134" +
    "\u029b\135\u029a\153\u02a1\164\u0297\170\u029d\001\001\000\016" +
    "\133\u02b5\134\u029b\135\u029a\153\u02a1\164\u0297\170\u029d\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\151\u02be\001\001\000\002\001\001\000\016\133" +
    "\u02bd\134\u029b\135\u029a\153\u02a1\164\u0297\170\u029d\001\001" +
    "\000\004\151\u02bc\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\135\u02da\153\u02a1\164\u0297\170" +
    "\u029d\001\001\000\012\135\u02d9\153\u02a1\164\u0297\170\u029d" +
    "\001\001\000\012\135\u02d8\153\u02a1\164\u0297\170\u029d\001" +
    "\001\000\012\135\u02d7\153\u02a1\164\u0297\170\u029d\001\001" +
    "\000\012\135\u02d6\153\u02a1\164\u0297\170\u029d\001\001\000" +
    "\012\135\u02d5\153\u02a1\164\u0297\170\u029d\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\133\u02b7\134\u029b\135\u029a\152" +
    "\u02df\153\u02a1\164\u0297\170\u029d\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\135\u02ec\153" +
    "\u02a1\164\u0297\170\u029d\001\001\000\012\135\u02eb\153\u02a1" +
    "\164\u0297\170\u029d\001\001\000\012\135\u02ea\153\u02a1\164" +
    "\u0297\170\u029d\001\001\000\012\135\u02e9\153\u02a1\164\u0297" +
    "\170\u029d\001\001\000\012\135\u02e8\153\u02a1\164\u0297\170" +
    "\u029d\001\001\000\012\135\u02e7\153\u02a1\164\u0297\170\u029d" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\144\u02f9\001\001\000\032" +
    "\136\u0314\137\u02ff\140\u0308\141\u02fc\146\u02fa\147\u0303\150" +
    "\u0305\163\u0310\164\u0304\165\u02fe\167\u0312\170\u030e\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\145\u0317\164\u0319\167\u0318\170" +
    "\u0316\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\133\u031b\134\u029b\135" +
    "\u029a\153\u02a1\164\u0297\170\u029d\001\001\000\002\001\001" +
    "\000\012\145\u031d\164\u0319\167\u0318\170\u0316\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\144\u0320\001\001" +
    "\000\032\136\u0314\137\u02ff\140\u0308\141\u02fc\146\u02fa\147" +
    "\u0303\150\u0305\163\u0310\164\u0304\165\u02fe\167\u0312\170\u030e" +
    "\001\001\000\002\001\001\000\016\133\u0323\134\u029b\135" +
    "\u029a\153\u02a1\164\u0297\170\u029d\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\133\u02b7\134\u029b\135\u029a\152\u0329" +
    "\153\u02a1\164\u0297\170\u029d\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\133\u02b7\134\u029b" +
    "\135\u029a\152\u032d\153\u02a1\164\u0297\170\u029d\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\144\u0330\001\001" +
    "\000\032\136\u0314\137\u02ff\140\u0308\141\u02fc\146\u02fa\147" +
    "\u0303\150\u0305\163\u0310\164\u0304\165\u02fe\167\u0312\170\u030e" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\133" +
    "\u0334\134\u029b\135\u029a\153\u02a1\164\u0297\170\u029d\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\133\u0338\134\u029b\135\u029a\153\u02a1\164\u0297\170\u029d" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\133\u0340\134\u029b\135\u029a\153" +
    "\u02a1\164\u0297\170\u029d\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\144\u0343\001\001\000\032\136\u0314\137" +
    "\u02ff\140\u0308\141\u02fc\146\u02fa\147\u0303\150\u0305\163\u0310" +
    "\164\u0304\165\u02fe\167\u0312\170\u030e\001\001\000\004\166" +
    "\u0346\001\001\000\004\165\u0347\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\144\u0349\001\001\000\032\136" +
    "\u0314\137\u02ff\140\u0308\141\u02fc\146\u02fa\147\u0303\150\u0305" +
    "\163\u0310\164\u0304\165\u02fe\167\u0312\170\u030e\001\001\000" +
    "\002\001\001\000\016\133\u034c\134\u029b\135\u029a\153\u02a1" +
    "\164\u0297\170\u029d\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\142\u0351\143\u0350\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\143\u0358\001\001\000\016\133" +
    "\u0353\134\u029b\135\u029a\153\u02a1\164\u0297\170\u029d\001\001" +
    "\000\002\001\001\000\004\144\u0355\001\001\000\032\136" +
    "\u0314\137\u02ff\140\u0308\141\u02fc\146\u02fa\147\u0303\150\u0305" +
    "\163\u0310\164\u0304\165\u02fe\167\u0312\170\u030e\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\144\u035b\001\001\000\032\136\u0314\137" +
    "\u02ff\140\u0308\141\u02fc\146\u02fa\147\u0303\150\u0305\163\u0310" +
    "\164\u0304\165\u02fe\167\u0312\170\u030e\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\133\u0369\134\u029b\135" +
    "\u029a\153\u02a1\164\u0297\170\u029d\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\144\u036c\001\001\000\032\136" +
    "\u0314\137\u02ff\140\u0308\141\u02fc\146\u02fa\147\u0303\150\u0305" +
    "\163\u0310\164\u0304\165\u02fe\167\u0312\170\u030e\001\001\000" +
    "\002\001\001\000\004\151\u0371\001\001\000\002\001\001" +
    "\000\016\133\u0373\134\u029b\135\u029a\153\u02a1\164\u0297\170" +
    "\u029d\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\157" +
    "\u0379\160\u0377\162\u037a\001\001\000\002\001\001\000\004" +
    "\151\u0383\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\157\u0379\160\u037d\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\133\u02b7\134\u029b\135" +
    "\u029a\152\u0381\153\u02a1\164\u0297\170\u029d\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\162\u0387\001\001\000\002\001\001\000\004" +
    "\151\u0383\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    //fields
    Lexer lex;
    private List<String> syntaxErrors;
    private GenTypeTab genTypeTab;
    private AstGen astGen;
    private Analyzator analyzator;

    //conect the parser with the lexer
    public Parser(Lexer lex, Analyzator analyzator){
        super(lex);
        syntaxErrors = new LinkedList<>();
        genTypeTab = new GenTypeTab();
        astGen = new AstGen();
        this.analyzator = analyzator;
    }

    //getters
    public Lexer getLexer(){
        return this.lex;
    }
    public List<String> getSyntaxErrors(){
        return this.syntaxErrors;
    }
    
    /*SOBREESCRIBIR LOS METODOS DE ERROR*/
    public void syntax_error(Symbol cur_token) {
        StringBuilder mssBuilder = new StringBuilder("Simbolo: ");
        mssBuilder.append(symbl_name_from_id(cur_token.sym));
        
        if(cur_token.value != null){
            mssBuilder.append(", lexema <");
            mssBuilder.append(cur_token.value.toString());
            mssBuilder.append(">");
        }
        mssBuilder.append(", linea: ");
        mssBuilder.append(cur_token.left);
        mssBuilder.append(", columna: ");
        mssBuilder.append(cur_token.right);
        
        if (expected_token_ids().isEmpty()) {
            mssBuilder.append(" -- ya no se esperaba ningun simbolo");
        } else {
            mssBuilder.append(" -- Se esperaba [");
            for (Integer expected_token_id : expected_token_ids()) {
                if(!symbl_name_from_id(expected_token_id).equals("error")){
                    mssBuilder.append(symbl_name_from_id(expected_token_id));
                    mssBuilder.append(" ");
                }
                
            }
            mssBuilder.append("]");
        }
        syntaxErrors.add(mssBuilder.toString());
    }
    
    public void report_error(String message, Object info){
        try{
            Symbol cur_token = (Symbol) info;
            StringBuilder mssBuilder = new StringBuilder("Simbolo: ");
            mssBuilder.append(symbl_name_from_id(cur_token.sym));
            mssBuilder.append(", linea: ");
            mssBuilder.append(cur_token.left);
            mssBuilder.append(", columna: ");
            mssBuilder.append(cur_token.right);
            if(cur_token != null){
                mssBuilder.append(", Lexema: ");
                mssBuilder.append(cur_token.value);
            }

            if(message != null){
                mssBuilder.append(", Info: ");
                mssBuilder.append(message);
            }
            
            syntaxErrors.add(mssBuilder.toString());
        } catch (Exception e){
            syntaxErrors.add(message);
        }
    }


    public void unrecovered_syntax_error(Symbol cur_token) {
        syntaxErrors.add("Errores de sintaxis severos detectados, revisa municiosamente el codigo");
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= s EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // s ::= pascal_block java_block main_program 
            {
              Object RESULT =null;
		int pbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<DefAst> pb = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int jbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int jbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<JClass> jb = (List<JClass>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CMain cb = (CMain)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                analyzator.pascalSemanticAnalysis(pb);
                analyzator.javaSemanticAnalysis(jb);
                analyzator.mainCSemanticAnalysis(cb);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // pascal_block ::= PASCAL_SECTION pcontent 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<DefAst> l = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = l;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pascal_block",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // pcontent ::= functions_b procedure_b 
            {
              List<DefAst> RESULT =null;
		int lfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<DefAst> lf = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<DefAst> lp = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                if(lf != null && lp != null){
                    lf.addAll(lp);
                    RESULT = lf;
                } else if (lf != null){
                    RESULT = lf;
                } else if (lp != null){
                    RESULT = lp;
                } else {
                    RESULT = new LinkedList<>();
                }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pcontent",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // var_type ::= INT_TKN 
            {
              Label RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        RESULT = new Label(
                            PrimitiveType.IntegerPT.getName(), 
                            new Position(tleft, tright)
                        ); 
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // var_type ::= FLOAT_TKN 
            {
              Label RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        RESULT = new Label(
                            PrimitiveType.RealPT.getName(), 
                            new Position(tleft, tright)
                        ); 
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // var_type ::= BOOLEAN_TKN 
            {
              Label RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        RESULT = new Label(
                            PrimitiveType.BooleanPT.getName(), 
                            new Position(tleft, tright)
                        ); 
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // var_type ::= CHAR_TKN 
            {
              Label RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        RESULT = new Label(
                            PrimitiveType.CharPT.getName(), 
                            new Position(tleft, tright)
                        ); 
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // var_type ::= STRING_TKN 
            {
              Label RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        RESULT = new Label(
                            PrimitiveType.StringPT.getName(), 
                            new Position(tleft, tright)
                        ); 
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // var_type ::= ID 
            {
              Label RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        RESULT = new Label(
                            t, 
                            new Position(tleft, tright)
                        ); 
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // var_type ::= error 
            {
              Label RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // id_list ::= id_list COMMA ID 
            {
              List<Label> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        if(l != null){
                            l.add(new Label(i, new Position(ileft, iright)));
                        } else {
                            l = new ArrayList<>();
                        }
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_list",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // id_list ::= ID 
            {
              List<Label> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        List<Label> list = new ArrayList<>();
                        list.add(new Label(i, new Position(ileft, iright)));
                        RESULT = list;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_list",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // range ::= expression DOT DOT DOT expression 
            {
              Range RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Range(e1, e2);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("range",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // arr_range ::= LBRACK expression DOT DOT expression RBRACK 
            {
              Range RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                         RESULT = new Range(e1, e2);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arr_range",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expression_list ::= expression_list COMMA expression 
            {
              List<Expression> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Expression> l = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        if(l != null){
                            l.add(e);
                        } else {
                            l = new LinkedList<>();
                        }
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_list",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expression_list ::= expression 
            {
              List<Expression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        LinkedList<Expression> list = new LinkedList<Expression>();
                        list.add(e);
                        RESULT = list;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_list",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // var_b ::= VAR list_vardec 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<DefAst> l = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_b",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // var_b ::= 
            {
              List<DefAst> RESULT =null;
		
                        RESULT = new LinkedList<DefAst>();
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_b",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // list_vardec ::= list_vardec var_dec SEMICOLON 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<DefAst> l = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<DefAst> dl = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        try{
                            l.addAll(dl);
                        } catch (NullPointerException e){}    
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_vardec",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // list_vardec ::= var_dec SEMICOLON 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<DefAst> l = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_vardec",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // list_vardec ::= list_vardec var_dec error var_dec 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<DefAst> l = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<DefAst> dl = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                        try{
                            l.addAll(dl);
                        } catch (NullPointerException e){}    
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_vardec",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // list_vardec ::= error var_dec 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<DefAst> l = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_vardec",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // list_vardec ::= var_dec error var_dec 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<DefAst> l = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_vardec",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // var_dec ::= id_list COLON var_type 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Label t = (Label)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = genTypeTab.userDef(l, t);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dec",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // var_dec ::= id_list COLON ARRAY arr_range OF var_type 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Range r = (Range)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Label t = (Label)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = genTypeTab.arrayDef(l, t, r);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dec",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // var_dec ::= id_list error var_type 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Label t = (Label)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = genTypeTab.userDef(l, t);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dec",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // var_dec ::= id_list error range 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Range r = (Range)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = genTypeTab.rangeDef(l, r);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dec",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // var_dec ::= id_list error ARRAY arr_range OF var_type 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Range r = (Range)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Label t = (Label)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = genTypeTab.arrayDef(l, t, r);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dec",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expression ::= expression AND expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.And, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expression ::= expression AND THEN expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.AndThen, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expression ::= expression OR expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.Or, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expression ::= expression OR ELSE expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.OrElse, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expression ::= NOT expression 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new UnaryOperation(
                            DefiniteOperation.Not,
                            e,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expression ::= bool_exp 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = e;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // bool_exp ::= arit_exp EQUALS arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.EqualsTo, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_exp",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // bool_exp ::= arit_exp DIFFERENT arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.DifferentTo, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_exp",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // bool_exp ::= arit_exp GRATER arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.GraterThan, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_exp",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // bool_exp ::= arit_exp LESS arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.LessThan, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_exp",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // bool_exp ::= arit_exp GRATER_EQUALS arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.GraterEq, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_exp",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // bool_exp ::= arit_exp LESS_EQUALS arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.LessEq, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_exp",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // bool_exp ::= arit_exp 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = e;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_exp",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // arit_exp ::= error PLUS error 
            {
              Expression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // arit_exp ::= error MINUS error 
            {
              Expression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // arit_exp ::= error TIMES error 
            {
              Expression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // arit_exp ::= error DIV error 
            {
              Expression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // arit_exp ::= error BARRA error 
            {
              Expression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // arit_exp ::= error MOD error 
            {
              Expression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // arit_exp ::= arit_exp PLUS arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.Addition, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // arit_exp ::= arit_exp MINUS arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.Substraction, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // arit_exp ::= arit_exp TIMES arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.Multiplication, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // arit_exp ::= arit_exp DIV arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.Division, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // arit_exp ::= arit_exp MOD arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.Module, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // arit_exp ::= arit_exp POWER arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.Power, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // arit_exp ::= literals 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = e;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // arit_exp ::= ID LBRACK arit_exp RBRACK 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = new VectorUse(
                            i, e, new Position(ileft, iright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // arit_exp ::= ID LPAREN expression_list RPAREN 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Expression> l = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = new FunctionUse(
                            i, l, new Position(ileft, iright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // arit_exp ::= ID LPAREN RPAREN 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                        RESULT = new FunctionUse(
                            i, new Position(ileft, iright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // arit_exp ::= ID 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new PVarUse(
                            i, new Position(ileft,iright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // arit_exp ::= LPAREN expression RPAREN 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = e;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // arit_exp ::= PLUS arit_exp 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new UnaryOperation(
                            DefiniteOperation.Addition,
                            e,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // arit_exp ::= MINUS arit_exp 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new UnaryOperation(
                            DefiniteOperation.Substraction,
                            e,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // arit_exp ::= LPAREN error RPAREN 
            {
              Expression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // arit_exp ::= MINUS error 
            {
              Expression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // arit_exp ::= PLUS error 
            {
              Expression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // literals ::= BOOLEAN_LIT 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer l = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new PLiteral(
                            PrimitiveType.BooleanPT, 
                            l,
                            new Position(lleft, lright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literals",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // literals ::= INTEGER_LIT 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer l = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new PLiteral(
                            PrimitiveType.IntegerPT, 
                            l,
                            new Position(lleft, lright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literals",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // literals ::= FLOAT_LIT 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		float l = (float)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new PLiteral(
                            PrimitiveType.RealPT, 
                            l,
                            new Position(lleft, lright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literals",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // literals ::= CHAR_LIT 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Character l = (Character)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new PLiteral(
                            PrimitiveType.CharPT, 
                            l,
                            new Position(lleft, lright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literals",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // literals ::= STRING_LIT 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new PLiteral(
                            PrimitiveType.StringPT, 
                            l,
                            new Position(lleft, lright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literals",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // conditional ::= if_stmt block_cond 
            {
              PassIf RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		InitIf i = (InitIf)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = new PassIf(new IfAst(
                        i.getExpression(), 
                        ls, 
                        i.getPosition()
                    ));
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // conditional ::= if_stmt block_cond SEMICOLON 
            {
              PassIf RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		InitIf i = (InitIf)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = new PassIf(new IfAst(
                        i.getExpression(), 
                        ls,
                        i.getPosition()
                    ));
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // conditional ::= if_stmt block_cond ELSE elif 
            {
              PassIf RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		InitIf i = (InitIf)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int piright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PassIf pi = (PassIf)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
                    if(pi.getElseAst() != null && pi.getElseAst().getInitPos() == null){
                        pi.getElseAst().setInitPos(
                            new Position(eleft, eright)
                        );
                    }
                    RESULT = astGen.genPassIf(
                        pi, 
                        new IfAst(i.getExpression(), ls, i.getPosition())
                    );
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // if_stmt ::= IF LPAREN expression RPAREN THEN 
            {
              InitIf RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		  
                    RESULT = new InitIf(e, new Position(ileft, iright));     
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_stmt",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // if_stmt ::= IF LPAREN error RPAREN THEN 
            {
              InitIf RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		  
                    RESULT = new InitIf(null, new Position(ileft, iright));     
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_stmt",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // if_stmt ::= IF LPAREN expression error THEN 
            {
              InitIf RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		  
                    RESULT = new InitIf(e, new Position(ileft, iright));     
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_stmt",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // if_stmt ::= IF error expression RPAREN THEN 
            {
              InitIf RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		  
                    RESULT = new InitIf(e, new Position(ileft, iright));     
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_stmt",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // if_stmt ::= IF error expression error THEN 
            {
              InitIf RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		  
                    RESULT = new InitIf(e, new Position(ileft, iright));     
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_stmt",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // block_cond ::= simple_stmt 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_cond",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // block_cond ::= complex_stmt 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_cond",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // block_cond ::= BEGIN block_stmt END 
            {
              List<Statement> RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = ls;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_cond",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // elif ::= else_block SEMICOLON 
            {
              PassIf RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ElseAst e = (ElseAst)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = new PassIf(e);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elif",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // elif ::= conditional 
            {
              PassIf RESULT =null;
		int pileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int piright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PassIf pi = (PassIf)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = pi;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elif",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // else_block ::= complex_else 
            {
              ElseAst RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
                    RESULT = new ElseAst(astGen.oneStmtInList(s)); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_block",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // else_block ::= simple_stmt 
            {
              ElseAst RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = new ElseAst(astGen.oneStmtInList(s)); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_block",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // else_block ::= BEGIN block_stmt END 
            {
              ElseAst RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = new ElseAst(ls);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_block",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // complex_else ::= case_stmt 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CaseAst s = (CaseAst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complex_else",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // complex_else ::= while_stmt 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		WhileAst s = (WhileAst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complex_else",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // complex_else ::= for_stmt 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ForAst s = (ForAst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complex_else",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // complex_else ::= repeat_stmt 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		RepeatAst s = (RepeatAst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complex_else",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // case_stmt ::= CASE LPAREN expression RPAREN OF case_block ELSE case_else_stmts END SEMICOLON 
            {
              CaseAst RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int lscleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int lscright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<SimpleCase> lsc = (List<SimpleCase>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                    RESULT = new CaseAst(e, lsc, new ElseAst(ls), new Position(cleft, cright));
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_stmt",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // case_block ::= case_block labels COLON case_stmts SEMICOLON 
            {
              List<SimpleCase> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<SimpleCase> l = (List<SimpleCase>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int labsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int labsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<Expression> labs = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    if(l != null){
                        l.add(new SimpleCase(labs, ls));
                    } else {
                        l = new LinkedList<>();
                    }
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_block",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // case_block ::= labels COLON case_stmts SEMICOLON 
            {
              List<SimpleCase> RESULT =null;
		int labsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int labsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<Expression> labs = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = astGen.genSimpleCaseList(labs, ls);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_block",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // labels ::= labels COMMA expression 
            {
              List<Expression> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Expression> l = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    if(l != null){
                        l.add(e);
                    } else {
                        l = new LinkedList<>();
                    }
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("labels",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // labels ::= expression 
            {
              List<Expression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    LinkedList<Expression> list = new LinkedList<>();
                    list.add(e);
                    RESULT = list;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("labels",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // case_stmts ::= simple_stmt 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_stmts",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // case_stmts ::= complex_stmt 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_stmts",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // case_stmts ::= BEGIN block_stmt END 
            {
              List<Statement> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_stmts",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // case_else_stmts ::= simple_stmt 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_else_stmts",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // case_else_stmts ::= simple_stmt SEMICOLON 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_else_stmts",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // case_else_stmts ::= complex_stmt 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_else_stmts",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // case_else_stmts ::= BEGIN block_stmt 
            {
              List<Statement> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		      
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_else_stmts",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // while_stmt ::= WHILE LPAREN expression RPAREN DO statements 
            {
              WhileAst RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = new WhileAst(e, l, new Position(wleft, wright));
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_stmt",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // while_stmt ::= WHILE LPAREN error RPAREN DO statements 
            {
              WhileAst RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = new WhileAst(null, l, new Position(wleft, wright));
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_stmt",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // for_stmt ::= FOR ID ASSIGNATION expression TO expression DO statements 
            {
              ForAst RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    Range range = new Range(e1, e2);
                    Label variable = new Label(i, new Position(ileft, iright));
                    RESULT = new ForAst(variable, range, l, new Position(fleft, fright));
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_stmt",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // for_stmt ::= FOR ID ASSIGNATION error TO expression DO statements 
            {
              ForAst RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    Range range = new Range(null, e2);
                    Label variable = new Label(i, new Position(ileft, iright));
                    RESULT = new ForAst(variable, range, l, new Position(fleft, fright));
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_stmt",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // for_stmt ::= FOR ID error expression TO expression DO statements 
            {
              ForAst RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    Range range = new Range(e1, e2);
                    Label variable = new Label(i, new Position(ileft, iright));
                    RESULT = new ForAst(variable, range, l, new Position(fleft, fright));
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_stmt",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // repeat_stmt ::= REPEAT statements UNTIL expression 
            {
              RepeatAst RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = new RepeatAst(e, l, new Position(rleft, rright));
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("repeat_stmt",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // statements ::= simple_stmt SEMICOLON 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // statements ::= complex_stmt 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // statements ::= BEGIN block_stmt END SEMICOLON 
            {
              List<Statement> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // block_stmt ::= list_stmts 
            {
              List<Statement> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_stmt",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // block_stmt ::= 
            {
              List<Statement> RESULT =null;
		
                    RESULT = new LinkedList<Statement>();
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_stmt",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // list_stmts ::= simple_stmt 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_stmts",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // list_stmts ::= simple_stmt SEMICOLON 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_stmts",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // list_stmts ::= complex_stmt 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_stmts",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // list_stmts ::= simple_stmt SEMICOLON more_stmts 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    if(l != null){
                        l.add(0, s);
                    } else {
                        l = new LinkedList<>();
                    }
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_stmts",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // list_stmts ::= complex_stmt more_stmts 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    if(l != null){
                        l.add(0, s);
                    } else {
                        l = new LinkedList<>();
                    }
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_stmts",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // more_stmts ::= simple_stmt error 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("more_stmts",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // more_stmts ::= simple_stmt 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("more_stmts",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // more_stmts ::= simple_stmt SEMICOLON 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("more_stmts",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // more_stmts ::= simple_stmt SEMICOLON more_stmts 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    if(l != null){
                        l.add(0, s);
                    } else {
                        l = new LinkedList<>();
                    }
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("more_stmts",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // more_stmts ::= complex_stmt more_stmts 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    if(l != null){
                        l.add(0, s);
                    } else {
                        l = new LinkedList<>();
                    }
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("more_stmts",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // more_stmts ::= complex_stmt 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("more_stmts",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // simple_stmt ::= BREAK 
            {
              Statement RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
                    RESULT = new SimpleStmt(
                        SimpleStmt.BREAK, 
                        new Position(bleft, bright)
                    );  
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // simple_stmt ::= CONTINUE 
            {
              Statement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
                    RESULT = new SimpleStmt(
                        SimpleStmt.CONTINUE,
                        new Position(cleft, cright)
                    );  
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // simple_stmt ::= ID ASSIGNATION expression 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
                    RESULT = new Assignation(
                        new Label(i, new Position(ileft, iright)), e
                    );
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // simple_stmt ::= ID LPAREN expression_list RPAREN 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Expression> el = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = new FunctionUseStmt(
                        new Label(i, new Position(ileft, iright)),
                        el
                    );
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // simple_stmt ::= ID LPAREN RPAREN 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                    RESULT = new FunctionUseStmt(
                        new Label(i, new Position(ileft, iright)),
                        new LinkedList<>()
                    );
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // simple_stmt ::= ID LBRACK expression RBRACK ASSIGNATION expression 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = new ArrayAssign(
                        new Label(i, new Position(ileft, iright)),
                        e1,
                        e2
                    );
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // simple_stmt ::= definite_fun 
            {
              Statement RESULT =null;
		int fuleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int furight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunctionUseStmt fu = (FunctionUseStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = fu; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // simple_stmt ::= error 
            {
              Statement RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // complex_stmt ::= conditional 
            {
              Statement RESULT =null;
		int pileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int piright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PassIf pi = (PassIf)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
                    RESULT =  astGen.transformPassIf(pi); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complex_stmt",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // complex_stmt ::= case_stmt 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CaseAst s = (CaseAst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complex_stmt",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // complex_stmt ::= while_stmt 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		WhileAst s = (WhileAst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complex_stmt",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // complex_stmt ::= for_stmt 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ForAst s = (ForAst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complex_stmt",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // complex_stmt ::= repeat_stmt 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		RepeatAst s = (RepeatAst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complex_stmt",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // functions_b ::= functions 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<DefAst> l = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functions_b",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // functions_b ::= 
            {
              List<DefAst> RESULT =null;
		
                    RESULT = new LinkedList<>();
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functions_b",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // functions ::= functions function_dec 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<DefAst> l = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunctionDec d = (FunctionDec)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    if(l != null){
                        l.add(d);
                    } else {
                        l = new LinkedList<>();
                    }
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functions",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // functions ::= function_dec 
            {
              List<DefAst> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunctionDec d = (FunctionDec)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    LinkedList<DefAst> list = new LinkedList<>();
                    list.add(d);
                    RESULT = list;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functions",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // function_dec ::= FUNCTION ID LPAREN arguments RPAREN COLON var_type SEMICOLON var_b BEGIN block_stmt END SEMICOLON 
            {
              FunctionDec RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		List<Argument> a = (List<Argument>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Label t = (Label)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int lvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<DefAst> lv = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		  
                    RESULT = new FunctionDec(
                        new Label(i, new Position(ileft, iright)),
                        t, a, lv, ls
                    );
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_dec",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // procedure_b ::= procedures 
            {
              List<DefAst> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<DefAst> p = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = p;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_b",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // procedure_b ::= 
            {
              List<DefAst> RESULT =null;
		  
                    RESULT = new LinkedList<>();
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_b",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // procedures ::= procedures procedure_dec 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<DefAst> l = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ProcedureDec d = (ProcedureDec)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    if(l != null){
                        l.add(d);
                    } else {
                        l = new LinkedList<>();
                    }
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedures",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // procedures ::= procedure_dec 
            {
              List<DefAst> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ProcedureDec d = (ProcedureDec)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    LinkedList<DefAst> list = new LinkedList<>();
                    list.add(d);
                    RESULT = list;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedures",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // procedure_dec ::= PROCEDURE ID LPAREN arguments RPAREN SEMICOLON var_b BEGIN block_stmt END SEMICOLON 
            {
              ProcedureDec RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		List<Argument> a = (List<Argument>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int lvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<DefAst> lv = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                    RESULT = new ProcedureDec(
                        new Label(i, new Position(ileft, iright)),
                        a, lv, ls
                    );
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_dec",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // arguments ::= arguments SEMICOLON type_arg 
            {
              List<Argument> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Argument> l = (List<Argument>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Argument> args = (List<Argument>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    try{
                        l.addAll(args);
                    } catch (NullPointerException e){

                    }
                    
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // arguments ::= type_arg 
            {
              List<Argument> RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Argument> args = (List<Argument>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = args;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // arguments ::= 
            {
              List<Argument> RESULT =null;
		
                    RESULT = new LinkedList<Argument>();
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // type_arg ::= VAR id_list COLON var_type 
            {
              List<Argument> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Label t = (Label)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = astGen.generateArgs(l, t, true);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_arg",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // type_arg ::= id_list COLON var_type 
            {
              List<Argument> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Label t = (Label)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = astGen.generateArgs(l, t, false);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_arg",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // java_block ::= JAVA_SECTION jcontent 
            {
              List<JClass> RESULT =null;
		int lcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<JClass> lc = (List<JClass>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = lc;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("java_block",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // jmodificator ::= PUBLIC 
            {
              AccessMod RESULT =null;
		 
                RESULT = AccessMod.PUBLIC; 
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jmodificator",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // jmodificator ::= PRIVATE 
            {
              AccessMod RESULT =null;
		 
                RESULT = AccessMod.PRIVATE; 
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jmodificator",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // jmodificator ::= PROTECTED 
            {
              AccessMod RESULT =null;
		 
                RESULT = AccessMod.PROTECTED; 
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jmodificator",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // jtype ::= INT_TKN jbracks_list 
            {
              JType RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Index i = (Index)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JArrayType(
                    new Label(
                        PrimitiveType.IntegerPT.getName(), 
                        new Position(tleft, tright)
                    ),
                    JReferType.PrimitiveData,
                    i.getNumber()
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jtype",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // jtype ::= STRING_TKN jbracks_list 
            {
              JType RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Index i = (Index)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JArrayType(
                    new Label(
                        PrimitiveType.StringPT.getName(), 
                        new Position(tleft, tright)
                    ),
                    JReferType.PrimitiveData,
                    i.getNumber()
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jtype",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // jtype ::= FLOAT_TKN jbracks_list 
            {
              JType RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Index i = (Index)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JArrayType(
                    new Label(
                        PrimitiveType.RealPT.getName(), 
                        new Position(tleft, tright)
                    ),
                    JReferType.PrimitiveData,
                    i.getNumber()
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jtype",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // jtype ::= BOOLEAN_TKN jbracks_list 
            {
              JType RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Index i = (Index)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JArrayType(
                    new Label(
                        PrimitiveType.BooleanPT.getName(), 
                        new Position(tleft, tright)
                    ),
                    JReferType.PrimitiveData,
                    i.getNumber()
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jtype",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // jtype ::= CHAR_TKN jbracks_list 
            {
              JType RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Index i = (Index)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JArrayType(
                    new Label(
                        PrimitiveType.CharPT.getName(), 
                        new Position(tleft, tright)
                    ),
                    JReferType.PrimitiveData,
                    i.getNumber()
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jtype",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // jtype ::= ID jbracks_list 
            {
              JType RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Index i = (Index)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JArrayType(
                    new Label( id, new Position(idleft, idright)),
                    JReferType.ObjectReference,
                    i.getNumber()
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jtype",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // jtype ::= INT_TKN 
            {
              JType RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JType(
                    JReferType.PrimitiveData,
                    new Label(
                        PrimitiveType.IntegerPT.getName(), 
                        new Position(tleft, tright)
                    )
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jtype",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // jtype ::= STRING_TKN 
            {
              JType RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JType(
                    JReferType.PrimitiveData,
                    new Label(
                        PrimitiveType.StringPT.getName(), 
                        new Position(tleft, tright)
                    )
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jtype",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // jtype ::= FLOAT_TKN 
            {
              JType RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JType(
                    JReferType.PrimitiveData,
                    new Label(
                        PrimitiveType.RealPT.getName(), 
                        new Position(tleft, tright)
                    )
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jtype",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // jtype ::= BOOLEAN_TKN 
            {
              JType RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JType(
                    JReferType.PrimitiveData,
                    new Label(
                        PrimitiveType.BooleanPT.getName(), 
                        new Position(tleft, tright)
                    )
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jtype",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // jtype ::= CHAR_TKN 
            {
              JType RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JType(
                    JReferType.PrimitiveData,
                    new Label(
                        PrimitiveType.CharPT.getName(), 
                        new Position(tleft, tright)
                    )
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jtype",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // jtype ::= ID 
            {
              JType RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JType(
                    JReferType.ObjectReference,
                    new Label(id, new Position(idleft, idright))
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jtype",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // jbracks_list ::= jbracks_list jbrack 
            {
              Index RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Index i = (Index)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                i.increment();
                RESULT = i;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jbracks_list",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // jbracks_list ::= jbrack 
            {
              Index RESULT =null;
		
                RESULT = new Index();
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jbracks_list",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // jbrack ::= LBRACK RBRACK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jbrack",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // jarray_access ::= LBRACK jexp RBRACK 
            {
              List<JExpression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		JExpression e = (JExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                List<JExpression> list = new LinkedList<>();
                list.add(e);
                RESULT = list;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarray_access",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // jarray_access ::= jarray_access LBRACK jexp RBRACK 
            {
              List<JExpression> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<JExpression> l = (List<JExpression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		JExpression e = (JExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                l.add(e);
                RESULT = l;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarray_access",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // jexp_list ::= jexp_list COMMA jexp 
            {
              List<JExpression> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<JExpression> l = (List<JExpression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JExpression e = (JExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                l.add(e);
                RESULT = l;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jexp_list",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // jexp_list ::= jexp 
            {
              List<JExpression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JExpression e = (JExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                List<JExpression> list = new LinkedList<>();
                list.add(e);
                RESULT = list;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jexp_list",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // jliterals ::= INTEGER_LIT 
            {
              JLiteral RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer o = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JLiteral(
                    new Position(oleft, oright),
                    o, PrimitiveType.IntegerPT
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jliterals",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // jliterals ::= STRING_LIT 
            {
              JLiteral RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JLiteral(
                    new Position(oleft, oright),
                    o, PrimitiveType.StringPT
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jliterals",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // jliterals ::= BOOLEAN_LIT 
            {
              JLiteral RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer o = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JLiteral(
                    new Position(oleft, oright),
                    o, PrimitiveType.BooleanPT
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jliterals",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // jliterals ::= CHAR_LIT 
            {
              JLiteral RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Character o = (Character)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JLiteral(
                    new Position(oleft, oright),
                    o, PrimitiveType.CharPT
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jliterals",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // jliterals ::= FLOAT_LIT 
            {
              JLiteral RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		float o = (float)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JLiteral(
                    new Position(oleft, oright),
                    o, PrimitiveType.RealPT
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jliterals",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // jcontent ::= jcontent jclass 
            {
              List<JClass> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<JClass> l = (List<JClass>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JClass c = (JClass)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                l.add(c);
                RESULT = l;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jcontent",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // jcontent ::= 
            {
              List<JClass> RESULT =null;
		
                RESULT = new LinkedList<>();
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jcontent",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // jclass ::= PUBLIC CLASS ID jherence LBRACE jinternal_block RBRACE 
            {
              JClass RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Label h = (Label)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ldleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<JDef> ld = (List<JDef>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                Position initPos = new Position(idleft, idright);
                h = h != null ? h : new Label(JClass.FATHER_OBJECT_CLASS, initPos);
                RESULT = new JClass(
                    new Label(id, initPos),
                    h, ld
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jclass",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // jherence ::= EXTENDS ID 
            {
              Label RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new Label(
                    id, 
                    new Position(idleft, idright)
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jherence",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // jherence ::= 
            {
              Label RESULT =null;
		
                RESULT = null;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jherence",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // jinternal_block ::= jinternal_block jinternal 
            {
              List<JDef> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<JDef> l = (List<JDef>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JDef d = (JDef)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                l.add(d);
                RESULT = l;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jinternal_block",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // jinternal_block ::= 
            {
              List<JDef> RESULT =null;
		
                RESULT = new LinkedList<>();
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jinternal_block",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // jinternal ::= jmodificator jtype ID joptions_dec 
            {
              JDef RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		AccessMod a = (AccessMod)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		JType t = (JType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Typable d = (Typable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                d.defineType(t);
                JDef jdef = (JDef) d;
                jdef.setAccess(a);
                jdef.setName(new Label(id, new Position(idleft, idright)));
                RESULT = jdef;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jinternal",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // jinternal ::= jmodificator VOID ID jmethod_dec 
            {
              JDef RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		AccessMod a = (AccessMod)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JMethod m = (JMethod)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                m.setAccess(a);
                m.setName(new Label(id, new Position(idleft, idright)));
                m.setType(
                    new JType(new Position(vleft, vright))
                );
                RESULT = m;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jinternal",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // jinternal ::= jmodificator ID LPAREN jargs RPAREN LBRACE jstmts_block RBRACE 
            {
              JDef RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		AccessMod m = (AccessMod)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int laleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int laright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<JArg> la = (List<JArg>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<JStatement> ls = (List<JStatement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                RESULT = new JConstructor(
                    new Label(id, new Position(idleft, idright)),
                    m, la, ls
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jinternal",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // joptions_dec ::= SEMICOLON 
            {
              Typable RESULT =null;
		
                RESULT = new JField();
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("joptions_dec",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // joptions_dec ::= ASSIGNATION jexp SEMICOLON 
            {
              Typable RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		JExpression e = (JExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                JField field = new JField();
                field.setExpAssign(e);
                RESULT = field;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("joptions_dec",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // joptions_dec ::= jmethod_dec 
            {
              Typable RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JMethod m = (JMethod)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = m;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("joptions_dec",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // jmethod_dec ::= LPAREN jargs RPAREN LBRACE jstmts_block RBRACE 
            {
              JMethod RESULT =null;
		int laleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int laright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<JArg> la = (List<JArg>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<JStatement> ls = (List<JStatement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                RESULT = new JMethod(null, null, la, ls);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jmethod_dec",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // jargs ::= jlist_args 
            {
              List<JArg> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<JArg> l = (List<JArg>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = l;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jargs",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // jargs ::= 
            {
              List<JArg> RESULT =null;
		
                RESULT = new LinkedList<>();
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jargs",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // jlist_args ::= jlist_args COMMA jarg 
            {
              List<JArg> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<JArg> l = (List<JArg>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JArg a = (JArg)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                l.add(a);
                RESULT = l;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jlist_args",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // jlist_args ::= jarg 
            {
              List<JArg> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JArg a = (JArg)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                List<JArg> list = new LinkedList<>();
                list.add(a);
                RESULT = list;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jlist_args",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // jarg ::= jtype ID 
            {
              JArg RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		JType t = (JType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JArg(
                    t, new Label(id, new Position(idleft, idright))
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarg",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // jstmts_block ::= jstmts_block jstmt 
            {
              List<JStatement> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<JStatement> l = (List<JStatement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JStatement s = (JStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                l.add(s);
                RESULT = l;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jstmts_block",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // jstmts_block ::= 
            {
              List<JStatement> RESULT =null;
		
                RESULT = new LinkedList<>();
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jstmts_block",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // jstmt ::= jcontrol_stmts 
            {
              JStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JStatement s = (JStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jstmt",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // jstmt ::= jsimple_stmts SEMICOLON 
            {
              JStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		JStatement s = (JStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jstmt",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // jstmt ::= jdeclaration SEMICOLON 
            {
              JStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		JDeclaration s = (JDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jstmt",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // jstmt ::= jmethod_use SEMICOLON 
            {
              JStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		JMethodUseStmt s = (JMethodUseStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jstmt",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // jstmt ::= jconstruct_use SEMICOLON 
            {
              JStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		JConstructUse s = (JConstructUse)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jstmt",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // jstmt ::= jassign SEMICOLON 
            {
              JStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		JAssignAst s = (JAssignAst)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jstmt",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // jstmt ::= jdefinite_funcs SEMICOLON 
            {
              JStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		JDefiniteFunc s = (JDefiniteFunc)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jstmt",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // jcontrol_stmts ::= jif_stmt 
            {
              JStatement RESULT =null;
		int pileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int piright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JPassIf pi = (JPassIf)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = astGen.transformPassJIf(pi);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jcontrol_stmts",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // jcontrol_stmts ::= jwhile_stmt 
            {
              JStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JWhileAst s = (JWhileAst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jcontrol_stmts",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // jcontrol_stmts ::= jdo_while_stmt 
            {
              JStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JDoWhileAst s = (JDoWhileAst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jcontrol_stmts",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // jcontrol_stmts ::= jfor_stmt 
            {
              JStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JForAst s = (JForAst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jcontrol_stmts",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // jcontrol_stmts ::= jswitch_stmt 
            {
              JStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JSwitchAst s = (JSwitchAst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jcontrol_stmts",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // jsimple_stmts ::= BREAK 
            {
              JStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JSimpleStmt(
                    new Position(sleft, sright), true
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jsimple_stmts",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // jsimple_stmts ::= CONTINUE 
            {
              JStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JSimpleStmt(
                    new Position(sleft, sright), false
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jsimple_stmts",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // jsimple_stmts ::= RETURN jexp 
            {
              JStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int peleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int peright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JExpression pe = (JExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JReturnStmt(
                    new Position(sleft, sright), pe
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jsimple_stmts",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // jdefinite_funcs ::= PRINT LPAREN jexp_list RPAREN 
            {
              JDefiniteFunc RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lpeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<JExpression> lpe = (List<JExpression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                RESULT = new JDefiniteFunc(
                    new Position(pleft, pright), lpe, false
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jdefinite_funcs",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // jdefinite_funcs ::= PRINTLN LPAREN jexp_list RPAREN 
            {
              JDefiniteFunc RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lpeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<JExpression> lpe = (List<JExpression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                RESULT = new JDefiniteFunc(
                    new Position(pleft, pright), lpe, true
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jdefinite_funcs",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // jif_stmt ::= IF LPAREN jexp RPAREN LBRACE jstmts_block RBRACE jelif_stmt 
            {
              JPassIf RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		JExpression e = (JExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<JStatement> ls = (List<JStatement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int piright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JPassIf pi = (JPassIf)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = astGen.generateJPassIf(
                    pi,
                    new JIfAst(
                        new Position(ileft, iright),
                        e, ls
                    )
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jif_stmt",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // jelif_stmt ::= ELSE LBRACE jstmts_block RBRACE 
            {
              JPassIf RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<JStatement> ls = (List<JStatement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                JElseAst elseStmt = new JElseAst(
                    new Position(eleft, eright),
                    ls
                );
                RESULT = new JPassIf(elseStmt);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jelif_stmt",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // jelif_stmt ::= ELSE jif_stmt 
            {
              JPassIf RESULT =null;
		int pileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int piright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JPassIf pi = (JPassIf)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = pi;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jelif_stmt",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // jelif_stmt ::= 
            {
              JPassIf RESULT =null;
		
                RESULT = new JPassIf();
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jelif_stmt",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // jwhile_stmt ::= WHILE LPAREN jexp RPAREN LBRACE jstmts_block RBRACE 
            {
              JWhileAst RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		JExpression e = (JExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<JStatement> ls = (List<JStatement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                RESULT = new JWhileAst(
                    new Position(wleft, wright),
                    e, ls
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jwhile_stmt",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // jdo_while_stmt ::= DO LBRACE jstmts_block RBRACE WHILE LPAREN jexp RPAREN SEMICOLON 
            {
              JDoWhileAst RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		List<JStatement> ls = (List<JStatement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		JExpression e = (JExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                RESULT = new JDoWhileAst(
                    new Position(dleft, dright),
                    e, ls
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jdo_while_stmt",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // jfor_stmt ::= FOR RPAREN jfor_reduced_stmt SEMICOLON jexp SEMICOLON jfor_reduced_stmt RPAREN LBRACE jstmts_block RBRACE 
            {
              JForAst RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		JStatement s1 = (JStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		JExpression e = (JExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		JStatement s2 = (JStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<JStatement> ls = (List<JStatement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                RESULT = new JForAst(
                    new Position(fleft, fright),
                    s1, e, s2, ls
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jfor_stmt",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // jfor_reduced_stmt ::= jdeclaration 
            {
              JStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JDeclaration s = (JDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s;    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jfor_reduced_stmt",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // jfor_reduced_stmt ::= jmethod_use 
            {
              JStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JMethodUseStmt s = (JMethodUseStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s;    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jfor_reduced_stmt",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // jfor_reduced_stmt ::= jassign 
            {
              JStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JAssignAst s = (JAssignAst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s;    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jfor_reduced_stmt",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // jfor_reduced_stmt ::= 
            {
              JStatement RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jfor_reduced_stmt",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // jswitch_stmt ::= SWITCH LPAREN jexp RPAREN LBRACE jswitch_cases RBRACE 
            {
              JSwitchAst RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		JExpression e = (JExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<JCase> lc = (List<JCase>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                RESULT = new JSwitchAst(
                    new Position(sleft, sright),
                    e, lc
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jswitch_stmt",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // jswitch_cases ::= jswitch_cases jcase 
            {
              List<JCase> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<JCase> l = (List<JCase>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JCase c = (JCase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                l.add(c);
                RESULT = l;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jswitch_cases",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // jswitch_cases ::= jcase 
            {
              List<JCase> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JCase c = (JCase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                List<JCase> list = new LinkedList<>();
                list.add(c);
                RESULT = list;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jswitch_cases",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // jcase ::= CASE jexp COLON jstmts_block 
            {
              JCase RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		JExpression e = (JExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<JStatement> ls = (List<JStatement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JCase(
                    new Position(cleft, cright),
                    e, ls
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jcase",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // jcase ::= DEFAULT COLON jstmts_block 
            {
              JCase RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<JStatement> ls = (List<JStatement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JCase(
                    new Position(dleft, dright),
                    ls
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jcase",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // jassign ::= ID ASSIGNATION jexp 
            {
              JAssignAst RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JExpression e = (JExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Position initPos = new Position(idleft,idright);
                RESULT = new JAssignAst(
                    initPos,
                    astGen.genListInv(
                        new JVarUse(
                            new Label(id, initPos),
                            JContextRef.Local
                        )
                    ),
                    e
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jassign",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // jassign ::= THIS jaccess ASSIGNATION jexp 
            {
              JAssignAst RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<JInvocation> li = (List<JInvocation>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JExpression e = (JExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Position initPos = new Position(tleft, tright);
                RESULT = new JAssignAst(
                    new Position(tleft, tright),
                    li, e, JContextRef.FromObject
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jassign",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // jassign ::= SUPER jaccess ASSIGNATION jexp 
            {
              JAssignAst RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<JInvocation> li = (List<JInvocation>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JExpression e = (JExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JAssignAst(
                    new Position(sleft, sright),
                    li, e, JContextRef.FromFather
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jassign",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // jassign ::= ID jaccess ASSIGNATION jexp 
            {
              JAssignAst RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<JInvocation> li = (List<JInvocation>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JExpression e = (JExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Position initPos = new Position(ileft, iright);
                RESULT = new JAssignAst(
                    initPos,
                    astGen.genListInv(
                        li, 
                        new JVarUse(
                            new Label(i, initPos), 
                            JContextRef.Local
                        )
                    ),
                    e
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jassign",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // jassign ::= ID LPAREN RPAREN jaccess ASSIGNATION jexp 
            {
              JAssignAst RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<JInvocation> li = (List<JInvocation>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JExpression e = (JExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Position initPos = new Position(ileft, iright);
                RESULT = new JAssignAst(
                    initPos,
                    astGen.genListInv(
                        li, 
                        new JMethodUse(
                            new Label(i, initPos),
                            JContextRef.Local
                        )
                    ),
                    e
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jassign",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // jassign ::= ID LPAREN jexp_list RPAREN jaccess ASSIGNATION jexp 
            {
              JAssignAst RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<JExpression> args = (List<JExpression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<JInvocation> li = (List<JInvocation>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JExpression e = (JExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Position initPos = new Position(ileft, iright);
                RESULT = new JAssignAst(
                    initPos,
                    astGen.genListInv(
                        li, 
                        new JMethodUse(
                            new Label(i, initPos),
                            JContextRef.Local, args
                        )
                    ),
                    e
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jassign",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // jassign ::= ID LPAREN RPAREN jarray_access ASSIGNATION jexp 
            {
              JAssignAst RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int acleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int acright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<JExpression> ac = (List<JExpression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JExpression e = (JExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Position initPos = new Position(ileft, iright);
                RESULT = new JAssignAst(
                    initPos,
                    astGen.genListInv(
                        new JArrayFMUse(
                            new Label(i, initPos),
                            JContextRef.Local, ac
                        )
                    ),
                    e
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jassign",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // jassign ::= ID LPAREN RPAREN jarray_access jaccess ASSIGNATION jexp 
            {
              JAssignAst RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int acleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int acright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<JExpression> ac = (List<JExpression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<JInvocation> li = (List<JInvocation>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JExpression e = (JExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Position initPos = new Position(ileft, iright);
                RESULT = new JAssignAst(
                    initPos,
                    astGen.genListInv(
                        li, new JArrayFMUse(
                            new Label(i, initPos),
                            JContextRef.Local, ac
                        )
                    ),
                    e
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jassign",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // jassign ::= ID LPAREN jexp_list RPAREN jarray_access ASSIGNATION jexp 
            {
              JAssignAst RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<JExpression> args = (List<JExpression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int acleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int acright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<JExpression> ac = (List<JExpression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JExpression e = (JExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Position initPos = new Position(ileft, iright);
                RESULT = new JAssignAst(
                    initPos,
                    astGen.genListInv(
                        new JArrayFMUse(
                            new Label(i, initPos),
                            JContextRef.Local, args, ac
                        )
                    ),
                    e
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jassign",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // jassign ::= ID LPAREN jexp_list RPAREN jarray_access jaccess ASSIGNATION jexp 
            {
              JAssignAst RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		List<JExpression> args = (List<JExpression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int acleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int acright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<JExpression> ac = (List<JExpression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<JInvocation> li = (List<JInvocation>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JExpression e = (JExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Position initPos = new Position(ileft, iright);
                RESULT = new JAssignAst(
                    initPos,
                    astGen.genListInv(
                        li, new JArrayFMUse(
                            new Label(i, initPos),
                            JContextRef.Local, args, ac
                        )
                    ),
                    e
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jassign",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // jassign ::= ID jarray_access jaccess ASSIGNATION jexp SEMICOLON 
            {
              JAssignAst RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int acleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int acright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<JExpression> ac = (List<JExpression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<JInvocation> li = (List<JInvocation>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		JExpression e = (JExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                Position initPos = new Position(ileft, iright);
                RESULT = new JAssignAst(
                    initPos,
                    astGen.genListInv(
                        li, 
                        new JArrayUse(
                            new Label(i, initPos),
                            JContextRef.Local, ac
                        )
                    ),
                    e
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jassign",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // jassign ::= ID jarray_access ASSIGNATION jexp SEMICOLON 
            {
              JAssignAst RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int acleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int acright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<JExpression> ac = (List<JExpression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		JExpression e = (JExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                Position initPos = new Position(ileft, iright);
                RESULT = new JAssignAst(
                    initPos,
                    astGen.genListInv(
                        new JArrayUse(
                            new Label(i, initPos), 
                            JContextRef.Local, ac
                        )
                    ),
                    e
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jassign",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // jdeclaration ::= jtype ID ASSIGNATION jexp 
            {
              JDeclaration RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		JType t = (JType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int peleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int peright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JExpression pe = (JExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JDeclaration(
                    new Position(ileft, iright),
                    i, t, pe
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jdeclaration",83, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // jdeclaration ::= jtype ID 
            {
              JDeclaration RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		JType t = (JType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JDeclaration(
                    new Position(ileft, iright),
                    i, t
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jdeclaration",83, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // jmethod_use ::= THIS jaccess 
            {
              JMethodUseStmt RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<JInvocation> li = (List<JInvocation>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JMethodUseStmt(
                        new Position(tleft, tright),
                    li, JContextRef.FromObject
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jmethod_use",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // jmethod_use ::= SUPER jaccess 
            {
              JMethodUseStmt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<JInvocation> li = (List<JInvocation>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JMethodUseStmt(
                        new Position(sleft, sright),
                    li, JContextRef.FromFather
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jmethod_use",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // jmethod_use ::= ID jaccess 
            {
              JMethodUseStmt RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<JInvocation> li = (List<JInvocation>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Position initPosition = new Position(idleft, idright);
                RESULT = new JMethodUseStmt(
                    initPosition,
                    astGen.genListInv(
                        li, 
                        new JVarUse(
                            new Label(id, initPosition), 
                            JContextRef.Local
                        )
                    )
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jmethod_use",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // jmethod_use ::= ID LPAREN RPAREN 
            {
              JMethodUseStmt RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                Position initPosition = new Position(idleft, idright);
                RESULT = new JMethodUseStmt(
                    initPosition, 
                    astGen.genListInv(
                        new JMethodUse(
                            new Label(id, initPosition),
                            JContextRef.Local
                        )
                    )
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jmethod_use",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // jmethod_use ::= ID LPAREN jexp_list RPAREN 
            {
              JMethodUseStmt RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<JExpression> el = (List<JExpression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                Position initPosition = new Position(idleft, idright);
                RESULT = new JMethodUseStmt(
                    initPosition, 
                    astGen.genListInv(
                        new JMethodUse(
                            new Label(id, initPosition), 
                            JContextRef.Local, el
                        )
                    )
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jmethod_use",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // jmethod_use ::= ID LPAREN RPAREN jaccess 
            {
              JMethodUseStmt RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<JInvocation> li = (List<JInvocation>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Position initPosition = new Position(idleft, idright);
                RESULT = new JMethodUseStmt(
                    initPosition, 
                    astGen.genListInv(
                        li, 
                        new JMethodUse(
                            new Label(id, initPosition),
                            JContextRef.Local
                        )
                    )
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jmethod_use",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // jmethod_use ::= ID LPAREN jexp_list RPAREN jaccess 
            {
              JMethodUseStmt RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<JExpression> el = (List<JExpression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<JInvocation> li = (List<JInvocation>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Position initPosition = new Position(idleft, idright);
                RESULT = new JMethodUseStmt(
                    initPosition, 
                    astGen.genListInv(
                        li, 
                        new JMethodUse(
                            new Label(id, initPosition), 
                            JContextRef.Local, el
                        )
                    )
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jmethod_use",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // jmethod_use ::= ID LPAREN RPAREN jarray_access jaccess 
            {
              JMethodUseStmt RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int acleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int acright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<JExpression> ac = (List<JExpression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<JInvocation> li = (List<JInvocation>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Position initPosition = new Position(idleft, idright);
                RESULT = new JMethodUseStmt(
                    initPosition, 
                    astGen.genListInv(
                        li, new JArrayFMUse(
                            new Label(id, initPosition), 
                            JContextRef.Local, ac
                        )
                    )
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jmethod_use",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // jmethod_use ::= ID LPAREN jexp_list RPAREN jarray_access jaccess 
            {
              JMethodUseStmt RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<JExpression> args = (List<JExpression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int acleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int acright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<JExpression> ac = (List<JExpression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<JInvocation> li = (List<JInvocation>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Position initPosition = new Position(idleft, idright);
                RESULT = new JMethodUseStmt(
                    initPosition, 
                    astGen.genListInv(
                        li, 
                        new JArrayFMUse(
                            new Label(id, initPosition),
                            JContextRef.Local,args, ac
                        )
                    )
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jmethod_use",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // jmethod_use ::= ID jarray_access jaccess 
            {
              JMethodUseStmt RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int acleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int acright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<JExpression> ac = (List<JExpression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<JInvocation> li = (List<JInvocation>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Position initPosition = new Position(idleft, idright);
                RESULT = new JMethodUseStmt(
                    initPosition, 
                    astGen.genListInv(
                        li, new JArrayUse(
                            new Label(id, initPosition),
                            JContextRef.Local, ac
                        )
                    )
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jmethod_use",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // jconstruct_use ::= THIS LPAREN RPAREN 
            {
              JConstructUse RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                RESULT = new JConstructUse(
                    new Position(tleft, tright),
                    false
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jconstruct_use",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // jconstruct_use ::= THIS LPAREN jexp_list RPAREN 
            {
              JConstructUse RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lpeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<JExpression> lpe = (List<JExpression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                RESULT = new JConstructUse(
                    new Position(tleft, tright),
                    lpe, false
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jconstruct_use",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // jconstruct_use ::= SUPER LPAREN RPAREN 
            {
              JConstructUse RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                RESULT = new JConstructUse(
                    new Position(sleft, sright),
                    true
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jconstruct_use",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // jconstruct_use ::= SUPER LPAREN jexp_list RPAREN 
            {
              JConstructUse RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lpeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<JExpression> lpe = (List<JExpression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                RESULT = new JConstructUse(
                    new Position(sleft, sright),
                    lpe, true
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jconstruct_use",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // jaccess ::= DOT jcomplex_access jaccess 
            {
              List<JInvocation> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		JInvocation i = (JInvocation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<JInvocation> l = (List<JInvocation>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                l.add(0, i);
                RESULT = l;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jaccess",81, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // jaccess ::= DOT jcomplex_access 
            {
              List<JInvocation> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JInvocation i = (JInvocation)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                List<JInvocation> list = new LinkedList<>();
                list.add(i);
                RESULT = list;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jaccess",81, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // jcomplex_access ::= ID 
            {
              JInvocation RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JVarUse(
                    new Label(i, new Position(ileft, iright)),
                    JContextRef.Local
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jcomplex_access",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // jcomplex_access ::= ID LPAREN RPAREN 
            {
              JInvocation RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                RESULT = new JMethodUse(
                    new Label(i, new Position(ileft, iright)),
                    JContextRef.Local
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jcomplex_access",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // jcomplex_access ::= ID LPAREN RPAREN jarray_access 
            {
              JInvocation RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int acleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int acright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<JExpression> ac = (List<JExpression>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JArrayFMUse(
                    new Label(i, new Position(ileft, iright)),
                    JContextRef.Local, ac
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jcomplex_access",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // jcomplex_access ::= ID LPAREN jexp_list RPAREN 
            {
              JInvocation RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<JExpression> el = (List<JExpression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                RESULT = new JMethodUse(
                    new Label(i, new Position(ileft, iright)),
                    JContextRef.Local, el
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jcomplex_access",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // jcomplex_access ::= ID LPAREN jexp_list RPAREN jarray_access 
            {
              JInvocation RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<JExpression> el = (List<JExpression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int acleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int acright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<JExpression> ac = (List<JExpression>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JArrayFMUse(
                    new Label(i, new Position(ileft, iright)),
                    JContextRef.Local, el, ac
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jcomplex_access",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // jcomplex_access ::= ID jarray_access 
            {
              JInvocation RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int acleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int acright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<JExpression> ac = (List<JExpression>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JArrayUse(
                    new Label(i, new Position(ileft, iright)),
                    JContextRef.Local, ac
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jcomplex_access",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // jexp ::= jexp AND jexp 
            {
              JExpression RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		JExpression p1 = (JExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JExpression p2 = (JExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JOperation(
                    new Position(oleft, oright), 
                    DefiniteOperation.And, 
                    p1, p2
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jexp",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // jexp ::= jexp OR jexp 
            {
              JExpression RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		JExpression p1 = (JExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JExpression p2 = (JExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JOperation(
                    new Position(oleft, oright), 
                    DefiniteOperation.Or, 
                    p1, p2
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jexp",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // jexp ::= NOT jexp 
            {
              JExpression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JExpression p = (JExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JUnaryOp(
                    new Position(oleft, oright),
                    p, DefiniteOperation.Not
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jexp",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // jexp ::= jbool_exp 
            {
              JExpression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JExpression e = (JExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = e;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jexp",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // jbool_exp ::= jarit_exp EQUALS jarit_exp 
            {
              JExpression RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		JExpression p1 = (JExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JExpression p2 = (JExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JOperation(
                    new Position(oleft, oright), 
                    DefiniteOperation.EqualsTo, 
                    p1, p2
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jbool_exp",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // jbool_exp ::= jarit_exp DIFFERENT jarit_exp 
            {
              JExpression RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		JExpression p1 = (JExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JExpression p2 = (JExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JOperation(
                    new Position(oleft, oright), 
                    DefiniteOperation.DifferentTo, 
                    p1, p2
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jbool_exp",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // jbool_exp ::= jarit_exp GRATER jarit_exp 
            {
              JExpression RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		JExpression p1 = (JExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JExpression p2 = (JExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JOperation(
                    new Position(oleft, oright), 
                    DefiniteOperation.GraterThan, 
                    p1, p2
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jbool_exp",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // jbool_exp ::= jarit_exp LESS jarit_exp 
            {
              JExpression RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		JExpression p1 = (JExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JExpression p2 = (JExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JOperation(
                    new Position(oleft, oright), 
                    DefiniteOperation.LessThan, 
                    p1, p2
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jbool_exp",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // jbool_exp ::= jarit_exp GRATER_EQUALS jarit_exp 
            {
              JExpression RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		JExpression p1 = (JExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JExpression p2 = (JExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JOperation(
                    new Position(oleft, oright), 
                    DefiniteOperation.GraterEq, 
                    p1, p2
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jbool_exp",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // jbool_exp ::= jarit_exp LESS_EQUALS jarit_exp 
            {
              JExpression RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		JExpression p1 = (JExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JExpression p2 = (JExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JOperation(
                    new Position(oleft, oright), 
                    DefiniteOperation.LessEq, 
                    p1, p2
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jbool_exp",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // jbool_exp ::= jarit_exp 
            {
              JExpression RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JExpression p = (JExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = p;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jbool_exp",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // jarit_exp ::= error PLUS error 
            {
              JExpression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarit_exp",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // jarit_exp ::= error MINUS error 
            {
              JExpression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarit_exp",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // jarit_exp ::= error TIMES error 
            {
              JExpression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarit_exp",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // jarit_exp ::= error DIV error 
            {
              JExpression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarit_exp",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // jarit_exp ::= error BARRA error 
            {
              JExpression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarit_exp",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // jarit_exp ::= error MOD error 
            {
              JExpression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarit_exp",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // jarit_exp ::= jarit_exp PLUS jarit_exp 
            {
              JExpression RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		JExpression p1 = (JExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JExpression p2 = (JExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JOperation(
                    new Position(oleft, oright), 
                    DefiniteOperation.Addition, 
                    p1, p2
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarit_exp",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // jarit_exp ::= jarit_exp MINUS jarit_exp 
            {
              JExpression RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		JExpression p1 = (JExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JExpression p2 = (JExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JOperation(
                    new Position(oleft, oright), 
                    DefiniteOperation.Substraction, 
                    p1, p2
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarit_exp",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // jarit_exp ::= jarit_exp TIMES jarit_exp 
            {
              JExpression RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		JExpression p1 = (JExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JExpression p2 = (JExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JOperation(
                    new Position(oleft, oright), 
                    DefiniteOperation.Multiplication, 
                    p1, p2
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarit_exp",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // jarit_exp ::= jarit_exp DIV jarit_exp 
            {
              JExpression RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		JExpression p1 = (JExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JExpression p2 = (JExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JOperation(
                    new Position(oleft, oright), 
                    DefiniteOperation.Division, 
                    p1, p2
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarit_exp",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // jarit_exp ::= jarit_exp MOD jarit_exp 
            {
              JExpression RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		JExpression p1 = (JExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JExpression p2 = (JExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JOperation(
                    new Position(oleft, oright), 
                    DefiniteOperation.Module, 
                    p1, p2
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarit_exp",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // jarit_exp ::= jarit_exp POWER jarit_exp 
            {
              JExpression RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		JExpression p1 = (JExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JExpression p2 = (JExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JOperation(
                    new Position(oleft, oright), 
                    DefiniteOperation.Power, 
                    p1, p2
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarit_exp",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // jarit_exp ::= jliterals 
            {
              JExpression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JLiteral l = (JLiteral)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = l;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarit_exp",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // jarit_exp ::= NULL_LIT 
            {
              JExpression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JNull(
                    new Position(nleft, nright)
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarit_exp",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // jarit_exp ::= ID jarray_access 
            {
              JExpression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int acleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int acright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<JExpression> ac = (List<JExpression>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JInvocationExp(astGen.genListInv(
                    new JArrayUse(
                        new Label(i, new Position(ileft, iright)),
                        JContextRef.Local, ac
                    )
                ));
                    
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarit_exp",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // jarit_exp ::= ID jarray_access jaccess 
            {
              JExpression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int acleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int acright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<JExpression> ac = (List<JExpression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<JInvocation> li = (List<JInvocation>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JInvocationExp(astGen.genListInv(
                    li,
                    new JArrayUse(
                        new Label(i, new Position(ileft, iright)),
                        JContextRef.Local, ac
                    )
                ));
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarit_exp",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // jarit_exp ::= ID LPAREN jexp_list RPAREN 
            {
              JExpression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<JExpression> args = (List<JExpression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                RESULT = new JInvocationExp(astGen.genListInv(
                    new JMethodUse(
                        new Label(i, new Position(ileft, iright)),
                        JContextRef.Local, args
                    )
                ));
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarit_exp",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // jarit_exp ::= ID LPAREN RPAREN 
            {
              JExpression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                RESULT = new JInvocationExp(astGen.genListInv(
                    new JMethodUse(
                        new Label(i, new Position(ileft, iright)),
                        JContextRef.Local
                    )
                ));
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarit_exp",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // jarit_exp ::= ID LPAREN jexp_list RPAREN jaccess 
            {
              JExpression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<JExpression> l = (List<JExpression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<JInvocation> li = (List<JInvocation>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JInvocationExp(astGen.genListInv(
                    li, 
                    new JMethodUse(
                        new Label(i, new Position(ileft, iright)),
                        JContextRef.Local, l
                    )
                ));
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarit_exp",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */
  /** Method 1 with the actual generated action code for actions 300 to 600. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000001(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // jarit_exp ::= ID LPAREN RPAREN jaccess 
            {
              JExpression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<JInvocation> li = (List<JInvocation>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JInvocationExp(astGen.genListInv(
                    li, 
                    new JMethodUse(
                        new Label(i, new Position(ileft, iright)),
                        JContextRef.Local
                    )
                ));
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarit_exp",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // jarit_exp ::= ID jaccess 
            {
              JExpression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<JInvocation> li = (List<JInvocation>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JInvocationExp(astGen.genListInv(
                    li,
                    new JVarUse(
                        new Label(i, new Position(ileft, iright)),
                        JContextRef.Local
                    )
                ));
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarit_exp",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // jarit_exp ::= ID 
            {
              JExpression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                List<JInvocation> invlist = astGen.genListInv(
                    new JVarUse(
                        new Label(i, new Position(ileft, iright)),
                        JContextRef.Local
                    )
                );
                RESULT = new JInvocationExp(invlist);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarit_exp",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // jarit_exp ::= THIS jaccess 
            {
              JExpression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<JInvocation> l = (List<JInvocation>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JInvocationExp(
                    l, JContextRef.FromObject
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarit_exp",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // jarit_exp ::= SUPER jaccess 
            {
              JExpression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<JInvocation> l = (List<JInvocation>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JInvocationExp(
                    l, JContextRef.FromFather
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarit_exp",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // jarit_exp ::= NEW ID LPAREN RPAREN 
            {
              JExpression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                RESULT = new JCreateClassE(
                    new Position(nleft, nright), i
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarit_exp",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // jarit_exp ::= NEW ID LPAREN jexp_list RPAREN 
            {
              JExpression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<JExpression> el = (List<JExpression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                RESULT = new JCreateClassE(
                    new Position(nleft, nright), i, el
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarit_exp",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // jarit_exp ::= jinput_func 
            {
              JExpression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JExpression e = (JExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = e;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarit_exp",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // jarit_exp ::= LPAREN jexp RPAREN 
            {
              JExpression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		JExpression e = (JExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                RESULT = e;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarit_exp",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // jarit_exp ::= PLUS jarit_exp 
            {
              JExpression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int peleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int peright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JExpression pe = (JExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JUnaryOp(
                    new Position(oleft, oright), 
                    pe, DefiniteOperation.Addition
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarit_exp",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // jarit_exp ::= MINUS jarit_exp 
            {
              JExpression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int peleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int peright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JExpression pe = (JExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JUnaryOp(
                    new Position(oleft, oright),
                    pe, DefiniteOperation.Substraction
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarit_exp",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // jinput_func ::= CHAR_INPUT LPAREN RPAREN 
            {
              JExpression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                RESULT = new JInputExp(
                    new Position(ileft, iright),
                    JTypeInput.Char
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jinput_func",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // jinput_func ::= INT_INPUT LPAREN RPAREN 
            {
              JExpression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                RESULT = new JInputExp(
                    new Position(ileft, iright),
                    JTypeInput.Int
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jinput_func",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // jinput_func ::= FLOAT_INPUT LPAREN RPAREN 
            {
              JExpression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                RESULT = new JInputExp(
                    new Position(ileft, iright),
                    JTypeInput.Float
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jinput_func",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // main_program ::= MAIN_SECTION cimports cconst_b cvars_b VOID MAIN LPAREN RPAREN LBRACE cstmts RBRACE 
            {
              CMain RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		List<Label> i = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		List<CConstDec> c = (List<CConstDec>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		List<CDef> v = (List<CDef>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<CStatement> ls = (List<CStatement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                RESULT = new CMain(new CImports(i), c, v, ls);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("main_program",86, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // ctype ::= INT_TKN 
            {
              PrimitiveType RESULT =null;
		 RESULT = PrimitiveType.IntegerPT; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ctype",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // ctype ::= CHAR_TKN 
            {
              PrimitiveType RESULT =null;
		 RESULT = PrimitiveType.CharPT; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ctype",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // ctype ::= FLOAT_TKN 
            {
              PrimitiveType RESULT =null;
		 RESULT = PrimitiveType.RealPT; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ctype",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // ctype ::= STRING_TKN 
            {
              PrimitiveType RESULT =null;
		 RESULT = PrimitiveType.StringPT; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ctype",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // ctype ::= BOOLEAN_TKN 
            {
              PrimitiveType RESULT =null;
		 RESULT = PrimitiveType.BooleanPT; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ctype",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // carray_dims ::= carray_dims LBRACK cexp RBRACK 
            {
              List<CExp> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<CExp> l = (List<CExp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		CExp e = (CExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                l.add(e);
                RESULT = l;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("carray_dims",103, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // carray_dims ::= LBRACK cexp RBRACK 
            {
              List<CExp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		CExp e = (CExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                List<CExp> list = new LinkedList<>();
                list.add(e);
                RESULT = list;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("carray_dims",103, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // cparams ::= cparams COMMA cexp 
            {
              List<CExp> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<CExp> l = (List<CExp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CExp e = (CExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                l.add(e);
                RESULT = l;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cparams",104, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // cparams ::= cexp 
            {
              List<CExp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CExp e = (CExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                List<CExp> list = new LinkedList<>();
                list.add(e);
                RESULT = list;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cparams",104, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // cliterals ::= STRING_LIT 
            {
              CLiteral RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new CLiteral(
                    new Position(lleft, lright),
                    l, PrimitiveType.StringPT
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cliterals",105, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // cliterals ::= FLOAT_LIT 
            {
              CLiteral RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		float l = (float)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new CLiteral(
                    new Position(lleft, lright), 
                    l, PrimitiveType.RealPT
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cliterals",105, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // cliterals ::= INTEGER_LIT 
            {
              CLiteral RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer l = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new CLiteral(
                    new Position(lleft, lright),
                    l, PrimitiveType.IntegerPT
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cliterals",105, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // cliterals ::= BOOLEAN_LIT 
            {
              CLiteral RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer l = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new CLiteral(
                    new Position(lleft, lright),
                    l, PrimitiveType.BooleanPT
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cliterals",105, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // cliterals ::= CHAR_LIT 
            {
              CLiteral RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Character l = (Character)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new CLiteral(
                    new Position(lleft, lright),
                    l, PrimitiveType.CharPT
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cliterals",105, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // cimports ::= cimports HASH INCLUDE STRING_LIT 
            {
              List<Label> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Label current = new Label(s, new Position(ileft, iright));
                l.add(current);
                RESULT = l;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cimports",88, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // cimports ::= 
            {
              List<Label> RESULT =null;
		
                RESULT = new LinkedList<>();
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cimports",88, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // cconst_b ::= cconst_b CONST ctype ID ASSIGNATION cexp SEMICOLON 
            {
              List<CConstDec> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		List<CConstDec> l = (List<CConstDec>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int ptleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		PrimitiveType pt = (PrimitiveType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		CExp e = (CExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                l.add(new CConstDec(
                    new Label(i, new Position(ileft, iright)),
                    pt, e
                ));
                RESULT = l;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cconst_b",106, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // cconst_b ::= 
            {
              List<CConstDec> RESULT =null;
		
                RESULT = new LinkedList<>();
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cconst_b",106, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // cvars_b ::= cvars_dec cvars_b 
            {
              List<CDef> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		CDef d = (CDef)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<CDef> l = (List<CDef>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                l.add(0,d);
                RESULT = l;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cvars_b",107, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // cvars_b ::= 
            {
              List<CDef> RESULT =null;
		
                RESULT = new LinkedList<>();
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cvars_b",107, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // cvars_dec ::= ctype ID SEMICOLON 
            {
              CDef RESULT =null;
		int ptleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		PrimitiveType pt = (PrimitiveType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                RESULT = new CVarDec(
                    new Label(i, new Position(ileft, iright)),
                    pt
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cvars_dec",108, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // cvars_dec ::= ctype ID ASSIGNATION cexp SEMICOLON 
            {
              CDef RESULT =null;
		int ptleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		PrimitiveType pt = (PrimitiveType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		CExp e = (CExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                RESULT = new CVarDec(
                    new Label(i, new Position(ileft, iright)),
                    pt, e
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cvars_dec",108, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // cvars_dec ::= ctype ID carray_dims SEMICOLON 
            {
              CDef RESULT =null;
		int ptleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		PrimitiveType pt = (PrimitiveType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<CExp> d = (List<CExp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                RESULT = new CArrayDec(
                    new Label(i, new Position(ileft, iright)),
                    pt, d
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cvars_dec",108, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // cvars_dec ::= c_jclass_init 
            {
              CDef RESULT =null;
		int cisleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cisright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List< ? extends CDef> cis = (List< ? extends CDef>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new CObjectsDec(
                     (List<CObjectDec>) cis
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cvars_dec",108, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // c_jclass_init ::= JAVA DOT ID c_java_construct 
            {
              List< ? extends CDef> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<CObjectDec> lc = (List<CObjectDec>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = astGen.setTypeCObject(
                    lc, new Label(t, new Position(tleft, tright)) 
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_jclass_init",111, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // c_jclass_init ::= JAVA DOT ID c_java_object_array 
            {
              List< ? extends CDef> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int laoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int laoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<CArrayObjDec> lao = (List<CArrayObjDec>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = astGen.setTypeArrayObject(
                    lao, new Label(t, new Position(tleft, tright))
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_jclass_init",111, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // c_java_construct ::= c_j_construct COMMA c_java_construct 
            {
              List<CObjectDec> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		CObjectDec c = (CObjectDec)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<CObjectDec> l = (List<CObjectDec>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                l.add(0, c);
                RESULT = l;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_java_construct",110, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // c_java_construct ::= c_j_construct SEMICOLON 
            {
              List<CObjectDec> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		CObjectDec c = (CObjectDec)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                List<CObjectDec> list = new LinkedList<>();
                list.add(c);
                RESULT = list;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_java_construct",110, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // c_j_construct ::= ID LPAREN RPAREN 
            {
              CObjectDec RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                RESULT = new CObjectDec(
                    new Label(i, new Position(ileft, iright))
                );   
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_j_construct",109, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // c_j_construct ::= ID LPAREN cparams RPAREN 
            {
              CObjectDec RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int leleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<CExp> le = (List<CExp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                RESULT = new CObjectDec(
                    new Label(i, new Position(ileft, iright)), 
                    le
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_j_construct",109, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // c_java_object_array ::= ID carray_dims COMMA c_java_object_array 
            {
              List<CArrayObjDec> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ldleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<CExp> ld = (List<CExp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<CArrayObjDec> l = (List<CArrayObjDec>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                l.add(new CArrayObjDec(
                    new Label(i, new Position(ileft, iright)),
                    ld
                ));
                RESULT = l;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_java_object_array",112, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // c_java_object_array ::= ID carray_dims SEMICOLON 
            {
              List<CArrayObjDec> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ldleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<CExp> ld = (List<CExp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                List<CArrayObjDec> list = new LinkedList<>();
                list.add(new CArrayObjDec(
                    new Label(i, new Position(ileft, iright)),
                    ld
                ));
                RESULT = list;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_java_object_array",112, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // cstmts ::= cstmts cstmt 
            {
              List<CStatement> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<CStatement> l = (List<CStatement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CStatement s = (CStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                l.add(s);
                RESULT = l;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cstmts",98, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // cstmts ::= 
            {
              List<CStatement> RESULT =null;
		
                RESULT = new LinkedList<>();
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cstmts",98, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // cstmt ::= ccontrol_stmts 
            {
              CStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CStatement s = (CStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cstmt",100, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // cstmt ::= csingle_stmt SEMICOLON 
            {
              CStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		CSimpleStmt s = (CSimpleStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cstmt",100, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // cstmt ::= cdef_functions_stmt SEMICOLON 
            {
              CStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		CStatement s = (CStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cstmt",100, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // cstmt ::= c_jinvocation SEMICOLON 
            {
              CStatement RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<CInvocation> li = (List<CInvocation>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                RESULT = new CObjectInv(li);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cstmt",100, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // cstmt ::= c_pinvocation SEMICOLON 
            {
              CStatement RESULT =null;
		int pileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int piright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		CMethodPass pi = (CMethodPass)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                RESULT = pi.toStmt();
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cstmt",100, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // cstmt ::= cassign SEMICOLON 
            {
              CStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		CAssign s = (CAssign)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cstmt",100, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // csingle_stmt ::= BREAK 
            {
              CSimpleStmt RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new CSimpleStmt(
                    new Position(bleft, bright), true
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("csingle_stmt",113, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // csingle_stmt ::= CONTINUE 
            {
              CSimpleStmt RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new CSimpleStmt(
                    new Position(cleft, cright), false
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("csingle_stmt",113, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // cdef_functions_stmt ::= SCANF LPAREN STRING_LIT COMMA AMPERSAND ID RPAREN 
            {
              CStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                RESULT = new CScanf(
                    new Position(sleft, sright),
                    new Label(m, new Position(mleft, mright)),
                    new Label(v, new Position(vleft, vright))
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cdef_functions_stmt",101, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // cdef_functions_stmt ::= PRINT LPAREN cparams RPAREN 
            {
              CStatement RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int leleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<CExp> le = (List<CExp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                RESULT = new CPrint(
                    new Position(pleft, pright),
                    le, false
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cdef_functions_stmt",101, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // cdef_functions_stmt ::= PRINTLN LPAREN cparams RPAREN 
            {
              CStatement RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int leleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<CExp> le = (List<CExp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                RESULT = new CPrint(
                    new Position(pleft, pright),
                    le, true
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cdef_functions_stmt",101, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // cdef_functions_stmt ::= CLEAR LPAREN RPAREN 
            {
              CStatement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                RESULT = new CClear(
                    new Position(cleft, cright)
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cdef_functions_stmt",101, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // cdef_functions_stmt ::= GETCH LPAREN RPAREN 
            {
              CStatement RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                RESULT = new CGetchStmt(
                    new Position(gleft, gright)
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cdef_functions_stmt",101, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // cdef_functions_stmt ::= PRINTF LPAREN STRING_LIT COMMA AMPERSAND ID RPAREN 
            {
              CStatement RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                RESULT = new CPrintF(
                    new Position(pleft, pright),
                    new Label(m, new Position(mleft, mright)),
                    new Label(i, new Position(ileft, iright))
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cdef_functions_stmt",101, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // ccontrol_stmts ::= cif_stmt 
            {
              CStatement RESULT =null;
		int pileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int piright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CPassIf pi = (CPassIf)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = astGen.transformPassCIf(pi);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ccontrol_stmts",102, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // ccontrol_stmts ::= cswitch_stmt 
            {
              CStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CSwitchAst s = (CSwitchAst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ccontrol_stmts",102, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // ccontrol_stmts ::= cfor_stmt 
            {
              CStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CForAst s = (CForAst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ccontrol_stmts",102, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // ccontrol_stmts ::= cwhile_stmt 
            {
              CStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CWhileAst s = (CWhileAst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ccontrol_stmts",102, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // ccontrol_stmts ::= cdo_while_stmt 
            {
              CStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CDoWhile s = (CDoWhile)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ccontrol_stmts",102, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // cassign ::= c_jinvocation ASSIGNATION cexp 
            {
              CAssign RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<CInvocation> li = (List<CInvocation>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CExp e = (CExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new CObjectAssign(
                    new Position(lileft, liright),
                    e, li
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cassign",117, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // cassign ::= ID ASSIGNATION cexp 
            {
              CAssign RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CExp e = (CExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new CVarAssign(
                    new Position(ileft, iright),
                    i, e
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cassign",117, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // cif_stmt ::= IF LPAREN cexp RPAREN LBRACE cstmts RBRACE celif_stmt 
            {
              CPassIf RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		CExp e = (CExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<CStatement> ls = (List<CStatement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int piright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CPassIf pi = (CPassIf)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = astGen.generateCPassIf(
                    pi,
                    new CIfAst(
                        new Position(ileft, iright),
                        e, ls
                    )
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cif_stmt",115, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // celif_stmt ::= ELSE cif_stmt 
            {
              CPassIf RESULT =null;
		int pileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int piright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CPassIf pi = (CPassIf)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = pi;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("celif_stmt",116, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // celif_stmt ::= ELSE LBRACE cstmts RBRACE 
            {
              CPassIf RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<CStatement> ls = (List<CStatement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                CElseAst elseStmt = new CElseAst(
                    new Position(eleft, eright),
                    ls
                );
                RESULT = new CPassIf(elseStmt);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("celif_stmt",116, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // celif_stmt ::= 
            {
              CPassIf RESULT =null;
		
                RESULT = new CPassIf();
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("celif_stmt",116, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // cswitch_stmt ::= SWITCH LPAREN cexp RPAREN LBRACE ccases RBRACE 
            {
              CSwitchAst RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		CExp e = (CExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<CCase> lc = (List<CCase>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                RESULT = new CSwitchAst(
                    new Position(sleft, sright),
                    e, lc
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cswitch_stmt",95, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // ccases ::= ccases ccase 
            {
              List<CCase> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<CCase> l = (List<CCase>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CCase c = (CCase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                l.add(c);
                RESULT = l;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ccases",96, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // ccases ::= ccase 
            {
              List<CCase> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CCase c = (CCase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                List<CCase> list = new LinkedList<>();
                list.add(c);
                RESULT = list;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ccases",96, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // ccase ::= CASE cexp COLON cstmts BREAK SEMICOLON 
            {
              CCase RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		CExp e = (CExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<CStatement> ls = (List<CStatement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                RESULT = new CCase(e, ls);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ccase",97, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // ccase ::= DEFAULT COLON cstmts BREAK SEMICOLON 
            {
              CCase RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<CStatement> ls = (List<CStatement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                RESULT = new CCase(ls);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ccase",97, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // cfor_stmt ::= FOR LPAREN cfor_reduced_stmt SEMICOLON cexp SEMICOLON cfor_reduced_stmt RPAREN LBRACE cstmts RBRACE 
            {
              CForAst RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		CStatement s1 = (CStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		CExp c = (CExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		CStatement s2 = (CStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<CStatement> ls = (List<CStatement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                RESULT = new CForAst(
                    new Position(fleft, fright),
                    ls, s1, s2, c
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cfor_stmt",92, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // cfor_reduced_stmt ::= c_jinvocation 
            {
              CStatement RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<CInvocation> li = (List<CInvocation>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new CObjectInv(li);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cfor_reduced_stmt",99, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // cfor_reduced_stmt ::= c_pinvocation 
            {
              CStatement RESULT =null;
		int pileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int piright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CMethodPass pi = (CMethodPass)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = pi.toStmt();
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cfor_reduced_stmt",99, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // cfor_reduced_stmt ::= cassign 
            {
              CStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CAssign s = (CAssign)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cfor_reduced_stmt",99, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 383: // cfor_reduced_stmt ::= 
            {
              CStatement RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cfor_reduced_stmt",99, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 384: // cwhile_stmt ::= WHILE LPAREN cexp RPAREN LBRACE cstmts RBRACE 
            {
              CWhileAst RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		CExp c = (CExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<CStatement> ls = (List<CStatement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                RESULT = new CWhileAst(
                    new Position(wleft, wright),
                    ls, c
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cwhile_stmt",93, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 385: // cdo_while_stmt ::= DO LBRACE cstmts RBRACE WHILE LPAREN cexp RPAREN SEMICOLON 
            {
              CDoWhile RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		List<CStatement> ls = (List<CStatement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		CExp c = (CExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                RESULT = new CDoWhile(
                    new Position(dleft, dright),
                    ls, c
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cdo_while_stmt",94, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 386: // c_jinvocation ::= JAVA DOT ID c_jaccess 
            {
              List<CInvocation> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<CInvocation> li = (List<CInvocation>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = astGen.genListCInv(
                    li, 
                    new CObjUse(
                        new Label(i, new Position(ileft, iright))
                    )
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_jinvocation",118, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 387: // c_jinvocation ::= JAVA DOT ID carray_dims c_jaccess 
            {
              List<CInvocation> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lceleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<CExp> lce = (List<CExp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<CInvocation> li = (List<CInvocation>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = astGen.genListCInv(
                    li, 
                    new CArrayUse(
                        new Label(i, new Position(ileft, iright)),
                        lce
                    )
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_jinvocation",118, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 388: // c_jaccess ::= DOT c_jcomplex_access c_jaccess 
            {
              List<CInvocation> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		CInvocation i = (CInvocation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<CInvocation> l = (List<CInvocation>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                l.add(0, i);
                RESULT = l;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_jaccess",119, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 389: // c_jaccess ::= DOT c_jcomplex_access 
            {
              List<CInvocation> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CInvocation i = (CInvocation)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                List<CInvocation> list = new LinkedList<>();
                list.add(i);
                RESULT = list;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_jaccess",119, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 390: // c_jcomplex_access ::= ID 
            {
              CInvocation RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new CObjUse(
                    new Label(i, new Position(ileft, iright))
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_jcomplex_access",120, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 391: // c_jcomplex_access ::= ID LPAREN RPAREN 
            {
              CInvocation RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                RESULT = new CMethodUse(
                    new Label(i, new Position(ileft, iright))
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_jcomplex_access",120, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 392: // c_jcomplex_access ::= ID LPAREN RPAREN carray_dims 
            {
              CInvocation RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int acleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int acright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<CExp> ac = (List<CExp>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new CArrayFMUse(
                    new Label(i, new Position(ileft, iright)),
                    ac
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_jcomplex_access",120, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 393: // c_jcomplex_access ::= ID LPAREN cparams RPAREN 
            {
              CInvocation RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<CExp> el = (List<CExp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                RESULT = new CMethodUse(
                    new Label(i, new Position(ileft, iright)),
                    el
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_jcomplex_access",120, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 394: // c_jcomplex_access ::= ID LPAREN cparams RPAREN carray_dims 
            {
              CInvocation RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<CExp> el = (List<CExp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int acleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int acright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<CExp> ac = (List<CExp>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new CArrayFMUse(
                    new Label(i, new Position(ileft, iright)),
                    el, ac
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_jcomplex_access",120, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 395: // c_jcomplex_access ::= ID carray_dims 
            {
              CInvocation RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int acleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int acright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<CExp> ac = (List<CExp>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new CArrayUse(
                    new Label(i, new Position(ileft, iright)),
                    ac
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_jcomplex_access",120, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 396: // c_pinvocation ::= PASCAL DOT ID LPAREN RPAREN 
            {
              CMethodPass RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                RESULT = new CMethodPass(
                    new Label(i, new Position(ileft, iright))
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_pinvocation",114, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 397: // c_pinvocation ::= PASCAL DOT ID LPAREN cparams RPAREN 
            {
              CMethodPass RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int leleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<CExp> le = (List<CExp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                RESULT = new CMethodPass(
                    new Label(i, new Position(ileft, iright)),
                    le
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_pinvocation",114, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 398: // cexp ::= cexp AND cexp 
            {
              CExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		CExp e1 = (CExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CExp e2 = (CExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new COperation(
                    new Position(oleft, oright),
                    DefiniteOperation.And, 
                    e1, e2
                );  
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cexp",89, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 399: // cexp ::= cexp OR cexp 
            {
              CExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		CExp e1 = (CExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CExp e2 = (CExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new COperation(
                    new Position(oleft, oright),
                    DefiniteOperation.Or, 
                    e1, e2
                ); 
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cexp",89, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 400: // cexp ::= NOT cexp 
            {
              CExp RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CExp e = (CExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new CUnaryOperation(
                    new Position(oleft, oright), 
                    DefiniteOperation.Not,
                    e
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cexp",89, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 401: // cexp ::= cbool_exp 
            {
              CExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CExp e = (CExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = e;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cexp",89, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 402: // cbool_exp ::= carit_exp EQUALS carit_exp 
            {
              CExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		CExp e1 = (CExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CExp e2 = (CExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new COperation(
                    new Position(oleft, oright),
                    DefiniteOperation.EqualsTo, 
                    e1, e2
                ); 
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cbool_exp",90, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 403: // cbool_exp ::= carit_exp DIFFERENT carit_exp 
            {
              CExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		CExp e1 = (CExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CExp e2 = (CExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new COperation(
                    new Position(oleft, oright),
                    DefiniteOperation.DifferentTo, 
                    e1, e2
                ); 
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cbool_exp",90, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 404: // cbool_exp ::= carit_exp GRATER carit_exp 
            {
              CExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		CExp e1 = (CExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CExp e2 = (CExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new COperation(
                    new Position(oleft, oright),
                    DefiniteOperation.GraterThan, 
                    e1, e2
                ); 
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cbool_exp",90, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 405: // cbool_exp ::= carit_exp LESS carit_exp 
            {
              CExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		CExp e1 = (CExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CExp e2 = (CExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new COperation(
                    new Position(oleft, oright),
                    DefiniteOperation.LessThan, 
                    e1, e2
                ); 
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cbool_exp",90, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 406: // cbool_exp ::= carit_exp GRATER_EQUALS carit_exp 
            {
              CExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		CExp e1 = (CExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CExp e2 = (CExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new COperation(
                    new Position(oleft, oright),
                    DefiniteOperation.GraterEq, 
                    e1, e2
                ); 
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cbool_exp",90, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 407: // cbool_exp ::= carit_exp LESS_EQUALS carit_exp 
            {
              CExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		CExp e1 = (CExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CExp e2 = (CExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new COperation(
                    new Position(oleft, oright),
                    DefiniteOperation.LessEq, 
                    e1, e2
                ); 
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cbool_exp",90, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 408: // cbool_exp ::= carit_exp 
            {
              CExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CExp e = (CExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = e;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cbool_exp",90, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 409: // carit_exp ::= error PLUS error 
            {
              CExp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("carit_exp",91, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 410: // carit_exp ::= error MINUS error 
            {
              CExp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("carit_exp",91, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 411: // carit_exp ::= error TIMES error 
            {
              CExp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("carit_exp",91, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 412: // carit_exp ::= error DIV error 
            {
              CExp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("carit_exp",91, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 413: // carit_exp ::= error BARRA error 
            {
              CExp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("carit_exp",91, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 414: // carit_exp ::= error MOD error 
            {
              CExp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("carit_exp",91, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 415: // carit_exp ::= carit_exp PLUS carit_exp 
            {
              CExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		CExp e1 = (CExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CExp e2 = (CExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new COperation(
                    new Position(oleft, oright),
                    DefiniteOperation.Addition, 
                    e1, e2
                ); 
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("carit_exp",91, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 416: // carit_exp ::= carit_exp MINUS carit_exp 
            {
              CExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		CExp e1 = (CExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CExp e2 = (CExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new COperation(
                    new Position(oleft, oright),
                    DefiniteOperation.Substraction, 
                    e1, e2
                ); 
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("carit_exp",91, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 417: // carit_exp ::= carit_exp TIMES carit_exp 
            {
              CExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		CExp e1 = (CExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CExp e2 = (CExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new COperation(
                    new Position(oleft, oright),
                    DefiniteOperation.Multiplication, 
                    e1, e2
                ); 
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("carit_exp",91, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 418: // carit_exp ::= carit_exp DIV carit_exp 
            {
              CExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		CExp e1 = (CExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CExp e2 = (CExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new COperation(
                    new Position(oleft, oright),
                    DefiniteOperation.Division, 
                    e1, e2
                ); 
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("carit_exp",91, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 419: // carit_exp ::= carit_exp MOD carit_exp 
            {
              CExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		CExp e1 = (CExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CExp e2 = (CExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new COperation(
                    new Position(oleft, oright),
                    DefiniteOperation.Module, 
                    e1, e2
                ); 
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("carit_exp",91, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 420: // carit_exp ::= carit_exp POWER carit_exp 
            {
              CExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		CExp e1 = (CExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CExp e2 = (CExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new COperation(
                    new Position(oleft, oright),
                    DefiniteOperation.Power, 
                    e1, e2
                ); 
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("carit_exp",91, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 421: // carit_exp ::= cliterals 
            {
              CExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CLiteral e = (CLiteral)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = e;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("carit_exp",91, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 422: // carit_exp ::= c_jinvocation 
            {
              CExp RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<CInvocation> li = (List<CInvocation>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new CObjectUseExp(li);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("carit_exp",91, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 423: // carit_exp ::= c_pinvocation 
            {
              CExp RESULT =null;
		int pileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int piright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CMethodPass pi = (CMethodPass)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = pi.toExp();
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("carit_exp",91, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 424: // carit_exp ::= ID 
            {
              CExp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new CVarUse(
                    new Position(ileft, iright), i
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("carit_exp",91, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 425: // carit_exp ::= ID carray_dims 
            {
              CExp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int acleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int acright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<CExp> ac = (List<CExp>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new CVarArrayUse(
                    new Position(ileft, iright),
                    i, ac
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("carit_exp",91, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 426: // carit_exp ::= LPAREN cexp RPAREN 
            {
              CExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		CExp e = (CExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                RESULT = e;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("carit_exp",91, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 427: // carit_exp ::= PLUS carit_exp 
            {
              CExp RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CExp e = (CExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new CUnaryOperation(
                    new Position(oleft, oright), 
                    DefiniteOperation.Addition,
                    e
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("carit_exp",91, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 428: // carit_exp ::= MINUS carit_exp 
            {
              CExp RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CExp e = (CExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new CUnaryOperation(
                    new Position(oleft, oright), 
                    DefiniteOperation.Substraction,
                    e
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("carit_exp",91, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* select the action handler based on the action number */
      switch (CUP$Parser$act_num/300)
        {
          /*. . . . . . . . 0 < #action < 300. . . . . . . . . . . .*/
          case 0: 
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
          /*. . . . . . . . 300 < #action < 600. . . . . . . . . . . .*/
          case 1: 
              return CUP$Parser$do_action_part00000001(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
          /* . . . no valid action number: . . .*/
          default:
            throw new Exception("Invalid action number found in internal parse table");

        }      /* end of switch */
    }
}

}
