// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: jflex.jflex

/******************** codigo de usuario *******************************/
package compi2.multi.compilator.analysis;

import java_cup.runtime.*;
import java.util.*;


@SuppressWarnings("fallthrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int PASCAL = 2;
  public static final int JAVA = 4;
  public static final int CHARLITERAL = 6;
  public static final int P_CHAR_STRING = 8;
  public static final int JCHARLITERAL = 10;
  public static final int STRING = 12;
  public static final int JSTRING = 14;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7, 7
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\126\u0100\1\u2600\1\u0100\1\u2700"+
    "\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\53\u0100\1\u2d00\10\u2e00"+
    "\31\u1f00\1\u0100\1\u2f00\1\u3000\1\u0100\1\u3100\1\u3200\1\u3300"+
    "\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u0100\1\u3a00"+
    "\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100\1\u4200"+
    "\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900\1\u4a00"+
    "\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00\1\u4f00\1\u5000\1\u5100"+
    "\3\u0100\1\u5200\1\u5300\1\u5400\11\u1f00\1\u5500\4\u0100\1\u5600"+
    "\17\u1f00\2\u0100\1\u5700\41\u1f00\2\u0100\1\u5800\1\u5900\2\u1f00"+
    "\1\u5a00\1\u5b00\27\u0100\1\u5c00\4\u0100\1\u5d00\1\u5e00\41\u1f00"+
    "\1\u5f00\1\u0100\1\u6000\1\u6100\11\u1f00\1\u6200\22\u1f00\1\u6300"+
    "\1\u1f00\1\u6400\1\u6500\1\u1f00\1\u6600\1\u6700\1\u6800\1\u6900"+
    "\2\u1f00\1\u6a00\4\u1f00\1\u6b00\1\u6c00\1\u6d00\1\u6e00\1\u1f00"+
    "\1\u6f00\2\u1f00\1\u7000\1\u7100\1\u7200\2\u1f00\1\u7300\1\u1f00"+
    "\1\u7400\14\u1f00\1\u7500\4\u1f00\246\u0100\1\u7600\20\u0100\1\u7700"+
    "\1\u7800\25\u0100\1\u7900\34\u0100\1\u7a00\2\u0100\1\u7b00\11\u1f00"+
    "\2\u0100\1\u7c00\5\u1f00\23\u0100\1\u7d00\17\u0100\1\u7e00\u0adc\u1f00"+
    "\1\u7f00\1\u8000\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\16\0\4\6"+
    "\1\1\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\2\26\2\27\4\30\2\31\1\32\1\33\1\34\1\35"+
    "\1\36\2\6\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\12\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\12\1\65\1\12\1\66\1\67\1\70\1\71"+
    "\1\12\1\6\1\72\1\73\1\74\1\75\1\76\1\77"+
    "\1\100\1\101\1\102\1\12\1\103\1\104\1\105\1\106"+
    "\1\107\1\110\1\12\1\111\1\112\1\113\1\114\1\115"+
    "\1\116\1\117\1\65\1\12\1\120\1\121\1\122\1\6"+
    "\6\0\1\123\32\0\2\6\4\12\4\6\1\12\2\6"+
    "\1\0\7\6\1\12\4\6\1\12\5\6\27\12\1\6"+
    "\37\12\1\6\u01ca\12\4\6\14\12\16\6\5\12\7\6"+
    "\1\12\1\6\1\12\21\6\160\0\5\12\1\6\2\12"+
    "\2\6\4\12\1\6\1\12\6\6\1\12\1\6\3\12"+
    "\1\6\1\12\1\6\24\12\1\6\123\12\1\6\213\12"+
    "\1\6\5\0\2\6\246\12\1\6\46\12\2\6\1\12"+
    "\6\6\51\12\6\6\1\12\1\6\55\0\1\6\1\0"+
    "\1\6\2\0\1\6\2\0\1\6\1\0\10\6\33\12"+
    "\4\6\4\12\15\6\6\0\5\6\1\12\4\6\13\0"+
    "\1\6\1\0\3\6\53\12\37\0\4\6\2\12\1\0"+
    "\143\12\1\6\1\12\10\0\1\6\6\0\2\12\2\0"+
    "\1\6\4\0\2\12\12\0\3\12\2\6\1\12\17\6"+
    "\1\0\1\12\1\0\36\12\33\0\2\6\131\12\13\0"+
    "\1\12\16\6\12\0\41\12\11\0\2\12\4\6\1\12"+
    "\2\6\1\0\30\12\4\0\1\12\11\0\1\12\3\0"+
    "\1\12\5\0\22\6\31\12\3\0\4\6\13\12\5\6"+
    "\30\12\1\6\6\12\1\6\2\0\6\6\10\0\52\12"+
    "\72\0\66\12\3\0\1\12\22\0\1\12\7\0\12\12"+
    "\2\0\2\6\12\0\1\6\20\12\3\0\1\6\10\12"+
    "\2\6\2\12\2\6\26\12\1\6\7\12\1\6\1\12"+
    "\3\6\4\12\2\6\1\0\1\12\7\0\2\6\2\0"+
    "\2\6\3\0\1\12\10\6\1\0\4\6\2\12\1\6"+
    "\3\12\2\0\2\6\12\0\4\12\7\6\2\12\1\6"+
    "\1\0\2\6\3\0\1\6\6\12\4\6\2\12\2\6"+
    "\26\12\1\6\7\12\1\6\2\12\1\6\2\12\1\6"+
    "\2\12\2\6\1\0\1\6\5\0\4\6\2\0\2\6"+
    "\3\0\3\6\1\0\7\6\4\12\1\6\1\12\7\6"+
    "\14\0\3\12\1\0\13\6\3\0\1\6\11\12\1\6"+
    "\3\12\1\6\26\12\1\6\7\12\1\6\2\12\1\6"+
    "\5\12\2\6\1\0\1\12\10\0\1\6\3\0\1\6"+
    "\3\0\2\6\1\12\17\6\2\12\2\0\2\6\12\0"+
    "\1\6\1\12\7\6\1\12\6\0\1\6\3\0\1\6"+
    "\10\12\2\6\2\12\2\6\26\12\1\6\7\12\1\6"+
    "\2\12\1\6\5\12\2\6\1\0\1\12\7\0\2\6"+
    "\2\0\2\6\3\0\7\6\3\0\4\6\2\12\1\6"+
    "\3\12\2\0\2\6\12\0\1\6\1\12\20\6\1\0"+
    "\1\12\1\6\6\12\3\6\3\12\1\6\4\12\3\6"+
    "\2\12\1\6\1\12\1\6\2\12\3\6\2\12\3\6"+
    "\3\12\3\6\14\12\4\6\5\0\3\6\3\0\1\6"+
    "\4\0\2\6\1\12\6\6\1\0\16\6\12\0\11\6"+
    "\1\12\6\6\5\0\10\12\1\6\3\12\1\6\27\12"+
    "\1\6\20\12\2\6\1\0\1\12\7\0\1\6\3\0"+
    "\1\6\4\0\7\6\2\0\1\6\3\12\2\6\1\12"+
    "\2\6\2\12\2\0\2\6\12\0\20\6\1\12\3\0"+
    "\1\6\10\12\1\6\3\12\1\6\27\12\1\6\12\12"+
    "\1\6\5\12\2\6\1\0\1\12\7\0\1\6\3\0"+
    "\1\6\4\0\7\6\2\0\6\6\2\12\1\6\2\12"+
    "\2\0\2\6\12\0\1\6\2\12\1\0\14\6\4\0"+
    "\11\12\1\6\3\12\1\6\51\12\2\0\1\12\7\0"+
    "\1\6\3\0\1\6\4\0\1\12\5\6\3\12\1\0"+
    "\7\6\3\12\2\0\2\6\12\0\12\6\6\12\1\6"+
    "\3\0\1\6\22\12\3\6\30\12\1\6\11\12\1\6"+
    "\1\12\2\6\7\12\3\6\1\0\4\6\6\0\1\6"+
    "\1\0\1\6\10\0\6\6\12\0\2\6\2\0\15\6"+
    "\60\12\1\0\2\12\7\0\4\6\10\12\10\0\1\6"+
    "\12\0\47\6\2\12\1\6\1\12\1\6\5\12\1\6"+
    "\30\12\1\6\1\12\1\6\12\12\1\0\2\12\11\0"+
    "\1\12\2\6\5\12\1\6\1\12\1\6\7\0\1\6"+
    "\12\0\2\6\4\12\40\6\1\12\27\6\2\0\6\6"+
    "\12\0\13\6\1\0\1\6\1\0\1\6\1\0\4\6"+
    "\2\0\10\12\1\6\44\12\4\6\24\0\1\6\2\0"+
    "\5\12\13\0\1\6\44\0\11\6\1\0\71\6\53\12"+
    "\24\0\1\12\12\0\6\6\6\12\4\0\4\12\3\0"+
    "\1\12\3\0\2\12\7\0\3\12\4\0\15\12\14\0"+
    "\1\12\17\0\2\6\46\12\1\6\1\12\5\6\1\12"+
    "\2\6\53\12\1\6\115\12\1\6\4\12\2\6\7\12"+
    "\1\6\1\12\1\6\4\12\2\6\51\12\1\6\4\12"+
    "\2\6\41\12\1\6\4\12\2\6\7\12\1\6\1\12"+
    "\1\6\4\12\2\6\17\12\1\6\71\12\1\6\4\12"+
    "\2\6\103\12\2\6\3\0\40\6\20\12\20\6\126\12"+
    "\2\6\6\12\3\6\u016c\12\2\6\21\12\1\6\32\12"+
    "\5\6\113\12\3\6\13\12\7\6\22\12\4\0\11\6"+
    "\23\12\3\0\13\6\22\12\2\0\14\6\15\12\1\6"+
    "\3\12\1\6\2\0\14\6\64\12\40\0\3\6\1\12"+
    "\3\6\2\12\1\0\2\6\12\0\41\6\17\0\6\6"+
    "\131\12\7\6\5\12\2\0\42\12\1\0\1\12\5\6"+
    "\106\12\12\6\37\12\1\6\14\0\4\6\14\0\12\6"+
    "\12\0\36\12\2\6\5\12\13\6\54\12\4\6\32\12"+
    "\6\6\12\0\46\6\27\12\5\0\4\6\65\12\12\0"+
    "\1\6\35\0\2\6\13\0\6\6\12\0\15\6\1\12"+
    "\10\6\16\0\1\6\20\0\61\6\5\0\57\12\21\0"+
    "\10\12\3\6\12\0\21\6\11\0\14\6\3\0\36\12"+
    "\15\0\2\12\12\0\54\12\16\0\14\6\44\12\24\0"+
    "\10\6\12\0\3\6\3\12\12\0\44\12\2\6\11\12"+
    "\7\6\53\12\2\6\3\12\20\6\3\0\1\6\25\0"+
    "\4\12\1\0\6\12\1\0\2\12\3\0\1\12\5\6"+
    "\300\12\100\0\26\12\2\6\6\12\2\6\46\12\2\6"+
    "\6\12\2\6\10\12\1\6\1\12\1\6\1\12\1\6"+
    "\1\12\1\6\37\12\2\6\65\12\1\6\7\12\1\6"+
    "\1\12\3\6\3\12\1\6\7\12\3\6\4\12\2\6"+
    "\6\12\4\6\15\12\5\6\3\12\1\6\7\12\16\6"+
    "\5\0\30\6\2\3\5\0\20\6\2\12\23\6\1\12"+
    "\13\6\5\0\1\6\12\0\1\6\1\12\15\6\1\12"+
    "\20\6\15\12\3\6\41\12\17\6\15\0\4\6\1\0"+
    "\3\6\14\0\21\6\1\12\4\6\1\12\2\6\12\12"+
    "\1\6\1\12\3\6\5\12\6\6\1\12\1\6\1\12"+
    "\1\6\1\12\1\6\4\12\1\6\13\12\2\6\4\12"+
    "\5\6\5\12\4\6\1\12\21\6\51\12\u0177\6\345\12"+
    "\6\6\4\12\3\0\2\12\14\6\46\12\1\6\1\12"+
    "\5\6\1\12\2\6\70\12\7\6\1\12\17\6\1\0"+
    "\27\12\11\6\7\12\1\6\7\12\1\6\7\12\1\6"+
    "\7\12\1\6\7\12\1\6\7\12\1\6\7\12\1\6"+
    "\7\12\1\6\40\0\57\6\1\12\325\6\3\12\31\6"+
    "\11\12\6\0\1\6\5\12\2\6\5\12\4\6\126\12"+
    "\2\6\2\0\2\6\3\12\1\6\132\12\1\6\4\12"+
    "\5\6\53\12\1\6\136\12\21\6\40\12\60\6\320\12"+
    "\100\6\215\12\103\6\56\12\2\6\15\12\3\6\20\12"+
    "\12\0\2\12\24\6\57\12\1\0\4\6\12\0\1\6"+
    "\37\12\2\0\120\12\2\0\45\6\11\12\2\6\147\12"+
    "\2\6\100\12\5\6\2\12\1\6\1\12\1\6\5\12"+
    "\30\6\20\12\1\0\3\12\1\0\4\12\1\0\27\12"+
    "\5\0\4\6\1\0\13\6\1\12\7\6\64\12\14\6"+
    "\2\0\62\12\22\0\12\6\12\0\6\6\22\0\6\12"+
    "\3\6\1\12\1\6\2\12\13\0\34\12\10\0\2\6"+
    "\27\12\15\0\14\6\35\12\3\6\4\0\57\12\16\0"+
    "\16\6\1\12\12\0\6\6\5\12\1\0\12\12\12\0"+
    "\5\12\1\6\51\12\16\0\11\6\3\12\1\0\10\12"+
    "\2\0\2\6\12\0\6\6\27\12\3\6\1\12\3\0"+
    "\62\12\1\0\1\12\3\0\2\12\2\0\5\12\2\0"+
    "\1\12\1\0\1\12\30\6\3\12\2\6\13\12\5\0"+
    "\2\6\3\12\2\0\12\6\6\12\2\6\6\12\2\6"+
    "\6\12\11\6\7\12\1\6\7\12\1\6\53\12\1\6"+
    "\16\12\6\6\163\12\10\0\1\6\2\0\2\6\12\0"+
    "\6\6\244\12\14\6\27\12\4\6\61\12\4\6\u0100\3"+
    "\156\12\2\6\152\12\46\6\7\12\14\6\5\12\5\6"+
    "\1\12\1\0\12\12\1\6\15\12\1\6\5\12\1\6"+
    "\1\12\1\6\2\12\1\6\2\12\1\6\154\12\41\6"+
    "\153\12\22\6\100\12\2\6\66\12\50\6\15\12\3\6"+
    "\20\0\20\6\20\0\3\6\2\12\30\6\3\12\31\6"+
    "\1\12\6\6\5\12\1\6\207\12\2\6\1\0\4\6"+
    "\1\12\13\6\12\0\7\6\32\12\4\6\1\12\1\6"+
    "\32\12\13\6\131\12\3\6\6\12\2\6\6\12\2\6"+
    "\6\12\2\6\3\12\3\6\2\12\3\6\2\12\22\6"+
    "\3\0\4\6\14\12\1\6\32\12\1\6\23\12\1\6"+
    "\2\12\1\6\17\12\2\6\16\12\42\6\173\12\105\6"+
    "\65\12\210\6\1\0\202\6\35\12\3\6\61\12\17\6"+
    "\1\0\37\6\40\12\15\6\36\12\5\6\46\12\5\0"+
    "\5\6\36\12\2\6\44\12\4\6\10\12\1\6\5\12"+
    "\52\6\236\12\2\6\12\0\6\6\44\12\4\6\44\12"+
    "\4\6\50\12\10\6\64\12\14\6\13\12\1\6\17\12"+
    "\1\6\7\12\1\6\2\12\1\6\13\12\1\6\17\12"+
    "\1\6\7\12\1\6\2\12\103\6\67\12\11\6\26\12"+
    "\12\6\10\12\30\6\6\12\1\6\52\12\1\6\11\12"+
    "\105\6\6\12\2\6\1\12\1\6\54\12\1\6\2\12"+
    "\3\6\1\12\2\6\27\12\12\6\27\12\11\6\37\12"+
    "\101\6\23\12\1\6\2\12\12\6\26\12\12\6\32\12"+
    "\106\6\70\12\6\6\2\12\100\6\1\12\3\0\1\6"+
    "\2\0\5\6\4\0\4\12\1\6\3\12\1\6\35\12"+
    "\2\6\3\0\4\6\1\0\40\6\35\12\3\6\35\12"+
    "\43\6\10\12\1\6\34\12\2\0\31\6\66\12\12\6"+
    "\26\12\12\6\23\12\15\6\22\12\156\6\111\12\67\6"+
    "\63\12\15\6\63\12\15\6\44\12\4\0\10\6\12\0"+
    "\u0146\6\52\12\1\6\2\0\3\6\2\12\113\6\3\0"+
    "\35\12\12\6\1\12\10\6\26\12\13\0\37\6\22\12"+
    "\4\0\52\6\25\12\33\6\27\12\11\6\3\0\65\12"+
    "\17\0\37\6\13\0\2\12\2\0\1\12\11\6\4\0"+
    "\55\12\13\0\2\6\1\0\4\6\1\0\12\6\1\0"+
    "\2\6\31\12\7\6\12\0\6\6\3\0\44\12\16\0"+
    "\1\6\12\0\4\6\1\12\2\0\1\12\10\6\43\12"+
    "\1\0\2\6\1\12\11\6\3\0\60\12\16\0\4\12"+
    "\4\6\4\0\1\6\14\0\1\12\1\6\1\12\43\6"+
    "\22\12\1\6\31\12\14\0\6\6\1\0\2\12\1\0"+
    "\76\6\7\12\1\6\1\12\1\6\4\12\1\6\17\12"+
    "\1\6\12\12\7\6\57\12\14\0\5\6\12\0\6\6"+
    "\4\0\1\6\10\12\2\6\2\12\2\6\26\12\1\6"+
    "\7\12\1\6\2\12\1\6\5\12\1\6\2\0\1\12"+
    "\7\0\2\6\2\0\2\6\3\0\2\6\1\12\6\6"+
    "\1\0\5\6\5\12\2\0\2\6\7\0\3\6\5\0"+
    "\213\6\65\12\22\0\4\12\5\6\12\0\4\6\1\0"+
    "\3\12\36\6\60\12\24\0\2\12\1\6\1\12\10\6"+
    "\12\0\246\6\57\12\7\0\2\6\11\0\27\6\4\12"+
    "\2\0\42\6\60\12\21\0\3\6\1\12\13\6\12\0"+
    "\46\6\53\12\15\0\1\12\7\6\12\0\66\6\33\12"+
    "\2\6\17\0\4\6\12\0\6\6\7\12\271\6\54\12"+
    "\17\0\145\6\100\12\12\0\25\6\10\12\2\6\1\12"+
    "\2\6\10\12\1\6\2\12\1\6\30\12\6\0\1\6"+
    "\2\0\2\6\4\0\1\12\1\0\1\12\2\0\14\6"+
    "\12\0\106\6\10\12\2\6\47\12\7\0\2\6\7\0"+
    "\1\12\1\6\1\12\1\0\33\6\1\12\12\0\50\12"+
    "\7\0\1\12\4\0\10\6\1\0\10\6\1\12\13\0"+
    "\56\12\20\0\3\6\1\12\22\6\111\12\7\6\11\12"+
    "\1\6\45\12\10\0\1\6\10\0\1\12\17\6\12\0"+
    "\30\6\36\12\2\6\26\0\1\6\16\0\111\6\7\12"+
    "\1\6\2\12\1\6\46\12\6\0\3\6\1\0\1\6"+
    "\2\0\1\6\7\0\1\12\1\0\10\6\12\0\6\6"+
    "\6\12\1\6\2\12\1\6\40\12\5\0\1\6\2\0"+
    "\1\6\5\0\1\12\7\6\12\0\u0136\6\23\12\4\0"+
    "\11\6\2\0\1\12\1\0\15\12\1\6\42\12\7\0"+
    "\3\6\5\0\15\6\12\0\126\6\1\12\54\6\4\12"+
    "\37\6\232\12\146\6\157\12\21\6\304\12\u014c\6\141\12"+
    "\17\6\60\12\21\0\6\12\17\0\252\6\107\12\271\6"+
    "\71\12\7\6\37\12\1\6\12\0\6\6\117\12\1\6"+
    "\12\0\6\6\36\12\2\6\5\0\13\6\60\12\7\0"+
    "\11\6\4\12\14\6\12\0\11\6\25\12\5\6\23\12"+
    "\260\6\100\12\200\6\113\12\4\6\1\0\1\12\67\0"+
    "\7\6\4\0\15\12\100\6\2\12\1\6\1\12\1\0"+
    "\13\6\2\0\16\6\370\12\10\6\326\12\52\6\11\12"+
    "\u01e7\6\4\12\1\6\7\12\1\6\2\12\1\6\43\12"+
    "\17\6\1\12\35\6\3\12\2\6\1\12\16\6\4\12"+
    "\10\6\u018c\12\4\6\153\12\5\6\15\12\3\6\11\12"+
    "\7\6\12\12\3\6\2\0\1\6\4\0\134\6\56\0"+
    "\2\6\27\0\u011e\6\5\0\3\6\26\0\2\6\7\0"+
    "\36\6\4\0\224\6\3\0\273\6\125\12\1\6\107\12"+
    "\1\6\2\12\2\6\1\12\2\6\2\12\2\6\4\12"+
    "\1\6\14\12\1\6\1\12\1\6\7\12\1\6\101\12"+
    "\1\6\4\12\2\6\10\12\1\6\7\12\1\6\34\12"+
    "\1\6\4\12\1\6\5\12\1\6\1\12\3\6\7\12"+
    "\1\6\u0154\12\2\6\31\12\1\6\31\12\1\6\37\12"+
    "\1\6\31\12\1\6\37\12\1\6\31\12\1\6\37\12"+
    "\1\6\31\12\1\6\37\12\1\6\31\12\1\6\10\12"+
    "\2\6\151\0\4\6\62\0\10\6\1\0\16\6\1\0"+
    "\26\6\5\0\1\6\17\0\120\6\37\12\6\6\6\12"+
    "\325\6\7\0\1\6\21\0\2\6\7\0\1\6\2\0"+
    "\1\6\5\0\5\6\76\12\41\6\1\0\160\6\55\12"+
    "\3\6\7\0\7\12\2\6\12\0\4\6\1\12\u0141\6"+
    "\36\12\1\0\21\6\54\12\16\0\5\6\1\12\320\6"+
    "\34\12\16\0\346\6\7\12\1\6\4\12\1\6\2\12"+
    "\1\6\17\12\1\6\305\12\13\6\7\0\51\6\104\12"+
    "\7\0\1\12\4\6\12\0\u0156\6\1\12\117\6\4\12"+
    "\1\6\33\12\1\6\2\12\1\6\1\12\2\6\1\12"+
    "\1\6\12\12\1\6\4\12\1\6\1\12\1\6\1\12"+
    "\6\6\1\12\4\6\1\12\1\6\1\12\1\6\1\12"+
    "\1\6\3\12\1\6\2\12\1\6\1\12\2\6\1\12"+
    "\1\6\1\12\1\6\1\12\1\6\1\12\1\6\1\12"+
    "\1\6\2\12\1\6\1\12\2\6\4\12\1\6\7\12"+
    "\1\6\4\12\1\6\4\12\1\6\1\12\1\6\12\12"+
    "\1\6\21\12\5\6\3\12\1\6\5\12\1\6\21\12"+
    "\u0134\6\12\0\6\6\340\12\40\6\72\12\6\6\336\12"+
    "\2\6\u0182\12\16\6\u0131\12\17\6\156\12\242\6\36\12"+
    "\342\6\113\12\5\6\u0160\12\121\6\1\0\36\6\140\0"+
    "\200\6\360\0\20\6";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[33024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\10\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\2\6\1\31\1\32\1\33\15\6\1\34\1\1"+
    "\1\35\1\36\1\37\1\12\1\21\1\40\1\24\1\26"+
    "\1\41\21\36\1\34\1\42\1\1\1\43\14\6\1\1"+
    "\1\2\1\44\1\0\1\44\1\7\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\24\1\25\1\26"+
    "\1\30\1\31\1\1\1\32\1\33\1\34\1\35\1\45"+
    "\1\7\1\46\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\24\1\25\1\26\1\30\1\31\1\1"+
    "\1\32\1\33\1\34\1\35\1\1\1\2\1\0\1\7"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\24\1\25\1\26\1\30\1\31\1\1\1\32\1\33"+
    "\1\34\1\35\1\45\2\47\1\50\1\7\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\24\1\25"+
    "\1\26\1\30\1\31\1\1\1\32\1\33\1\34\1\35"+
    "\1\51\1\0\1\52\1\0\1\53\1\0\1\54\1\55"+
    "\10\6\1\56\4\6\1\57\10\6\1\60\1\0\1\27"+
    "\10\36\1\56\4\36\1\57\1\61\2\36\1\62\1\60"+
    "\7\36\1\63\5\36\1\0\1\53\22\6\1\64\13\65"+
    "\1\45\1\66\1\54\1\55\1\67\1\70\2\71\1\72"+
    "\1\73\1\74\1\75\1\76\1\77\1\100\12\65\1\54"+
    "\1\55\1\67\1\70\2\101\1\72\1\73\1\74\1\75"+
    "\1\76\1\77\4\0\1\53\1\102\12\6\1\103\2\6"+
    "\1\104\7\6\2\0\1\52\11\36\1\105\1\106\2\36"+
    "\1\107\1\110\7\36\1\111\5\36\1\112\2\36\10\6"+
    "\1\106\1\104\1\113\10\6\1\114\1\115\1\116\2\0"+
    "\1\117\1\120\1\121\1\122\1\123\1\124\1\125\1\126"+
    "\1\127\1\71\1\130\1\131\1\132\1\133\1\134\1\135"+
    "\1\136\1\137\1\140\2\0\1\141\1\142\1\143\1\144"+
    "\1\145\1\146\1\101\4\0\1\147\3\6\1\150\1\151"+
    "\3\6\1\152\3\6\1\153\4\6\1\154\1\6\1\0"+
    "\4\36\1\150\1\151\3\36\1\152\6\36\1\155\5\36"+
    "\1\156\1\157\2\36\1\160\1\6\1\151\6\6\1\161"+
    "\6\6\1\162\1\163\3\0\2\6\1\164\1\6\1\165"+
    "\1\6\1\166\1\6\1\167\1\170\2\6\1\171\1\172"+
    "\1\173\1\36\1\164\1\165\5\36\1\167\7\36\1\174"+
    "\1\171\2\6\1\175\2\6\1\176\1\103\1\6\1\167"+
    "\4\6\1\177\1\200\2\0\1\201\1\6\1\202\2\6"+
    "\1\203\1\204\1\205\2\36\1\206\2\36\1\207\3\36"+
    "\1\210\1\211\1\212\1\204\1\205\11\6\1\213\1\212"+
    "\2\0\1\172\1\6\1\214\1\215\2\36\1\104\1\216"+
    "\1\36\1\217\1\215\1\6\1\220\1\221\2\6\1\216"+
    "\1\222\1\6\1\223\1\0\2\224\1\225\1\36\2\6"+
    "\1\226\1\6\1\0\1\227\1\230\1\6\1\231\1\232"+
    "\1\233";

  private static int [] zzUnpackAction() {
    int [] result = new int[625];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\124\0\250\0\374\0\u0150\0\u01a4\0\u01f8\0\u024c"+
    "\0\u02a0\0\u02a0\0\u02f4\0\u02a0\0\u02a0\0\u02a0\0\u0348\0\u039c"+
    "\0\u03f0\0\u02a0\0\u02a0\0\u02a0\0\u02a0\0\u02a0\0\u02a0\0\u02a0"+
    "\0\u02a0\0\u0444\0\u0498\0\u0498\0\u02a0\0\u02a0\0\u04ec\0\u0540"+
    "\0\u0594\0\u05e8\0\u063c\0\u02a0\0\u02a0\0\u02a0\0\u0690\0\u06e4"+
    "\0\u0738\0\u078c\0\u07e0\0\u0834\0\u0888\0\u08dc\0\u0930\0\u0984"+
    "\0\u09d8\0\u0a2c\0\u0a80\0\u02a0\0\u0ad4\0\u02a0\0\u0b28\0\u02a0"+
    "\0\u0b7c\0\u02a0\0\u0498\0\u0bd0\0\u0c24\0\u02a0\0\u0c78\0\u0ccc"+
    "\0\u0d20\0\u0d74\0\u0dc8\0\u0e1c\0\u0e70\0\u0ec4\0\u0f18\0\u0f6c"+
    "\0\u0fc0\0\u1014\0\u1068\0\u10bc\0\u1110\0\u1164\0\u11b8\0\u120c"+
    "\0\u02a0\0\u03f0\0\u02a0\0\u1260\0\u12b4\0\u1308\0\u135c\0\u13b0"+
    "\0\u1404\0\u1458\0\u14ac\0\u1500\0\u1554\0\u15a8\0\u15fc\0\u1650"+
    "\0\u1650\0\u02a0\0\u1650\0\u16a4\0\u1650\0\u1650\0\u1650\0\u1650"+
    "\0\u1650\0\u1650\0\u1650\0\u1650\0\u1650\0\u1650\0\u1650\0\u16f8"+
    "\0\u174c\0\u1650\0\u17a0\0\u1650\0\u1650\0\u1650\0\u1650\0\u17f4"+
    "\0\u17f4\0\u02a0\0\u17f4\0\u17f4\0\u17f4\0\u17f4\0\u17f4\0\u17f4"+
    "\0\u17f4\0\u17f4\0\u17f4\0\u17f4\0\u1848\0\u189c\0\u17f4\0\u18f0"+
    "\0\u17f4\0\u17f4\0\u17f4\0\u17f4\0\u1944\0\u1944\0\u1944\0\u1944"+
    "\0\u1944\0\u1944\0\u1944\0\u1944\0\u1944\0\u1944\0\u1944\0\u1944"+
    "\0\u1944\0\u1944\0\u1998\0\u19ec\0\u1944\0\u1a40\0\u1944\0\u1944"+
    "\0\u1944\0\u1944\0\u1a94\0\u02a0\0\u1ae8\0\u02a0\0\u1a94\0\u1a94"+
    "\0\u1a94\0\u1a94\0\u1a94\0\u1a94\0\u1a94\0\u1a94\0\u1a94\0\u1a94"+
    "\0\u1a94\0\u1b3c\0\u1b90\0\u1a94\0\u1be4\0\u1a94\0\u1a94\0\u1a94"+
    "\0\u1a94\0\u02a0\0\u1c38\0\u02a0\0\u1c8c\0\u1ce0\0\u1d34\0\u02a0"+
    "\0\u02a0\0\u1d88\0\u1ddc\0\u1e30\0\u1e84\0\u1ed8\0\u1f2c\0\u1f80"+
    "\0\u1fd4\0\u0348\0\u2028\0\u207c\0\u20d0\0\u2124\0\u0348\0\u2178"+
    "\0\u21cc\0\u2220\0\u2274\0\u22c8\0\u231c\0\u2370\0\u23c4\0\u02a0"+
    "\0\u2418\0\u02a0\0\u246c\0\u24c0\0\u2514\0\u2568\0\u25bc\0\u2610"+
    "\0\u2664\0\u26b8\0\u270c\0\u2760\0\u27b4\0\u2808\0\u285c\0\u0b28"+
    "\0\u28b0\0\u2904\0\u2958\0\u0b28\0\u0b28\0\u29ac\0\u2a00\0\u2a54"+
    "\0\u2aa8\0\u2afc\0\u2b50\0\u2ba4\0\u0b28\0\u2bf8\0\u2c4c\0\u2ca0"+
    "\0\u2cf4\0\u2d48\0\u120c\0\u02a0\0\u2d9c\0\u2df0\0\u2e44\0\u2e98"+
    "\0\u2eec\0\u2f40\0\u2f94\0\u2fe8\0\u303c\0\u3090\0\u30e4\0\u3138"+
    "\0\u318c\0\u31e0\0\u3234\0\u3288\0\u32dc\0\u3330\0\u02a0\0\u02a0"+
    "\0\u3384\0\u33d8\0\u342c\0\u3480\0\u34d4\0\u3528\0\u357c\0\u35d0"+
    "\0\u3624\0\u3678\0\u36cc\0\u02a0\0\u36cc\0\u36cc\0\u3720\0\u3774"+
    "\0\u37c8\0\u381c\0\u3870\0\u38c4\0\u3918\0\u396c\0\u39c0\0\u3a14"+
    "\0\u02a0\0\u3a68\0\u3abc\0\u3b10\0\u3b64\0\u3bb8\0\u3c0c\0\u3c60"+
    "\0\u3cb4\0\u3d08\0\u3d5c\0\u1a94\0\u1a94\0\u02a0\0\u02a0\0\u3db0"+
    "\0\u3e04\0\u02a0\0\u02a0\0\u02a0\0\u02a0\0\u02a0\0\u02a0\0\u3e58"+
    "\0\u3eac\0\u3f00\0\u3f54\0\u3fa8\0\u1d34\0\u3ffc\0\u4050\0\u40a4"+
    "\0\u40f8\0\u414c\0\u41a0\0\u41f4\0\u4248\0\u429c\0\u42f0\0\u0348"+
    "\0\u4344\0\u4398\0\u0348\0\u43ec\0\u4440\0\u4494\0\u44e8\0\u453c"+
    "\0\u4590\0\u45e4\0\u4638\0\u468c\0\u0b28\0\u46e0\0\u4734\0\u4788"+
    "\0\u47dc\0\u4830\0\u4884\0\u48d8\0\u492c\0\u4980\0\u0b28\0\u0b28"+
    "\0\u49d4\0\u4a28\0\u0b28\0\u0b28\0\u4a7c\0\u4ad0\0\u4b24\0\u4b78"+
    "\0\u4bcc\0\u4c20\0\u4c74\0\u0b28\0\u4cc8\0\u4d1c\0\u4d70\0\u4dc4"+
    "\0\u4e18\0\u0b28\0\u4e6c\0\u4ec0\0\u4f14\0\u4f68\0\u4fbc\0\u5010"+
    "\0\u5064\0\u50b8\0\u510c\0\u5160\0\u0348\0\u51b4\0\u0348\0\u5208"+
    "\0\u525c\0\u52b0\0\u5304\0\u5358\0\u53ac\0\u5400\0\u5454\0\u02a0"+
    "\0\u02a0\0\u02a0\0\u3480\0\u54a8\0\u02a0\0\u02a0\0\u02a0\0\u02a0"+
    "\0\u02a0\0\u02a0\0\u02a0\0\u02a0\0\u02a0\0\u54fc\0\u02a0\0\u02a0"+
    "\0\u02a0\0\u02a0\0\u02a0\0\u02a0\0\u02a0\0\u02a0\0\u02a0\0\u3b64"+
    "\0\u5550\0\u02a0\0\u02a0\0\u02a0\0\u02a0\0\u02a0\0\u02a0\0\u02a0"+
    "\0\u55a4\0\u55f8\0\u564c\0\u56a0\0\u0348\0\u56f4\0\u5748\0\u579c"+
    "\0\u0348\0\u0348\0\u57f0\0\u5844\0\u5898\0\u0348\0\u58ec\0\u5940"+
    "\0\u5994\0\u0348\0\u59e8\0\u5a3c\0\u5a90\0\u5ae4\0\u0348\0\u5b38"+
    "\0\u5b8c\0\u5be0\0\u5c34\0\u5c88\0\u5cdc\0\u0b28\0\u0b28\0\u5d30"+
    "\0\u5d84\0\u5dd8\0\u0b28\0\u5e2c\0\u5e80\0\u5ed4\0\u5f28\0\u5f7c"+
    "\0\u5fd0\0\u0b28\0\u6024\0\u6078\0\u60cc\0\u6120\0\u6174\0\u0b28"+
    "\0\u0b28\0\u61c8\0\u621c\0\u0b28\0\u6270\0\u62c4\0\u6318\0\u636c"+
    "\0\u63c0\0\u6414\0\u6468\0\u64bc\0\u0348\0\u6510\0\u6564\0\u65b8"+
    "\0\u660c\0\u6660\0\u66b4\0\u0348\0\u0348\0\u6708\0\u675c\0\u67b0"+
    "\0\u6804\0\u6858\0\u0348\0\u68ac\0\u0348\0\u6900\0\u0348\0\u6954"+
    "\0\u69a8\0\u0348\0\u69fc\0\u6a50\0\u0348\0\u0b28\0\u0b28\0\u6aa4"+
    "\0\u0b28\0\u0b28\0\u6af8\0\u6b4c\0\u6ba0\0\u6bf4\0\u6c48\0\u6c9c"+
    "\0\u6cf0\0\u6d44\0\u6d98\0\u6dec\0\u6e40\0\u6e94\0\u6ee8\0\u0b28"+
    "\0\u0b28\0\u6f3c\0\u6f90\0\u0348\0\u6fe4\0\u7038\0\u0348\0\u708c"+
    "\0\u70e0\0\u7134\0\u7188\0\u71dc\0\u7230\0\u7284\0\u0348\0\u02a0"+
    "\0\u72d8\0\u732c\0\u0348\0\u7380\0\u0348\0\u73d4\0\u7428\0\u0348"+
    "\0\u0348\0\u0348\0\u747c\0\u74d0\0\u0b28\0\u7524\0\u7578\0\u0b28"+
    "\0\u75cc\0\u7620\0\u7674\0\u0b28\0\u0b28\0\u0b28\0\u0b28\0\u0b28"+
    "\0\u76c8\0\u771c\0\u7770\0\u77c4\0\u7818\0\u786c\0\u78c0\0\u7914"+
    "\0\u7968\0\u0348\0\u0348\0\u79bc\0\u7a10\0\u0348\0\u7a64\0\u0348"+
    "\0\u0b28\0\u7ab8\0\u7b0c\0\u0b28\0\u0b28\0\u7b60\0\u0b28\0\u0348"+
    "\0\u7bb4\0\u0348\0\u0348\0\u7c08\0\u7c5c\0\u0348\0\u0348\0\u7cb0"+
    "\0\u02a0\0\u7d04\0\u0348\0\u0b28\0\u0b28\0\u7d58\0\u7dac\0\u7e00"+
    "\0\u0348\0\u7e54\0\u7ea8\0\u0b28\0\u0348\0\u7efc\0\u0348\0\u02a0"+
    "\0\u0348";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[625];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\11\2\12\1\0\1\12\1\13\1\11\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\3\34\1\35"+
    "\1\36\1\37\1\40\1\41\11\17\1\42\5\17\1\43"+
    "\7\17\1\44\1\11\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\17\1\56\2\17\1\57"+
    "\2\17\1\60\1\17\1\61\2\17\1\62\1\63\1\17"+
    "\1\64\1\65\1\66\1\0\1\11\2\12\1\0\1\12"+
    "\1\13\4\11\1\67\1\20\1\11\1\70\1\71\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\72\1\73\3\34"+
    "\1\74\1\36\1\75\1\76\1\41\1\77\1\100\1\101"+
    "\1\102\1\103\1\104\2\67\1\105\3\67\1\106\1\107"+
    "\1\110\1\111\1\112\1\113\1\114\1\115\1\116\1\117"+
    "\1\67\1\44\1\11\1\45\1\46\1\77\1\100\1\101"+
    "\1\102\1\103\1\104\2\67\1\105\2\67\1\106\1\107"+
    "\1\110\1\111\1\112\1\113\1\114\1\115\1\116\1\117"+
    "\1\67\1\120\1\11\1\66\1\0\1\11\2\12\1\0"+
    "\1\12\1\13\1\11\1\14\1\121\1\11\1\17\1\20"+
    "\1\122\1\123\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\4\34\1\35\1\36\1\37\1\40\1\41"+
    "\21\17\1\124\5\17\1\44\1\11\1\45\1\46\1\17"+
    "\1\125\1\126\1\127\1\130\1\131\2\17\1\132\3\17"+
    "\1\133\1\17\1\134\1\135\1\136\1\137\1\17\1\62"+
    "\1\63\1\17\1\64\1\65\1\66\1\0\1\140\1\141"+
    "\1\142\1\143\1\141\1\144\5\140\1\145\1\140\1\11"+
    "\1\146\1\147\1\150\1\151\1\152\1\153\1\154\1\155"+
    "\4\140\1\156\1\157\1\160\1\140\1\161\27\140\1\162"+
    "\1\163\1\164\1\165\26\140\1\166\1\140\1\167\1\143"+
    "\2\170\1\142\2\170\1\144\5\170\1\171\1\170\1\172"+
    "\1\173\1\174\1\175\1\176\1\177\1\200\1\201\1\202"+
    "\4\170\1\203\1\204\1\205\1\170\1\206\27\170\1\207"+
    "\1\210\1\211\1\212\26\170\1\213\1\170\1\214\1\170"+
    "\1\215\1\216\1\142\1\217\1\216\1\144\5\215\1\220"+
    "\1\215\1\11\1\221\1\222\1\223\1\224\1\225\1\226"+
    "\1\227\1\230\4\215\1\231\1\232\1\233\1\215\1\234"+
    "\27\215\1\235\1\236\1\237\1\240\26\215\1\241\1\215"+
    "\1\242\1\217\2\243\1\244\2\243\1\245\2\243\1\246"+
    "\2\243\1\247\2\243\1\250\1\251\1\252\1\253\1\254"+
    "\1\255\1\256\1\257\4\243\1\260\1\261\1\262\1\243"+
    "\1\263\27\243\1\264\1\265\1\266\1\267\26\243\1\270"+
    "\1\243\1\271\3\243\1\244\2\243\1\245\2\243\1\272"+
    "\2\243\1\247\2\243\1\250\1\251\1\252\1\253\1\254"+
    "\1\255\1\256\1\257\4\243\1\260\1\261\1\262\1\243"+
    "\1\263\27\243\1\264\1\265\1\266\1\267\26\243\1\270"+
    "\1\243\1\271\1\243\126\0\1\12\121\0\1\17\11\0"+
    "\1\17\13\0\4\17\5\0\27\17\4\0\26\17\3\0"+
    "\1\17\13\0\1\273\124\0\1\274\127\0\1\275\4\0"+
    "\1\276\122\0\1\277\1\0\4\34\127\0\1\300\123\0"+
    "\1\76\123\0\1\301\66\0\1\17\11\0\1\17\13\0"+
    "\4\17\5\0\1\302\26\17\4\0\26\17\3\0\2\17"+
    "\11\0\1\17\13\0\4\17\5\0\1\303\26\17\4\0"+
    "\26\17\3\0\2\17\11\0\1\17\13\0\4\17\5\0"+
    "\27\17\4\0\17\17\1\304\6\17\3\0\2\17\11\0"+
    "\1\17\13\0\4\17\5\0\27\17\4\0\17\17\1\305"+
    "\6\17\3\0\2\17\11\0\1\17\13\0\4\17\5\0"+
    "\27\17\4\0\1\306\6\17\1\307\2\17\1\310\2\17"+
    "\1\311\10\17\3\0\2\17\11\0\1\17\13\0\4\17"+
    "\5\0\27\17\4\0\15\17\1\312\10\17\3\0\2\17"+
    "\11\0\1\17\13\0\4\17\5\0\27\17\4\0\12\17"+
    "\1\313\13\17\3\0\2\17\11\0\1\17\13\0\4\17"+
    "\5\0\27\17\4\0\12\17\1\314\2\17\1\315\10\17"+
    "\3\0\2\17\11\0\1\17\13\0\4\17\5\0\27\17"+
    "\4\0\4\17\1\316\21\17\3\0\2\17\11\0\1\17"+
    "\13\0\4\17\5\0\27\17\4\0\5\17\1\317\6\17"+
    "\1\320\11\17\3\0\2\17\11\0\1\17\13\0\4\17"+
    "\5\0\27\17\4\0\1\321\25\17\3\0\2\17\11\0"+
    "\1\17\13\0\4\17\5\0\27\17\4\0\17\17\1\322"+
    "\6\17\3\0\2\17\11\0\1\17\13\0\4\17\5\0"+
    "\27\17\4\0\2\17\1\323\16\17\1\324\2\17\1\325"+
    "\1\17\3\0\2\17\11\0\1\17\13\0\4\17\5\0"+
    "\27\17\4\0\15\17\1\326\10\17\3\0\2\17\11\0"+
    "\1\17\13\0\4\17\5\0\27\17\4\0\7\17\1\327"+
    "\16\17\3\0\1\17\121\0\1\330\2\0\1\67\11\0"+
    "\1\67\13\0\4\67\5\0\27\67\4\0\26\67\3\0"+
    "\1\67\20\0\1\331\140\0\1\332\123\0\1\300\1\14"+
    "\65\0\1\67\11\0\1\67\13\0\4\67\5\0\15\67"+
    "\1\333\2\67\1\334\6\67\4\0\14\67\1\333\2\67"+
    "\1\334\6\67\3\0\2\67\11\0\1\67\13\0\4\67"+
    "\5\0\4\67\1\335\11\67\1\336\1\67\1\337\6\67"+
    "\4\0\4\67\1\335\10\67\1\336\1\67\1\337\6\67"+
    "\3\0\2\67\11\0\1\67\13\0\4\67\5\0\1\340"+
    "\6\67\1\341\6\67\1\342\10\67\4\0\1\340\6\67"+
    "\1\341\5\67\1\342\10\67\3\0\2\67\11\0\1\67"+
    "\13\0\4\67\5\0\16\67\1\343\10\67\4\0\15\67"+
    "\1\343\10\67\3\0\2\67\11\0\1\67\13\0\4\67"+
    "\5\0\13\67\1\344\1\67\1\345\11\67\4\0\12\67"+
    "\1\344\1\67\1\345\11\67\3\0\2\67\11\0\1\67"+
    "\13\0\4\67\5\0\16\67\1\346\4\67\1\347\3\67"+
    "\4\0\15\67\1\346\4\67\1\347\3\67\3\0\2\67"+
    "\11\0\1\67\13\0\4\67\5\0\5\67\1\350\7\67"+
    "\1\351\11\67\4\0\5\67\1\350\6\67\1\351\11\67"+
    "\3\0\2\67\11\0\1\67\13\0\4\67\5\0\16\67"+
    "\1\352\10\67\4\0\15\67\1\352\10\67\3\0\2\67"+
    "\11\0\1\67\13\0\4\67\5\0\16\67\1\353\10\67"+
    "\4\0\15\67\1\353\10\67\3\0\2\67\11\0\1\67"+
    "\13\0\4\67\5\0\5\67\1\354\12\67\1\355\6\67"+
    "\4\0\5\67\1\354\11\67\1\355\6\67\3\0\2\67"+
    "\11\0\1\67\13\0\4\67\5\0\1\356\17\67\1\357"+
    "\6\67\4\0\1\356\16\67\1\357\6\67\3\0\2\67"+
    "\11\0\1\67\13\0\4\67\5\0\4\67\1\360\22\67"+
    "\4\0\4\67\1\360\21\67\3\0\2\67\11\0\1\67"+
    "\13\0\4\67\5\0\4\67\1\361\15\67\1\362\2\67"+
    "\1\363\1\67\4\0\4\67\1\361\14\67\1\362\2\67"+
    "\1\363\1\67\3\0\2\67\11\0\1\67\13\0\4\67"+
    "\5\0\7\67\1\364\6\67\1\365\7\67\1\366\4\0"+
    "\7\67\1\364\5\67\1\365\10\67\3\0\2\67\11\0"+
    "\1\67\13\0\4\67\5\0\15\67\1\367\11\67\4\0"+
    "\14\67\1\367\11\67\3\0\2\67\11\0\1\67\13\0"+
    "\4\67\5\0\1\370\26\67\4\0\1\370\25\67\3\0"+
    "\2\67\11\0\1\67\13\0\4\67\5\0\7\67\1\371"+
    "\1\372\16\67\4\0\7\67\1\371\1\372\15\67\3\0"+
    "\1\67\2\373\1\0\117\373\1\374\1\373\1\17\11\0"+
    "\1\17\13\0\4\17\5\0\27\17\4\0\21\17\1\324"+
    "\4\17\3\0\2\17\11\0\1\17\13\0\4\17\5\0"+
    "\27\17\4\0\15\17\1\375\1\17\1\305\6\17\3\0"+
    "\2\17\11\0\1\17\13\0\4\17\5\0\27\17\4\0"+
    "\1\306\6\17\1\376\2\17\1\377\2\17\1\u0100\10\17"+
    "\3\0\2\17\11\0\1\17\13\0\4\17\5\0\27\17"+
    "\4\0\4\17\1\u0101\10\17\1\312\10\17\3\0\2\17"+
    "\11\0\1\17\13\0\4\17\5\0\27\17\4\0\12\17"+
    "\1\313\12\17\1\u0102\3\0\2\17\11\0\1\17\13\0"+
    "\4\17\5\0\27\17\4\0\1\u0103\11\17\1\u0104\2\17"+
    "\1\u0105\10\17\3\0\2\17\11\0\1\17\13\0\4\17"+
    "\5\0\27\17\4\0\5\17\1\317\6\17\1\u0106\11\17"+
    "\3\0\2\17\11\0\1\17\13\0\4\17\5\0\27\17"+
    "\4\0\4\17\1\u0107\15\17\1\u0108\3\17\3\0\2\17"+
    "\11\0\1\17\13\0\4\17\5\0\27\17\4\0\17\17"+
    "\1\u0109\2\17\1\u010a\3\17\3\0\2\17\11\0\1\17"+
    "\13\0\4\17\5\0\27\17\4\0\4\17\1\u010b\21\17"+
    "\3\0\2\17\11\0\1\17\13\0\4\17\5\0\27\17"+
    "\4\0\22\17\1\u010c\1\17\1\325\1\17\3\0\2\17"+
    "\11\0\1\17\13\0\4\17\5\0\27\17\4\0\7\17"+
    "\1\u010d\7\17\1\u010e\6\17\3\0\1\17\15\0\1\u010f"+
    "\110\0\1\142\136\0\1\u010f\17\0\1\300\103\0\1\u010f"+
    "\17\0\1\301\66\0\2\u0110\4\0\2\u0110\1\u0111\4\u0110"+
    "\1\u0112\10\u0110\2\u0113\1\u0114\36\u0110\1\u0115\3\u0110\1\u0116"+
    "\3\u0110\1\u0117\6\u0110\1\u0118\2\u0110\1\u0119\1\u0110\1\u011a"+
    "\7\u0110\1\0\2\u011b\1\0\2\u011b\1\0\7\u011b\1\u011c"+
    "\51\u011b\1\0\36\u011b\1\0\2\u011b\1\0\7\u011b\1\u011c"+
    "\17\u011b\1\u011d\31\u011b\1\0\36\u011b\1\0\2\u011b\1\0"+
    "\7\u011b\1\u011c\17\u011b\1\u011e\31\u011b\1\0\34\u011b\2\u0110"+
    "\4\0\2\u0110\1\u011f\4\u0110\1\u0120\10\u0110\2\u0121\1\u0122"+
    "\36\u0110\1\u0123\3\u0110\1\u0124\3\u0110\1\u0125\6\u0110\1\u0126"+
    "\2\u0110\1\u0127\1\u0110\1\u0128\7\u0110\16\0\1\u0129\123\0"+
    "\1\u0129\17\0\1\300\103\0\1\u0129\17\0\1\301\66\0"+
    "\2\u0110\4\0\2\u0110\1\u012a\4\u0110\1\u012b\10\u0110\2\u012c"+
    "\1\u012d\36\u0110\1\u012e\3\u0110\1\u012f\3\u0110\1\u0130\6\u0110"+
    "\1\u0131\2\u0110\1\u0132\1\u0110\1\u0133\7\u0110\1\0\2\243"+
    "\1\0\2\243\1\0\2\243\1\0\56\243\1\0\34\243"+
    "\2\0\1\244\121\0\2\243\1\0\2\243\1\0\2\243"+
    "\1\0\24\243\1\u0134\31\243\1\0\36\243\1\0\2\243"+
    "\1\0\2\243\1\0\24\243\1\u0135\31\243\1\0\34\243"+
    "\2\u0110\4\0\2\u0110\1\u0136\4\u0110\1\u0137\10\u0110\2\u0138"+
    "\1\u0139\36\u0110\1\u013a\3\u0110\1\u013b\3\u0110\1\u013c\6\u0110"+
    "\1\u013d\2\u0110\1\u013e\1\u0110\1\u013f\7\u0110\51\0\1\u0140"+
    "\5\0\1\u0141\45\0\20\u0142\1\u0143\103\u0142\2\276\1\374"+
    "\2\276\1\u0144\116\276\26\0\4\u0145\72\0\1\17\11\0"+
    "\1\17\13\0\4\17\5\0\24\17\1\u0146\2\17\4\0"+
    "\26\17\3\0\2\17\11\0\1\17\13\0\4\17\5\0"+
    "\21\17\1\u0147\5\17\4\0\26\17\3\0\2\17\11\0"+
    "\1\17\13\0\4\17\5\0\27\17\4\0\17\17\1\u0148"+
    "\6\17\3\0\2\17\11\0\1\17\13\0\4\17\5\0"+
    "\27\17\4\0\4\17\1\u0149\21\17\3\0\2\17\11\0"+
    "\1\17\13\0\4\17\5\0\27\17\4\0\20\17\1\u014a"+
    "\5\17\3\0\2\17\11\0\1\17\13\0\4\17\5\0"+
    "\27\17\4\0\1\u014b\25\17\3\0\2\17\11\0\1\17"+
    "\13\0\4\17\5\0\27\17\4\0\17\17\1\u014c\6\17"+
    "\3\0\2\17\11\0\1\17\13\0\4\17\5\0\27\17"+
    "\4\0\14\17\1\u014d\11\17\3\0\2\17\11\0\1\17"+
    "\13\0\4\17\5\0\27\17\4\0\20\17\1\u014e\5\17"+
    "\3\0\2\17\11\0\1\17\13\0\4\17\5\0\27\17"+
    "\4\0\15\17\1\u014f\10\17\3\0\2\17\11\0\1\17"+
    "\13\0\4\17\5\0\27\17\4\0\17\17\1\u0150\6\17"+
    "\3\0\2\17\11\0\1\17\13\0\4\17\5\0\27\17"+
    "\4\0\21\17\1\u0151\4\17\3\0\2\17\11\0\1\17"+
    "\13\0\4\17\5\0\27\17\4\0\2\17\1\u0152\16\17"+
    "\1\u0153\4\17\3\0\2\17\11\0\1\17\13\0\4\17"+
    "\5\0\27\17\4\0\10\17\1\u0154\15\17\3\0\2\17"+
    "\11\0\1\17\13\0\4\17\5\0\27\17\4\0\10\17"+
    "\1\u0155\15\17\3\0\2\17\11\0\1\17\13\0\4\17"+
    "\5\0\27\17\4\0\1\u0156\25\17\3\0\2\17\11\0"+
    "\1\17\13\0\4\17\5\0\27\17\4\0\17\17\1\u0157"+
    "\6\17\3\0\2\17\11\0\1\17\13\0\4\17\5\0"+
    "\27\17\4\0\10\17\1\u0158\15\17\3\0\2\17\11\0"+
    "\1\17\13\0\4\17\5\0\27\17\4\0\10\17\1\u0159"+
    "\15\17\3\0\2\17\11\0\1\17\13\0\4\17\5\0"+
    "\27\17\4\0\10\17\1\u015a\15\17\3\0\1\17\20\u015b"+
    "\1\u015c\103\u015b\1\67\11\0\1\67\13\0\4\67\5\0"+
    "\3\67\1\u015d\23\67\4\0\3\67\1\u015d\22\67\3\0"+
    "\2\67\11\0\1\67\13\0\4\67\5\0\20\67\1\u015e"+
    "\6\67\4\0\17\67\1\u015e\6\67\3\0\2\67\11\0"+
    "\1\67\13\0\4\67\5\0\6\67\1\u015f\20\67\4\0"+
    "\6\67\1\u015f\17\67\3\0\2\67\11\0\1\67\13\0"+
    "\4\67\5\0\16\67\1\u0160\10\67\4\0\15\67\1\u0160"+
    "\10\67\3\0\2\67\11\0\1\67\13\0\4\67\5\0"+
    "\4\67\1\u0161\22\67\4\0\4\67\1\u0161\21\67\3\0"+
    "\2\67\11\0\1\67\13\0\4\67\5\0\21\67\1\u0162"+
    "\5\67\4\0\20\67\1\u0162\5\67\3\0\2\67\11\0"+
    "\1\67\13\0\4\67\5\0\1\u0163\26\67\4\0\1\u0163"+
    "\25\67\3\0\2\67\11\0\1\67\13\0\4\67\5\0"+
    "\15\67\1\u0164\11\67\4\0\14\67\1\u0164\11\67\3\0"+
    "\2\67\11\0\1\67\13\0\4\67\5\0\25\67\1\u0165"+
    "\1\67\4\0\24\67\1\u0165\1\67\3\0\2\67\11\0"+
    "\1\67\13\0\4\67\5\0\21\67\1\u0166\5\67\4\0"+
    "\20\67\1\u0166\5\67\3\0\2\67\11\0\1\67\13\0"+
    "\4\67\5\0\3\67\1\u0167\23\67\4\0\3\67\1\u0167"+
    "\22\67\3\0\2\67\11\0\1\67\13\0\4\67\5\0"+
    "\20\67\1\u0168\6\67\4\0\17\67\1\u0168\6\67\3\0"+
    "\2\67\11\0\1\67\13\0\4\67\5\0\15\67\1\u0169"+
    "\11\67\4\0\14\67\1\u0169\11\67\3\0\2\67\11\0"+
    "\1\67\13\0\4\67\5\0\22\67\1\u016a\4\67\4\0"+
    "\21\67\1\u016a\4\67\3\0\2\67\11\0\1\67\13\0"+
    "\4\67\5\0\3\67\1\u016b\23\67\4\0\3\67\1\u016b"+
    "\22\67\3\0\2\67\11\0\1\67\13\0\4\67\5\0"+
    "\22\67\1\u016c\4\67\4\0\21\67\1\u016c\4\67\3\0"+
    "\2\67\11\0\1\67\13\0\4\67\5\0\2\67\1\u016d"+
    "\24\67\4\0\2\67\1\u016d\23\67\3\0\2\67\11\0"+
    "\1\67\13\0\4\67\5\0\10\67\1\u016e\5\67\1\u016f"+
    "\10\67\4\0\10\67\1\u016e\4\67\1\u016f\10\67\3\0"+
    "\2\67\11\0\1\67\13\0\4\67\5\0\1\u0170\1\67"+
    "\1\u0171\14\67\1\u0172\2\67\1\u0173\4\67\4\0\1\u0170"+
    "\1\67\1\u0171\13\67\1\u0172\2\67\1\u0173\4\67\3\0"+
    "\2\67\11\0\1\67\13\0\4\67\5\0\22\67\1\u0174"+
    "\4\67\4\0\21\67\1\u0174\4\67\3\0\2\67\11\0"+
    "\1\67\13\0\4\67\5\0\20\67\1\u0175\6\67\4\0"+
    "\17\67\1\u0175\6\67\3\0\2\67\11\0\1\67\13\0"+
    "\4\67\5\0\10\67\1\u0176\16\67\4\0\10\67\1\u0176"+
    "\15\67\3\0\2\67\11\0\1\67\13\0\4\67\5\0"+
    "\4\67\1\u0177\22\67\4\0\4\67\1\u0177\21\67\3\0"+
    "\2\67\11\0\1\67\13\0\4\67\5\0\17\67\1\u0178"+
    "\7\67\4\0\16\67\1\u0178\7\67\3\0\2\67\11\0"+
    "\1\67\13\0\4\67\5\0\22\67\1\u0179\4\67\4\0"+
    "\21\67\1\u0179\4\67\3\0\2\67\11\0\1\67\13\0"+
    "\4\67\5\0\20\67\1\u017a\6\67\4\0\17\67\1\u017a"+
    "\6\67\3\0\2\67\11\0\1\67\13\0\4\67\5\0"+
    "\10\67\1\u017b\16\67\4\0\10\67\1\u017b\15\67\3\0"+
    "\2\67\11\0\1\67\13\0\4\67\5\0\22\67\1\u017c"+
    "\4\67\4\0\21\67\1\u017c\4\67\3\0\1\67\1\17"+
    "\11\0\1\17\13\0\4\17\5\0\27\17\4\0\15\17"+
    "\1\u017d\10\17\3\0\2\17\11\0\1\17\13\0\4\17"+
    "\5\0\27\17\4\0\1\u017e\25\17\3\0\2\17\11\0"+
    "\1\17\13\0\4\17\5\0\27\17\4\0\1\u017f\25\17"+
    "\3\0\2\17\11\0\1\17\13\0\4\17\5\0\27\17"+
    "\4\0\14\17\1\u0180\11\17\3\0\2\17\11\0\1\17"+
    "\13\0\4\17\5\0\27\17\4\0\5\17\1\u0181\20\17"+
    "\3\0\2\17\11\0\1\17\13\0\4\17\5\0\27\17"+
    "\4\0\21\17\1\u0182\4\17\3\0\2\17\11\0\1\17"+
    "\13\0\4\17\5\0\27\17\4\0\12\17\1\u0183\13\17"+
    "\3\0\2\17\11\0\1\17\13\0\4\17\5\0\27\17"+
    "\4\0\15\17\1\u0184\10\17\3\0\2\17\11\0\1\17"+
    "\13\0\4\17\5\0\27\17\4\0\17\17\1\u0185\6\17"+
    "\3\0\2\17\11\0\1\17\13\0\4\17\5\0\27\17"+
    "\4\0\21\17\1\u0186\4\17\3\0\2\17\11\0\1\17"+
    "\13\0\4\17\5\0\27\17\4\0\24\17\1\u0187\1\17"+
    "\3\0\2\17\11\0\1\17\13\0\4\17\5\0\27\17"+
    "\4\0\12\17\1\u0188\13\17\3\0\2\17\11\0\1\17"+
    "\13\0\4\17\5\0\27\17\4\0\10\17\1\u0189\4\17"+
    "\1\u018a\10\17\3\0\2\17\11\0\1\17\13\0\4\17"+
    "\5\0\27\17\4\0\1\17\1\u018b\24\17\3\0\2\17"+
    "\11\0\1\17\13\0\4\17\5\0\27\17\4\0\21\17"+
    "\1\u018c\4\17\3\0\2\17\11\0\1\17\13\0\4\17"+
    "\5\0\27\17\4\0\16\17\1\u018d\7\17\3\0\2\17"+
    "\11\0\1\17\13\0\4\17\5\0\27\17\4\0\10\17"+
    "\1\u018e\15\17\3\0\2\17\11\0\1\17\13\0\4\17"+
    "\5\0\27\17\4\0\22\17\1\u018f\3\17\3\0\1\17"+
    "\15\0\1\u0190\123\0\1\u0191\123\0\1\u0192\10\0\3\u0193"+
    "\110\0\1\u0192\10\0\3\u0194\110\0\1\u0195\123\0\1\u0196"+
    "\123\0\1\u0197\123\0\1\u0198\123\0\1\u0199\123\0\1\u019a"+
    "\106\0\2\u011b\1\0\2\u011b\1\0\7\u011b\1\0\51\u011b"+
    "\1\0\34\u011b\15\0\1\u019b\123\0\1\u019c\123\0\1\u019d"+
    "\10\0\3\u0122\110\0\1\u019d\10\0\3\u019e\110\0\1\u019f"+
    "\123\0\1\u01a0\123\0\1\u01a1\123\0\1\u01a2\123\0\1\u01a3"+
    "\123\0\1\u01a4\123\0\1\u01a5\123\0\1\u01a6\123\0\1\u01a7"+
    "\10\0\3\u01a8\110\0\1\u01a7\10\0\3\u01a9\110\0\1\u01aa"+
    "\123\0\1\u01ab\123\0\1\u01ac\123\0\1\u01ad\123\0\1\u01ae"+
    "\123\0\1\u01af\134\0\3\u0139\121\0\3\u01b0\132\0\1\u01b1"+
    "\123\0\1\u01b2\17\0\1\u01b3\44\0\20\u0142\1\u01b4\103\u0142"+
    "\20\0\1\u0143\4\0\1\374\100\0\1\374\121\0\1\17"+
    "\11\0\1\17\13\0\4\17\5\0\1\u01b5\26\17\4\0"+
    "\26\17\3\0\2\17\11\0\1\17\13\0\4\17\5\0"+
    "\2\17\1\u01b6\24\17\4\0\26\17\3\0\2\17\11\0"+
    "\1\17\13\0\4\17\5\0\27\17\4\0\4\17\1\u01b7"+
    "\21\17\3\0\2\17\11\0\1\17\13\0\4\17\5\0"+
    "\27\17\4\0\1\u01b8\25\17\3\0\2\17\11\0\1\17"+
    "\13\0\4\17\5\0\27\17\4\0\4\17\1\u01b9\21\17"+
    "\3\0\2\17\11\0\1\17\13\0\4\17\5\0\27\17"+
    "\4\0\17\17\1\u01ba\6\17\3\0\2\17\11\0\1\17"+
    "\13\0\4\17\5\0\27\17\4\0\20\17\1\u01bb\5\17"+
    "\3\0\2\17\11\0\1\17\13\0\4\17\5\0\27\17"+
    "\4\0\20\17\1\u01bc\1\u01bd\4\17\3\0\2\17\11\0"+
    "\1\17\13\0\4\17\5\0\27\17\4\0\4\17\1\u01be"+
    "\21\17\3\0\2\17\11\0\1\17\13\0\4\17\5\0"+
    "\27\17\4\0\1\u01bf\25\17\3\0\2\17\11\0\1\17"+
    "\13\0\4\17\5\0\27\17\4\0\2\17\1\u01c0\23\17"+
    "\3\0\2\17\11\0\1\17\13\0\4\17\5\0\27\17"+
    "\4\0\12\17\1\u01c1\13\17\3\0\2\17\11\0\1\17"+
    "\13\0\4\17\5\0\27\17\4\0\14\17\1\u01c2\11\17"+
    "\3\0\2\17\11\0\1\17\13\0\4\17\5\0\27\17"+
    "\4\0\14\17\1\u01c3\11\17\3\0\2\17\11\0\1\17"+
    "\13\0\4\17\5\0\27\17\4\0\14\17\1\u01c4\11\17"+
    "\3\0\2\17\11\0\1\17\13\0\4\17\5\0\27\17"+
    "\4\0\10\17\1\u01c5\15\17\3\0\2\17\11\0\1\17"+
    "\13\0\4\17\5\0\27\17\4\0\21\17\1\u01c6\4\17"+
    "\3\0\2\17\11\0\1\17\13\0\4\17\5\0\27\17"+
    "\4\0\3\17\1\u01c7\22\17\3\0\2\17\11\0\1\17"+
    "\13\0\4\17\5\0\27\17\4\0\12\17\1\u01c8\13\17"+
    "\3\0\1\17\20\u015b\1\u01c9\103\u015b\17\0\1\374\1\u015c"+
    "\103\0\1\67\11\0\1\67\13\0\4\67\5\0\1\u01ca"+
    "\26\67\4\0\1\u01ca\25\67\3\0\2\67\11\0\1\67"+
    "\13\0\4\67\5\0\10\67\1\u01cb\16\67\4\0\10\67"+
    "\1\u01cb\15\67\3\0\2\67\11\0\1\67\13\0\4\67"+
    "\5\0\13\67\1\u01cc\13\67\4\0\12\67\1\u01cc\13\67"+
    "\3\0\2\67\11\0\1\67\13\0\4\67\5\0\1\u01cd"+
    "\26\67\4\0\1\u01cd\25\67\3\0\2\67\11\0\1\67"+
    "\13\0\4\67\5\0\4\67\1\u01ce\22\67\4\0\4\67"+
    "\1\u01ce\21\67\3\0\2\67\11\0\1\67\13\0\4\67"+
    "\5\0\20\67\1\u01cf\6\67\4\0\17\67\1\u01cf\6\67"+
    "\3\0\2\67\11\0\1\67\13\0\4\67\5\0\21\67"+
    "\1\u01d0\1\u01d1\4\67\4\0\20\67\1\u01d0\1\u01d1\4\67"+
    "\3\0\2\67\11\0\1\67\13\0\4\67\5\0\15\67"+
    "\1\u01d2\11\67\4\0\14\67\1\u01d2\11\67\3\0\2\67"+
    "\11\0\1\67\13\0\4\67\5\0\4\67\1\u01d3\22\67"+
    "\4\0\4\67\1\u01d3\21\67\3\0\2\67\11\0\1\67"+
    "\13\0\4\67\5\0\2\67\1\u01d4\24\67\4\0\2\67"+
    "\1\u01d4\23\67\3\0\2\67\11\0\1\67\13\0\4\67"+
    "\5\0\4\67\1\u01d5\22\67\4\0\4\67\1\u01d5\21\67"+
    "\3\0\2\67\11\0\1\67\13\0\4\67\5\0\12\67"+
    "\1\u01d6\14\67\4\0\11\67\1\u01d6\14\67\3\0\2\67"+
    "\11\0\1\67\13\0\4\67\5\0\15\67\1\u01d7\11\67"+
    "\4\0\14\67\1\u01d7\11\67\3\0\2\67\11\0\1\67"+
    "\13\0\4\67\5\0\2\67\1\u01d8\3\67\1\u01d9\20\67"+
    "\4\0\2\67\1\u01d8\3\67\1\u01d9\17\67\3\0\2\67"+
    "\11\0\1\67\13\0\4\67\5\0\13\67\1\u01da\13\67"+
    "\4\0\12\67\1\u01da\13\67\3\0\2\67\11\0\1\67"+
    "\13\0\4\67\5\0\16\67\1\u01db\10\67\4\0\15\67"+
    "\1\u01db\10\67\3\0\2\67\11\0\1\67\13\0\4\67"+
    "\5\0\4\67\1\u01dc\22\67\4\0\4\67\1\u01dc\21\67"+
    "\3\0\2\67\11\0\1\67\13\0\4\67\5\0\23\67"+
    "\1\u01dd\3\67\4\0\22\67\1\u01dd\3\67\3\0\2\67"+
    "\11\0\1\67\13\0\4\67\5\0\10\67\1\u01de\16\67"+
    "\4\0\10\67\1\u01de\15\67\3\0\2\67\11\0\1\67"+
    "\13\0\4\67\5\0\22\67\1\u01df\4\67\4\0\21\67"+
    "\1\u01df\4\67\3\0\2\67\11\0\1\67\13\0\4\67"+
    "\5\0\15\67\1\u01e0\11\67\4\0\14\67\1\u01e0\11\67"+
    "\3\0\2\67\11\0\1\67\13\0\4\67\5\0\4\67"+
    "\1\u01e1\22\67\4\0\4\67\1\u01e1\21\67\3\0\2\67"+
    "\11\0\1\67\13\0\4\67\5\0\10\67\1\u01e2\16\67"+
    "\4\0\10\67\1\u01e2\15\67\3\0\2\67\11\0\1\67"+
    "\13\0\4\67\5\0\13\67\1\u01e3\13\67\4\0\12\67"+
    "\1\u01e3\13\67\3\0\2\67\11\0\1\67\13\0\4\67"+
    "\5\0\7\67\1\u01e4\17\67\4\0\7\67\1\u01e4\16\67"+
    "\3\0\1\67\1\17\11\0\1\17\13\0\4\17\5\0"+
    "\27\17\4\0\12\17\1\u01e5\13\17\3\0\2\17\11\0"+
    "\1\17\13\0\4\17\5\0\27\17\4\0\17\17\1\u01e6"+
    "\6\17\3\0\2\17\11\0\1\17\13\0\4\17\5\0"+
    "\27\17\4\0\20\17\1\u01e7\5\17\3\0\2\17\11\0"+
    "\1\17\13\0\4\17\5\0\27\17\4\0\21\17\1\u01bd"+
    "\4\17\3\0\2\17\11\0\1\17\13\0\4\17\5\0"+
    "\27\17\4\0\1\u01e8\25\17\3\0\2\17\11\0\1\17"+
    "\13\0\4\17\5\0\27\17\4\0\4\17\1\u01e9\21\17"+
    "\3\0\2\17\11\0\1\17\13\0\4\17\5\0\27\17"+
    "\4\0\20\17\1\u01ea\5\17\3\0\2\17\11\0\1\17"+
    "\13\0\4\17\5\0\27\17\4\0\1\u01eb\25\17\3\0"+
    "\2\17\11\0\1\17\13\0\4\17\5\0\27\17\4\0"+
    "\10\17\1\u01ec\15\17\3\0\2\17\11\0\1\17\13\0"+
    "\4\17\5\0\27\17\4\0\12\17\1\u01ed\13\17\3\0"+
    "\2\17\11\0\1\17\13\0\4\17\5\0\27\17\4\0"+
    "\14\17\1\u01ee\6\17\1\u01ef\2\17\3\0\2\17\11\0"+
    "\1\17\13\0\4\17\5\0\27\17\4\0\21\17\1\u01f0"+
    "\4\17\3\0\2\17\11\0\1\17\13\0\4\17\5\0"+
    "\27\17\4\0\12\17\1\u01f1\13\17\3\0\2\17\11\0"+
    "\1\17\13\0\4\17\5\0\27\17\4\0\22\17\1\u01f2"+
    "\3\17\3\0\2\17\11\0\1\17\13\0\4\17\5\0"+
    "\27\17\4\0\4\17\1\u01f3\21\17\3\0\2\17\11\0"+
    "\1\17\13\0\4\17\5\0\27\17\4\0\20\17\1\u01f4"+
    "\5\17\3\0\2\17\11\0\1\17\13\0\4\17\5\0"+
    "\27\17\4\0\4\17\1\u01f5\21\17\3\0\1\17\15\0"+
    "\1\u0192\123\0\1\u019d\123\0\1\u01a7\171\0\1\u01f6\120\0"+
    "\1\u01f7\120\0\1\u01f8\46\0\20\u0142\1\u01b4\4\u0142\1\374"+
    "\76\u0142\1\17\11\0\1\17\13\0\4\17\5\0\1\u01f9"+
    "\26\17\4\0\26\17\3\0\2\17\11\0\1\17\13\0"+
    "\4\17\5\0\27\17\4\0\6\17\1\u01fa\17\17\3\0"+
    "\2\17\11\0\1\17\13\0\4\17\5\0\27\17\4\0"+
    "\11\17\1\u01fb\14\17\3\0\2\17\11\0\1\17\13\0"+
    "\4\17\5\0\27\17\4\0\2\17\1\u01fc\23\17\3\0"+
    "\2\17\11\0\1\17\13\0\4\17\5\0\27\17\4\0"+
    "\21\17\1\u01fd\4\17\3\0\2\17\11\0\1\17\13\0"+
    "\4\17\5\0\27\17\4\0\10\17\1\u01fe\15\17\3\0"+
    "\2\17\11\0\1\17\13\0\4\17\5\0\27\17\4\0"+
    "\21\17\1\u0150\4\17\3\0\2\17\11\0\1\17\13\0"+
    "\4\17\5\0\27\17\4\0\7\17\1\u01ff\16\17\3\0"+
    "\2\17\11\0\1\17\13\0\4\17\5\0\27\17\4\0"+
    "\22\17\1\u0200\3\17\3\0\2\17\11\0\1\17\13\0"+
    "\4\17\5\0\27\17\4\0\21\17\1\u0201\4\17\3\0"+
    "\2\17\11\0\1\17\13\0\4\17\5\0\27\17\4\0"+
    "\5\17\1\u0202\20\17\3\0\2\17\11\0\1\17\13\0"+
    "\4\17\5\0\27\17\4\0\14\17\1\u0203\11\17\3\0"+
    "\2\17\11\0\1\17\13\0\4\17\5\0\27\17\4\0"+
    "\2\17\1\u0204\23\17\3\0\2\17\11\0\1\17\13\0"+
    "\4\17\5\0\27\17\4\0\4\17\1\u0205\21\17\3\0"+
    "\1\17\17\u015b\1\374\1\u01c9\103\u015b\1\67\11\0\1\67"+
    "\13\0\4\67\5\0\26\67\1\u0206\4\0\26\67\3\0"+
    "\2\67\11\0\1\67\13\0\4\67\5\0\15\67\1\u0207"+
    "\11\67\4\0\14\67\1\u0207\11\67\3\0\2\67\11\0"+
    "\1\67\13\0\4\67\5\0\4\67\1\u0208\22\67\4\0"+
    "\4\67\1\u0208\21\67\3\0\2\67\11\0\1\67\13\0"+
    "\4\67\5\0\12\67\1\u0209\14\67\4\0\11\67\1\u0209"+
    "\14\67\3\0\2\67\11\0\1\67\13\0\4\67\5\0"+
    "\22\67\1\u020a\4\67\4\0\21\67\1\u020a\4\67\3\0"+
    "\2\67\11\0\1\67\13\0\4\67\5\0\10\67\1\u020b"+
    "\16\67\4\0\10\67\1\u020b\15\67\3\0\2\67\11\0"+
    "\1\67\13\0\4\67\5\0\22\67\1\u020c\4\67\4\0"+
    "\21\67\1\u020c\4\67\3\0\2\67\11\0\1\67\13\0"+
    "\4\67\5\0\22\67\1\u020d\4\67\4\0\21\67\1\u020d"+
    "\4\67\3\0\2\67\11\0\1\67\13\0\4\67\5\0"+
    "\6\67\1\u020e\20\67\4\0\6\67\1\u020e\17\67\3\0"+
    "\2\67\11\0\1\67\13\0\4\67\5\0\4\67\1\u020f"+
    "\22\67\4\0\4\67\1\u020f\21\67\3\0\2\67\11\0"+
    "\1\67\13\0\4\67\5\0\22\67\1\u0210\4\67\4\0"+
    "\21\67\1\u0210\4\67\3\0\2\67\11\0\1\67\13\0"+
    "\4\67\5\0\4\67\1\u0211\22\67\4\0\4\67\1\u0211"+
    "\21\67\3\0\2\67\11\0\1\67\13\0\4\67\5\0"+
    "\20\67\1\u0212\6\67\4\0\17\67\1\u0212\6\67\3\0"+
    "\2\67\11\0\1\67\13\0\4\67\5\0\20\67\1\u0213"+
    "\6\67\4\0\17\67\1\u0213\6\67\3\0\2\67\11\0"+
    "\1\67\13\0\4\67\5\0\1\u0214\26\67\4\0\1\u0214"+
    "\25\67\3\0\2\67\11\0\1\67\13\0\4\67\5\0"+
    "\20\67\1\u0215\6\67\4\0\17\67\1\u0215\6\67\3\0"+
    "\2\67\11\0\1\67\13\0\4\67\5\0\15\67\1\u0216"+
    "\11\67\4\0\14\67\1\u0216\11\67\3\0\2\67\11\0"+
    "\1\67\13\0\4\67\5\0\2\67\1\u0217\24\67\4\0"+
    "\2\67\1\u0217\23\67\3\0\2\67\11\0\1\67\13\0"+
    "\4\67\5\0\13\67\1\u0218\13\67\4\0\12\67\1\u0218"+
    "\13\67\3\0\2\67\11\0\1\67\13\0\4\67\5\0"+
    "\4\67\1\u0219\22\67\4\0\4\67\1\u0219\21\67\3\0"+
    "\1\67\1\17\11\0\1\17\13\0\4\17\5\0\27\17"+
    "\4\0\4\17\1\u021a\21\17\3\0\2\17\11\0\1\17"+
    "\13\0\4\17\5\0\27\17\4\0\10\17\1\u021b\15\17"+
    "\3\0\2\17\11\0\1\17\13\0\4\17\5\0\27\17"+
    "\4\0\20\17\1\u021c\5\17\3\0\2\17\11\0\1\17"+
    "\13\0\4\17\5\0\27\17\4\0\22\17\1\u021d\3\17"+
    "\3\0\2\17\11\0\1\17\13\0\4\17\5\0\27\17"+
    "\4\0\14\17\1\u021e\11\17\3\0\2\17\11\0\1\17"+
    "\13\0\4\17\5\0\27\17\4\0\4\17\1\u021f\21\17"+
    "\3\0\2\17\11\0\1\17\13\0\4\17\5\0\27\17"+
    "\4\0\21\17\1\u0220\4\17\3\0\2\17\11\0\1\17"+
    "\13\0\4\17\5\0\27\17\4\0\14\17\1\u0221\11\17"+
    "\3\0\2\17\11\0\1\17\13\0\4\17\5\0\27\17"+
    "\4\0\21\17\1\u0222\4\17\3\0\2\17\11\0\1\17"+
    "\13\0\4\17\5\0\27\17\4\0\1\u0223\25\17\3\0"+
    "\2\17\11\0\1\17\13\0\4\17\5\0\27\17\4\0"+
    "\4\17\1\u0224\21\17\3\0\2\17\11\0\1\17\13\0"+
    "\4\17\5\0\27\17\4\0\10\17\1\u0225\15\17\3\0"+
    "\2\17\11\0\1\17\13\0\4\17\5\0\27\17\4\0"+
    "\17\17\1\u0226\6\17\3\0\2\17\11\0\1\17\13\0"+
    "\4\17\5\0\27\17\4\0\17\17\1\u0227\6\17\3\0"+
    "\1\17\37\0\1\u0228\125\0\1\u0229\127\0\1\u022a\56\0"+
    "\1\17\11\0\1\17\13\0\4\17\5\0\13\17\1\u022b"+
    "\13\17\4\0\26\17\3\0\2\17\11\0\1\17\13\0"+
    "\4\17\5\0\27\17\4\0\12\17\1\u022c\13\17\3\0"+
    "\2\17\11\0\1\17\13\0\4\17\5\0\27\17\4\0"+
    "\17\17\1\u022d\6\17\3\0\2\17\11\0\1\17\13\0"+
    "\4\17\5\0\27\17\4\0\14\17\1\u022e\11\17\3\0"+
    "\2\17\11\0\1\17\13\0\4\17\5\0\27\17\4\0"+
    "\3\17\1\u022f\22\17\3\0\2\17\11\0\1\17\13\0"+
    "\4\17\5\0\27\17\4\0\5\17\1\u0230\20\17\3\0"+
    "\2\17\11\0\1\17\13\0\4\17\5\0\27\17\4\0"+
    "\6\17\1\u0231\17\17\3\0\2\17\11\0\1\17\13\0"+
    "\4\17\5\0\27\17\4\0\7\17\1\u0232\16\17\3\0"+
    "\1\17\1\67\11\0\1\67\13\0\4\67\5\0\1\u0233"+
    "\26\67\4\0\1\u0233\25\67\3\0\2\67\11\0\1\67"+
    "\13\0\4\67\5\0\15\67\1\u0234\11\67\4\0\14\67"+
    "\1\u0234\11\67\3\0\2\67\11\0\1\67\13\0\4\67"+
    "\5\0\16\67\1\u0235\10\67\4\0\15\67\1\u0235\10\67"+
    "\3\0\2\67\11\0\1\67\13\0\4\67\5\0\10\67"+
    "\1\u0236\16\67\4\0\10\67\1\u0236\15\67\3\0\2\67"+
    "\11\0\1\67\13\0\4\67\5\0\4\67\1\u0237\22\67"+
    "\4\0\4\67\1\u0237\21\67\3\0\2\67\11\0\1\67"+
    "\13\0\4\67\5\0\3\67\1\u0238\23\67\4\0\3\67"+
    "\1\u0238\22\67\3\0\2\67\11\0\1\67\13\0\4\67"+
    "\5\0\13\67\1\u0239\13\67\4\0\12\67\1\u0239\13\67"+
    "\3\0\2\67\11\0\1\67\13\0\4\67\5\0\3\67"+
    "\1\u023a\23\67\4\0\3\67\1\u023a\22\67\3\0\2\67"+
    "\11\0\1\67\13\0\4\67\5\0\1\u023b\26\67\4\0"+
    "\1\u023b\25\67\3\0\2\67\11\0\1\67\13\0\4\67"+
    "\5\0\3\67\1\u023c\23\67\4\0\3\67\1\u023c\22\67"+
    "\3\0\2\67\11\0\1\67\13\0\4\67\5\0\22\67"+
    "\1\u023d\4\67\4\0\21\67\1\u023d\4\67\3\0\2\67"+
    "\11\0\1\67\13\0\4\67\5\0\15\67\1\u023e\11\67"+
    "\4\0\14\67\1\u023e\11\67\3\0\2\67\11\0\1\67"+
    "\13\0\4\67\5\0\6\67\1\u023f\20\67\4\0\6\67"+
    "\1\u023f\17\67\3\0\2\67\11\0\1\67\13\0\4\67"+
    "\5\0\7\67\1\u0240\17\67\4\0\7\67\1\u0240\16\67"+
    "\3\0\1\67\1\17\11\0\1\17\13\0\4\17\5\0"+
    "\27\17\4\0\1\u0241\25\17\3\0\2\17\11\0\1\17"+
    "\13\0\4\17\5\0\27\17\4\0\14\17\1\u0242\11\17"+
    "\3\0\2\17\11\0\1\17\13\0\4\17\5\0\27\17"+
    "\4\0\12\17\1\u0243\13\17\3\0\2\17\11\0\1\17"+
    "\13\0\4\17\5\0\27\17\4\0\3\17\1\u0244\22\17"+
    "\3\0\2\17\11\0\1\17\13\0\4\17\5\0\27\17"+
    "\4\0\10\17\1\u0245\15\17\3\0\2\17\11\0\1\17"+
    "\13\0\4\17\5\0\27\17\4\0\16\17\1\u0246\7\17"+
    "\3\0\2\17\11\0\1\17\13\0\4\17\5\0\27\17"+
    "\4\0\12\17\1\u0247\13\17\3\0\2\17\11\0\1\17"+
    "\13\0\4\17\5\0\27\17\4\0\21\17\1\u0248\4\17"+
    "\3\0\2\17\11\0\1\17\13\0\4\17\5\0\27\17"+
    "\4\0\2\17\1\u0249\23\17\3\0\2\17\11\0\1\17"+
    "\13\0\4\17\5\0\27\17\4\0\2\17\1\u024a\23\17"+
    "\3\0\2\17\11\0\1\17\13\0\4\17\5\0\27\17"+
    "\4\0\14\17\1\u024b\11\17\3\0\1\17\37\0\1\u024c"+
    "\143\0\1\u024d\44\0\1\17\11\0\1\17\13\0\4\17"+
    "\5\0\27\17\4\0\15\17\1\u024e\10\17\3\0\2\17"+
    "\11\0\1\17\13\0\4\17\5\0\27\17\4\0\22\17"+
    "\1\u024f\3\17\3\0\2\17\11\0\1\17\13\0\4\17"+
    "\5\0\27\17\4\0\4\17\1\u0250\21\17\3\0\1\17"+
    "\1\67\11\0\1\67\13\0\4\67\5\0\15\67\1\u0251"+
    "\11\67\4\0\14\67\1\u0251\11\67\3\0\2\67\11\0"+
    "\1\67\13\0\4\67\5\0\23\67\1\u0252\3\67\4\0"+
    "\22\67\1\u0252\3\67\3\0\2\67\11\0\1\67\13\0"+
    "\4\67\5\0\16\67\1\u0253\10\67\4\0\15\67\1\u0253"+
    "\10\67\3\0\2\67\11\0\1\67\13\0\4\67\5\0"+
    "\20\67\1\u0254\6\67\4\0\17\67\1\u0254\6\67\3\0"+
    "\2\67\11\0\1\67\13\0\4\67\5\0\15\67\1\u0255"+
    "\11\67\4\0\14\67\1\u0255\11\67\3\0\2\67\11\0"+
    "\1\67\13\0\4\67\5\0\23\67\1\u0256\3\67\4\0"+
    "\22\67\1\u0256\3\67\3\0\2\67\11\0\1\67\13\0"+
    "\4\67\5\0\14\67\1\u0257\12\67\4\0\13\67\1\u0257"+
    "\12\67\3\0\1\67\1\17\11\0\1\17\13\0\4\17"+
    "\5\0\27\17\4\0\14\17\1\u0258\11\17\3\0\2\17"+
    "\11\0\1\17\13\0\4\17\5\0\27\17\4\0\16\17"+
    "\1\u0259\7\17\3\0\2\17\11\0\1\17\13\0\4\17"+
    "\5\0\27\17\4\0\21\17\1\u025a\4\17\3\0\2\17"+
    "\11\0\1\17\13\0\4\17\5\0\27\17\4\0\20\17"+
    "\1\u025b\5\17\3\0\2\17\11\0\1\17\13\0\4\17"+
    "\5\0\27\17\4\0\14\17\1\u025c\11\17\3\0\2\17"+
    "\11\0\1\17\13\0\4\17\5\0\27\17\4\0\22\17"+
    "\1\u025d\3\17\3\0\2\17\11\0\1\17\13\0\4\17"+
    "\5\0\27\17\4\0\14\17\1\u025e\11\17\3\0\2\17"+
    "\11\0\1\17\13\0\4\17\5\0\27\17\4\0\4\17"+
    "\1\u025f\21\17\3\0\2\17\11\0\1\17\13\0\4\17"+
    "\5\0\27\17\4\0\21\17\1\u0260\4\17\3\0\1\17"+
    "\52\0\1\u0261\110\0\1\u0262\64\0\1\17\11\0\1\17"+
    "\13\0\4\17\5\0\27\17\4\0\4\17\1\u0263\21\17"+
    "\3\0\1\17\1\67\11\0\1\67\13\0\4\67\5\0"+
    "\4\67\1\u0264\22\67\4\0\4\67\1\u0264\21\67\3\0"+
    "\2\67\11\0\1\67\13\0\4\67\5\0\15\67\1\u0265"+
    "\11\67\4\0\14\67\1\u0265\11\67\3\0\2\67\11\0"+
    "\1\67\13\0\4\67\5\0\20\67\1\u0266\6\67\4\0"+
    "\17\67\1\u0266\6\67\3\0\1\67\1\17\11\0\1\17"+
    "\13\0\4\17\5\0\27\17\4\0\22\17\1\u0267\3\17"+
    "\3\0\2\17\11\0\1\17\13\0\4\17\5\0\27\17"+
    "\4\0\16\17\1\u0268\7\17\3\0\2\17\11\0\1\17"+
    "\13\0\4\17\5\0\27\17\4\0\21\17\1\u0269\4\17"+
    "\3\0\2\17\11\0\1\17\13\0\4\17\5\0\27\17"+
    "\4\0\4\17\1\u026a\21\17\3\0\1\17\53\0\1\u026b"+
    "\50\0\1\67\11\0\1\67\13\0\4\67\5\0\4\67"+
    "\1\u026c\22\67\4\0\4\67\1\u026c\21\67\3\0\1\67"+
    "\1\17\11\0\1\17\13\0\4\17\5\0\27\17\4\0"+
    "\21\17\1\u026d\4\17\3\0\2\17\11\0\1\17\13\0"+
    "\4\17\5\0\27\17\4\0\22\17\1\u026e\3\17\3\0"+
    "\2\17\11\0\1\17\13\0\4\17\5\0\27\17\4\0"+
    "\3\17\1\u026f\22\17\3\0\1\17\37\0\1\u0270\64\0"+
    "\1\17\11\0\1\17\13\0\4\17\5\0\27\17\4\0"+
    "\21\17\1\u0271\4\17\3\0\1\17";

  private static int [] zzUnpacktrans() {
    int [] result = new int[32592];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\10\0\2\11\1\1\3\11\3\1\10\11\3\1\2\11"+
    "\5\1\3\11\15\1\1\11\1\1\1\11\1\1\1\11"+
    "\1\1\1\11\3\1\1\11\22\1\1\11\1\1\1\11"+
    "\16\1\1\11\1\0\26\1\1\11\24\1\1\0\24\1"+
    "\1\11\1\1\1\11\23\1\1\11\1\0\1\11\1\0"+
    "\1\1\1\0\2\11\26\1\1\11\1\0\1\11\40\1"+
    "\1\0\1\11\22\1\2\11\13\1\1\11\14\1\1\11"+
    "\14\1\2\11\2\1\6\11\4\0\27\1\2\0\63\1"+
    "\3\11\2\0\11\11\1\1\11\11\2\0\7\11\4\0"+
    "\24\1\1\0\54\1\3\0\57\1\1\11\2\0\41\1"+
    "\2\0\23\1\1\11\1\0\10\1\1\0\4\1\1\11"+
    "\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[625];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    StringBuilder string;
  /*-----------------------------------------------------------------
    CODIGO PARA EL MANEJO DE ERRORES
  -------------------------------------------------------------------*/
    private List<String> errorsList;
    public List<String> symbols = new ArrayList();

    public List<String> getErrors(){
        return this.errorsList;
    }

    /*----------------------------------------------------------------
        CODIGO PARA EL PARSER
    ------------------------------------------------------------------*/
    private Symbol symbol(int type) {
        symbols.add(yytext());
        return new Symbol(type, yyline+1, yycolumn+1);
    }

    private Symbol symbol(int type, Object value) {
        symbols.add(value.toString());
        return new Symbol(type, yyline+1, yycolumn+1, value);
    }

    private void error(String message) {
        errorsList.add("Error en la linea: " + (yyline+1) + ", columna: " + (yycolumn+1) + " : " + message);
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
      errorsList = new LinkedList<>();
    string = new StringBuilder();
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(sym.EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { error("Simbolo invalido <"+ yytext()+">");
            }
          // fall through
          case 156: break;
          case 2:
            { /* ignoramos */
            }
          // fall through
          case 157: break;
          case 3:
            { return symbol(sym.DIFFERENT);
            }
          // fall through
          case 158: break;
          case 4:
            { string.setLength(0); yybegin(STRING);
            }
          // fall through
          case 159: break;
          case 5:
            { return symbol(sym.HASH);
            }
          // fall through
          case 160: break;
          case 6:
            { return symbol( sym.ID, yytext() );
            }
          // fall through
          case 161: break;
          case 7:
            { return symbol(sym.MODULE);
            }
          // fall through
          case 162: break;
          case 8:
            { return symbol(sym.AMPERSAND);
            }
          // fall through
          case 163: break;
          case 9:
            { string.setLength(0); yybegin(CHARLITERAL);
            }
          // fall through
          case 164: break;
          case 10:
            { return symbol(sym.LPAREN);
            }
          // fall through
          case 165: break;
          case 11:
            { return symbol(sym.RPAREN);
            }
          // fall through
          case 166: break;
          case 12:
            { return symbol(sym.TIMES);
            }
          // fall through
          case 167: break;
          case 13:
            { return symbol(sym.PLUS);
            }
          // fall through
          case 168: break;
          case 14:
            { return symbol(sym.COMMA);
            }
          // fall through
          case 169: break;
          case 15:
            { return symbol(sym.MINUS);
            }
          // fall through
          case 170: break;
          case 16:
            { return symbol(sym.DOT);
            }
          // fall through
          case 171: break;
          case 17:
            { return symbol(sym.DIV);
            }
          // fall through
          case 172: break;
          case 18:
            { return symbol(
                                sym.BOOLEAN_LIT, 
                                yytext().equals("1") ? 1 : 0
                            );
            }
          // fall through
          case 173: break;
          case 19:
            { return symbol(sym.INTEGER_LIT, Integer.valueOf(yytext()));
            }
          // fall through
          case 174: break;
          case 20:
            { return symbol(sym.COLON);
            }
          // fall through
          case 175: break;
          case 21:
            { return symbol(sym.SEMICOLON);
            }
          // fall through
          case 176: break;
          case 22:
            { return symbol(sym.LESS);
            }
          // fall through
          case 177: break;
          case 23:
            { return symbol(sym.ASSIGNATION);
            }
          // fall through
          case 178: break;
          case 24:
            { return symbol(sym.GRATER);
            }
          // fall through
          case 179: break;
          case 25:
            { return symbol(sym.LBRACK);
            }
          // fall through
          case 180: break;
          case 26:
            { return symbol(sym.RBRACK);
            }
          // fall through
          case 181: break;
          case 27:
            { return symbol(sym.POWER);
            }
          // fall through
          case 182: break;
          case 28:
            { return symbol(sym.LBRACE);
            }
          // fall through
          case 183: break;
          case 29:
            { return symbol(sym.RBRACE);
            }
          // fall through
          case 184: break;
          case 30:
            { return symbol(sym.ID, yytext().toLowerCase());
            }
          // fall through
          case 185: break;
          case 31:
            { string.setLength(0); yybegin(P_CHAR_STRING);
            }
          // fall through
          case 186: break;
          case 32:
            { return symbol(
                                sym.BOOLEAN_LIT,
                                yytext().equals("1") ? 1 : 0
                            );
            }
          // fall through
          case 187: break;
          case 33:
            { return symbol(sym.EQUALS);
            }
          // fall through
          case 188: break;
          case 34:
            { string.setLength(0); yybegin(JSTRING);
            }
          // fall through
          case 189: break;
          case 35:
            { string.setLength(0); yybegin(JCHARLITERAL);
            }
          // fall through
          case 190: break;
          case 36:
            { error("Literal de carácter sin terminar al final de la línea");
            }
          // fall through
          case 191: break;
          case 37:
            { string.append( yytext() );
            }
          // fall through
          case 192: break;
          case 38:
            { yybegin(PASCAL); return symbol(sym.STRING_LIT, string.toString());
            }
          // fall through
          case 193: break;
          case 39:
            { error("Literal de cadena sin terminar al final de la línea");
            }
          // fall through
          case 194: break;
          case 40:
            { yybegin(YYINITIAL); return symbol(sym.STRING_LIT, string.toString());
            }
          // fall through
          case 195: break;
          case 41:
            { yybegin(JAVA); return symbol(sym.STRING_LIT, string.toString());
            }
          // fall through
          case 196: break;
          case 42:
            { return symbol(sym.AND);
            }
          // fall through
          case 197: break;
          case 43:
            { /* ignore */
            }
          // fall through
          case 198: break;
          case 44:
            { return symbol(sym.LESS_EQUALS);
            }
          // fall through
          case 199: break;
          case 45:
            { return symbol(sym.GRATER_EQUALS);
            }
          // fall through
          case 200: break;
          case 46:
            { return symbol(sym.DO);
            }
          // fall through
          case 201: break;
          case 47:
            { return symbol(sym.IF);
            }
          // fall through
          case 202: break;
          case 48:
            { return symbol(sym.OR);
            }
          // fall through
          case 203: break;
          case 49:
            { return symbol(sym.IN);
            }
          // fall through
          case 204: break;
          case 50:
            { return symbol(sym.OF);
            }
          // fall through
          case 205: break;
          case 51:
            { return symbol(sym.TO);
            }
          // fall through
          case 206: break;
          case 52:
            { yybegin(YYINITIAL); return symbol(sym.CHAR_LIT, yytext().charAt(0));
            }
          // fall through
          case 207: break;
          case 53:
            { error("Secuencia ilegal de escape \""+yytext()+"\"");
            }
          // fall through
          case 208: break;
          case 54:
            { yybegin(PASCAL); return symbol(sym.CHAR_LIT, yytext().charAt(0));
            }
          // fall through
          case 209: break;
          case 55:
            { string.append( '\"' );
            }
          // fall through
          case 210: break;
          case 56:
            { string.append( '\'' );
            }
          // fall through
          case 211: break;
          case 57:
            { char val = (char) Integer.parseInt(yytext().substring(1),8);
                                                                   string.append( val );
            }
          // fall through
          case 212: break;
          case 58:
            { string.append( '\\' );
            }
          // fall through
          case 213: break;
          case 59:
            { string.append( '\b' );
            }
          // fall through
          case 214: break;
          case 60:
            { string.append( '\f' );
            }
          // fall through
          case 215: break;
          case 61:
            { string.append( '\n' );
            }
          // fall through
          case 216: break;
          case 62:
            { string.append( '\r' );
            }
          // fall through
          case 217: break;
          case 63:
            { string.append( '\t' );
            }
          // fall through
          case 218: break;
          case 64:
            { yybegin(JAVA); return symbol(sym.CHAR_LIT, yytext().charAt(0));
            }
          // fall through
          case 219: break;
          case 65:
            { char val = (char) Integer.parseInt(yytext().substring(1),8);
                                                string.append( val );
            }
          // fall through
          case 220: break;
          case 66:
            { return symbol(sym.FLOAT_LIT, Float.parseFloat(yytext()));
            }
          // fall through
          case 221: break;
          case 67:
            { return symbol(sym.FLOAT_TKN);
            }
          // fall through
          case 222: break;
          case 68:
            { return symbol(sym.INT_TKN);
            }
          // fall through
          case 223: break;
          case 69:
            { return symbol(sym.END);
            }
          // fall through
          case 224: break;
          case 70:
            { return symbol(sym.FOR);
            }
          // fall through
          case 225: break;
          case 71:
            { return symbol(sym.MOD);
            }
          // fall through
          case 226: break;
          case 72:
            { return symbol(sym.NOT);
            }
          // fall through
          case 227: break;
          case 73:
            { return symbol(sym.SET);
            }
          // fall through
          case 228: break;
          case 74:
            { return symbol(sym.VAR);
            }
          // fall through
          case 229: break;
          case 75:
            { return symbol(sym.NEW);
            }
          // fall through
          case 230: break;
          case 76:
            { yybegin(YYINITIAL); return symbol(sym.CHAR_LIT, '\"');
            }
          // fall through
          case 231: break;
          case 77:
            { yybegin(YYINITIAL); return symbol(sym.CHAR_LIT, '\'');
            }
          // fall through
          case 232: break;
          case 78:
            { yybegin(YYINITIAL);
                                                int val = Integer.parseInt(yytext().substring(1,yylength()-1),8);
                                                return symbol(sym.CHAR_LIT, (char)val);
            }
          // fall through
          case 233: break;
          case 79:
            { yybegin(YYINITIAL); return symbol(sym.CHAR_LIT, '\\');
            }
          // fall through
          case 234: break;
          case 80:
            { yybegin(YYINITIAL); return symbol(sym.CHAR_LIT, '\b');
            }
          // fall through
          case 235: break;
          case 81:
            { yybegin(YYINITIAL); return symbol(sym.CHAR_LIT, '\f');
            }
          // fall through
          case 236: break;
          case 82:
            { yybegin(YYINITIAL); return symbol(sym.CHAR_LIT, '\n');
            }
          // fall through
          case 237: break;
          case 83:
            { yybegin(YYINITIAL); return symbol(sym.CHAR_LIT, '\r');
            }
          // fall through
          case 238: break;
          case 84:
            { yybegin(YYINITIAL); return symbol(sym.CHAR_LIT, '\t');
            }
          // fall through
          case 239: break;
          case 85:
            { yybegin(PASCAL); return symbol(sym.CHAR_LIT, '\"');
            }
          // fall through
          case 240: break;
          case 86:
            { yybegin(PASCAL); return symbol(sym.CHAR_LIT, '\'');
            }
          // fall through
          case 241: break;
          case 87:
            { yybegin(PASCAL);
                                                            int val = Integer.parseInt(yytext().substring(1,yylength()-1),8);
                                                          return symbol(sym.CHAR_LIT, (char)val);
            }
          // fall through
          case 242: break;
          case 88:
            { yybegin(PASCAL); return symbol(sym.CHAR_LIT, '\\');
            }
          // fall through
          case 243: break;
          case 89:
            { yybegin(PASCAL); return symbol(sym.CHAR_LIT, '\b');
            }
          // fall through
          case 244: break;
          case 90:
            { yybegin(PASCAL); return symbol(sym.CHAR_LIT, '\f');
            }
          // fall through
          case 245: break;
          case 91:
            { yybegin(PASCAL); return symbol(sym.CHAR_LIT, '\n');
            }
          // fall through
          case 246: break;
          case 92:
            { yybegin(PASCAL); return symbol(sym.CHAR_LIT, '\r');
            }
          // fall through
          case 247: break;
          case 93:
            { yybegin(PASCAL); return symbol(sym.CHAR_LIT, '\t');
            }
          // fall through
          case 248: break;
          case 94:
            { yybegin(JAVA); return symbol(sym.CHAR_LIT, '\"');
            }
          // fall through
          case 249: break;
          case 95:
            { yybegin(JAVA); return symbol(sym.CHAR_LIT, '\'');
            }
          // fall through
          case 250: break;
          case 96:
            { yybegin(JAVA);
                                                int val = Integer.parseInt(yytext().substring(1,yylength()-1),8);
                                                return symbol(sym.CHAR_LIT, (char)val);
            }
          // fall through
          case 251: break;
          case 97:
            { yybegin(JAVA); return symbol(sym.CHAR_LIT, '\\');
            }
          // fall through
          case 252: break;
          case 98:
            { yybegin(JAVA); return symbol(sym.CHAR_LIT, '\b');
            }
          // fall through
          case 253: break;
          case 99:
            { yybegin(JAVA); return symbol(sym.CHAR_LIT, '\f');
            }
          // fall through
          case 254: break;
          case 100:
            { yybegin(JAVA); return symbol(sym.CHAR_LIT, '\n');
            }
          // fall through
          case 255: break;
          case 101:
            { yybegin(JAVA); return symbol(sym.CHAR_LIT, '\r');
            }
          // fall through
          case 256: break;
          case 102:
            { yybegin(JAVA); return symbol(sym.CHAR_LIT, '\t');
            }
          // fall through
          case 257: break;
          case 103:
            { return symbol(sym.JAVA);
            }
          // fall through
          case 258: break;
          case 104:
            { return symbol(sym.CASE);
            }
          // fall through
          case 259: break;
          case 105:
            { return symbol(sym.CHAR_TKN);
            }
          // fall through
          case 260: break;
          case 106:
            { return symbol(sym.ELSE);
            }
          // fall through
          case 261: break;
          case 107:
            { return symbol(sym.MAIN);
            }
          // fall through
          case 262: break;
          case 108:
            { return symbol(sym.VOID);
            }
          // fall through
          case 263: break;
          case 109:
            { return symbol(sym.REAL_TKN);
            }
          // fall through
          case 264: break;
          case 110:
            { return symbol(sym.THEN);
            }
          // fall through
          case 265: break;
          case 111:
            { return symbol(sym.TYPE);
            }
          // fall through
          case 266: break;
          case 112:
            { return symbol(sym.WITH);
            }
          // fall through
          case 267: break;
          case 113:
            { return symbol(sym.NULL_LIT);
            }
          // fall through
          case 268: break;
          case 114:
            { return symbol(sym.THIS);
            }
          // fall through
          case 269: break;
          case 115:
            { return symbol(sym.BOOLEAN_LIT, 1);
            }
          // fall through
          case 270: break;
          case 116:
            { return symbol(sym.BREAK);
            }
          // fall through
          case 271: break;
          case 117:
            { return symbol(sym.CONST);
            }
          // fall through
          case 272: break;
          case 118:
            { return symbol(sym.GETCH);
            }
          // fall through
          case 273: break;
          case 119:
            { return symbol(sym.PRINT);
            }
          // fall through
          case 274: break;
          case 120:
            { return symbol(sym.SCANF);
            }
          // fall through
          case 275: break;
          case 121:
            { return symbol(sym.WHILE);
            }
          // fall through
          case 276: break;
          case 122:
            { return symbol(sym.ARRAY);
            }
          // fall through
          case 277: break;
          case 123:
            { return symbol(sym.BEGIN);
            }
          // fall through
          case 278: break;
          case 124:
            { return symbol(sym.UNTIL);
            }
          // fall through
          case 279: break;
          case 125:
            { return symbol(sym.CLASS);
            }
          // fall through
          case 280: break;
          case 126:
            { return symbol(sym.BOOLEAN_LIT, 0);
            }
          // fall through
          case 281: break;
          case 127:
            { return symbol(sym.SUPER);
            }
          // fall through
          case 282: break;
          case 128:
            { yybegin(JAVA); return symbol(sym.JAVA_SECTION);
            }
          // fall through
          case 283: break;
          case 129:
            { return symbol(sym.PASCAL);
            }
          // fall through
          case 284: break;
          case 130:
            { return symbol(sym.CLEAR);
            }
          // fall through
          case 285: break;
          case 131:
            { return symbol(sym.PRINTF);
            }
          // fall through
          case 286: break;
          case 132:
            { return symbol(sym.STRING_TKN);
            }
          // fall through
          case 287: break;
          case 133:
            { return symbol(sym.SWITCH);
            }
          // fall through
          case 288: break;
          case 134:
            { return symbol(sym.DOWNTO);
            }
          // fall through
          case 289: break;
          case 135:
            { return symbol(sym.PACKED);
            }
          // fall through
          case 290: break;
          case 136:
            { return symbol(sym.RECORD);
            }
          // fall through
          case 291: break;
          case 137:
            { return symbol(sym.REPEAT);
            }
          // fall through
          case 292: break;
          case 138:
            { return symbol(sym.RETURN);
            }
          // fall through
          case 293: break;
          case 139:
            { return symbol(sym.PUBLIC);
            }
          // fall through
          case 294: break;
          case 140:
            { return symbol(sym.INCLUDE);
            }
          // fall through
          case 295: break;
          case 141:
            { return symbol(sym.BOOLEAN_TKN);
            }
          // fall through
          case 296: break;
          case 142:
            { return symbol(sym.PRINTLN);
            }
          // fall through
          case 297: break;
          case 143:
            { return symbol(sym.PROGRAM);
            }
          // fall through
          case 298: break;
          case 144:
            { return symbol(sym.DEFAULT);
            }
          // fall through
          case 299: break;
          case 145:
            { return symbol(sym.EXTENDS);
            }
          // fall through
          case 300: break;
          case 146:
            { return symbol(sym.PRIVATE);
            }
          // fall through
          case 301: break;
          case 147:
            { yybegin(PASCAL); return symbol(sym.PASCAL_SECTION);
            }
          // fall through
          case 302: break;
          case 148:
            { return symbol(sym.CONTINUE);
            }
          // fall through
          case 303: break;
          case 149:
            { return symbol(sym.FUNCTION);
            }
          // fall through
          case 304: break;
          case 150:
            { return symbol(sym.INT_INPUT);
            }
          // fall through
          case 305: break;
          case 151:
            { return symbol(sym.PROCEDURE);
            }
          // fall through
          case 306: break;
          case 152:
            { return symbol(sym.CHAR_INPUT);
            }
          // fall through
          case 307: break;
          case 153:
            { return symbol(sym.PROTECTED);
            }
          // fall through
          case 308: break;
          case 154:
            { yybegin(YYINITIAL); return symbol(sym.MAIN_SECTION);
            }
          // fall through
          case 309: break;
          case 155:
            { return symbol(sym.FLOAT_INPUT);
            }
          // fall through
          case 310: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
