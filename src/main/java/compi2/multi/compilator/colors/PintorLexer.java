// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: pintorLexer.jflex

/***************************** paquetes *******************************/
package compi2.multi.compilator.colors;

import java.util.*;


@SuppressWarnings("fallthrough")
public class PintorLexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int PASCAL = 2;
  public static final int JAVA = 4;
  public static final int CHARLITERAL = 6;
  public static final int P_CHAR_STRING = 8;
  public static final int JCHARLITERAL = 10;
  public static final int STRING = 12;
  public static final int JSTRING = 14;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7, 7
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\126\u0100\1\u2600\1\u0100\1\u2700"+
    "\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\53\u0100\1\u2d00\10\u2e00"+
    "\31\u1f00\1\u0100\1\u2f00\1\u3000\1\u0100\1\u3100\1\u3200\1\u3300"+
    "\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u0100\1\u3a00"+
    "\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100\1\u4200"+
    "\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900\1\u4a00"+
    "\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00\1\u4f00\1\u5000\1\u5100"+
    "\3\u0100\1\u5200\1\u5300\1\u5400\11\u1f00\1\u5500\4\u0100\1\u5600"+
    "\17\u1f00\2\u0100\1\u5700\41\u1f00\2\u0100\1\u5800\1\u5900\2\u1f00"+
    "\1\u5a00\1\u5b00\27\u0100\1\u5c00\4\u0100\1\u5d00\1\u5e00\41\u1f00"+
    "\1\u5f00\1\u0100\1\u6000\1\u6100\11\u1f00\1\u6200\22\u1f00\1\u6300"+
    "\1\u1f00\1\u6400\1\u6500\1\u1f00\1\u6600\1\u6700\1\u6800\1\u6900"+
    "\2\u1f00\1\u6a00\4\u1f00\1\u6b00\1\u6c00\1\u6d00\1\u6e00\1\u1f00"+
    "\1\u6f00\2\u1f00\1\u7000\1\u7100\1\u7200\2\u1f00\1\u7300\1\u1f00"+
    "\1\u7400\14\u1f00\1\u7500\4\u1f00\246\u0100\1\u7600\20\u0100\1\u7700"+
    "\1\u7800\25\u0100\1\u7900\34\u0100\1\u7a00\2\u0100\1\u7b00\11\u1f00"+
    "\2\u0100\1\u7c00\5\u1f00\23\u0100\1\u7d00\17\u0100\1\u7e00\u0adc\u1f00"+
    "\1\u7f00\1\u8000\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\16\0\4\6"+
    "\1\1\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\21\1\23\1\24"+
    "\2\25\2\26\4\27\2\30\1\31\1\22\1\32\1\33"+
    "\1\34\2\6\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\12\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\12\1\63\1\12\1\64\1\65\1\64\1\21"+
    "\1\12\1\6\1\66\1\67\1\70\1\71\1\72\1\73"+
    "\1\74\1\75\1\76\1\12\1\77\1\100\1\101\1\102"+
    "\1\103\1\104\1\12\1\105\1\106\1\107\1\110\1\111"+
    "\1\112\1\113\1\63\1\12\1\114\1\115\1\116\1\6"+
    "\6\0\1\117\32\0\2\6\4\12\4\6\1\12\2\6"+
    "\1\0\7\6\1\12\4\6\1\12\5\6\27\12\1\6"+
    "\37\12\1\6\u01ca\12\4\6\14\12\16\6\5\12\7\6"+
    "\1\12\1\6\1\12\21\6\160\0\5\12\1\6\2\12"+
    "\2\6\4\12\1\6\1\12\6\6\1\12\1\6\3\12"+
    "\1\6\1\12\1\6\24\12\1\6\123\12\1\6\213\12"+
    "\1\6\5\0\2\6\246\12\1\6\46\12\2\6\1\12"+
    "\6\6\51\12\6\6\1\12\1\6\55\0\1\6\1\0"+
    "\1\6\2\0\1\6\2\0\1\6\1\0\10\6\33\12"+
    "\4\6\4\12\15\6\6\0\5\6\1\12\4\6\13\0"+
    "\1\6\1\0\3\6\53\12\37\0\4\6\2\12\1\0"+
    "\143\12\1\6\1\12\10\0\1\6\6\0\2\12\2\0"+
    "\1\6\4\0\2\12\12\0\3\12\2\6\1\12\17\6"+
    "\1\0\1\12\1\0\36\12\33\0\2\6\131\12\13\0"+
    "\1\12\16\6\12\0\41\12\11\0\2\12\4\6\1\12"+
    "\2\6\1\0\30\12\4\0\1\12\11\0\1\12\3\0"+
    "\1\12\5\0\22\6\31\12\3\0\4\6\13\12\5\6"+
    "\30\12\1\6\6\12\1\6\2\0\6\6\10\0\52\12"+
    "\72\0\66\12\3\0\1\12\22\0\1\12\7\0\12\12"+
    "\2\0\2\6\12\0\1\6\20\12\3\0\1\6\10\12"+
    "\2\6\2\12\2\6\26\12\1\6\7\12\1\6\1\12"+
    "\3\6\4\12\2\6\1\0\1\12\7\0\2\6\2\0"+
    "\2\6\3\0\1\12\10\6\1\0\4\6\2\12\1\6"+
    "\3\12\2\0\2\6\12\0\4\12\7\6\2\12\1\6"+
    "\1\0\2\6\3\0\1\6\6\12\4\6\2\12\2\6"+
    "\26\12\1\6\7\12\1\6\2\12\1\6\2\12\1\6"+
    "\2\12\2\6\1\0\1\6\5\0\4\6\2\0\2\6"+
    "\3\0\3\6\1\0\7\6\4\12\1\6\1\12\7\6"+
    "\14\0\3\12\1\0\13\6\3\0\1\6\11\12\1\6"+
    "\3\12\1\6\26\12\1\6\7\12\1\6\2\12\1\6"+
    "\5\12\2\6\1\0\1\12\10\0\1\6\3\0\1\6"+
    "\3\0\2\6\1\12\17\6\2\12\2\0\2\6\12\0"+
    "\1\6\1\12\7\6\1\12\6\0\1\6\3\0\1\6"+
    "\10\12\2\6\2\12\2\6\26\12\1\6\7\12\1\6"+
    "\2\12\1\6\5\12\2\6\1\0\1\12\7\0\2\6"+
    "\2\0\2\6\3\0\7\6\3\0\4\6\2\12\1\6"+
    "\3\12\2\0\2\6\12\0\1\6\1\12\20\6\1\0"+
    "\1\12\1\6\6\12\3\6\3\12\1\6\4\12\3\6"+
    "\2\12\1\6\1\12\1\6\2\12\3\6\2\12\3\6"+
    "\3\12\3\6\14\12\4\6\5\0\3\6\3\0\1\6"+
    "\4\0\2\6\1\12\6\6\1\0\16\6\12\0\11\6"+
    "\1\12\6\6\5\0\10\12\1\6\3\12\1\6\27\12"+
    "\1\6\20\12\2\6\1\0\1\12\7\0\1\6\3\0"+
    "\1\6\4\0\7\6\2\0\1\6\3\12\2\6\1\12"+
    "\2\6\2\12\2\0\2\6\12\0\20\6\1\12\3\0"+
    "\1\6\10\12\1\6\3\12\1\6\27\12\1\6\12\12"+
    "\1\6\5\12\2\6\1\0\1\12\7\0\1\6\3\0"+
    "\1\6\4\0\7\6\2\0\6\6\2\12\1\6\2\12"+
    "\2\0\2\6\12\0\1\6\2\12\1\0\14\6\4\0"+
    "\11\12\1\6\3\12\1\6\51\12\2\0\1\12\7\0"+
    "\1\6\3\0\1\6\4\0\1\12\5\6\3\12\1\0"+
    "\7\6\3\12\2\0\2\6\12\0\12\6\6\12\1\6"+
    "\3\0\1\6\22\12\3\6\30\12\1\6\11\12\1\6"+
    "\1\12\2\6\7\12\3\6\1\0\4\6\6\0\1\6"+
    "\1\0\1\6\10\0\6\6\12\0\2\6\2\0\15\6"+
    "\60\12\1\0\2\12\7\0\4\6\10\12\10\0\1\6"+
    "\12\0\47\6\2\12\1\6\1\12\1\6\5\12\1\6"+
    "\30\12\1\6\1\12\1\6\12\12\1\0\2\12\11\0"+
    "\1\12\2\6\5\12\1\6\1\12\1\6\7\0\1\6"+
    "\12\0\2\6\4\12\40\6\1\12\27\6\2\0\6\6"+
    "\12\0\13\6\1\0\1\6\1\0\1\6\1\0\4\6"+
    "\2\0\10\12\1\6\44\12\4\6\24\0\1\6\2\0"+
    "\5\12\13\0\1\6\44\0\11\6\1\0\71\6\53\12"+
    "\24\0\1\12\12\0\6\6\6\12\4\0\4\12\3\0"+
    "\1\12\3\0\2\12\7\0\3\12\4\0\15\12\14\0"+
    "\1\12\17\0\2\6\46\12\1\6\1\12\5\6\1\12"+
    "\2\6\53\12\1\6\115\12\1\6\4\12\2\6\7\12"+
    "\1\6\1\12\1\6\4\12\2\6\51\12\1\6\4\12"+
    "\2\6\41\12\1\6\4\12\2\6\7\12\1\6\1\12"+
    "\1\6\4\12\2\6\17\12\1\6\71\12\1\6\4\12"+
    "\2\6\103\12\2\6\3\0\40\6\20\12\20\6\126\12"+
    "\2\6\6\12\3\6\u016c\12\2\6\21\12\1\6\32\12"+
    "\5\6\113\12\3\6\13\12\7\6\22\12\4\0\11\6"+
    "\23\12\3\0\13\6\22\12\2\0\14\6\15\12\1\6"+
    "\3\12\1\6\2\0\14\6\64\12\40\0\3\6\1\12"+
    "\3\6\2\12\1\0\2\6\12\0\41\6\17\0\6\6"+
    "\131\12\7\6\5\12\2\0\42\12\1\0\1\12\5\6"+
    "\106\12\12\6\37\12\1\6\14\0\4\6\14\0\12\6"+
    "\12\0\36\12\2\6\5\12\13\6\54\12\4\6\32\12"+
    "\6\6\12\0\46\6\27\12\5\0\4\6\65\12\12\0"+
    "\1\6\35\0\2\6\13\0\6\6\12\0\15\6\1\12"+
    "\10\6\16\0\1\6\20\0\61\6\5\0\57\12\21\0"+
    "\10\12\3\6\12\0\21\6\11\0\14\6\3\0\36\12"+
    "\15\0\2\12\12\0\54\12\16\0\14\6\44\12\24\0"+
    "\10\6\12\0\3\6\3\12\12\0\44\12\2\6\11\12"+
    "\7\6\53\12\2\6\3\12\20\6\3\0\1\6\25\0"+
    "\4\12\1\0\6\12\1\0\2\12\3\0\1\12\5\6"+
    "\300\12\100\0\26\12\2\6\6\12\2\6\46\12\2\6"+
    "\6\12\2\6\10\12\1\6\1\12\1\6\1\12\1\6"+
    "\1\12\1\6\37\12\2\6\65\12\1\6\7\12\1\6"+
    "\1\12\3\6\3\12\1\6\7\12\3\6\4\12\2\6"+
    "\6\12\4\6\15\12\5\6\3\12\1\6\7\12\16\6"+
    "\5\0\30\6\2\3\5\0\20\6\2\12\23\6\1\12"+
    "\13\6\5\0\1\6\12\0\1\6\1\12\15\6\1\12"+
    "\20\6\15\12\3\6\41\12\17\6\15\0\4\6\1\0"+
    "\3\6\14\0\21\6\1\12\4\6\1\12\2\6\12\12"+
    "\1\6\1\12\3\6\5\12\6\6\1\12\1\6\1\12"+
    "\1\6\1\12\1\6\4\12\1\6\13\12\2\6\4\12"+
    "\5\6\5\12\4\6\1\12\21\6\51\12\u0177\6\345\12"+
    "\6\6\4\12\3\0\2\12\14\6\46\12\1\6\1\12"+
    "\5\6\1\12\2\6\70\12\7\6\1\12\17\6\1\0"+
    "\27\12\11\6\7\12\1\6\7\12\1\6\7\12\1\6"+
    "\7\12\1\6\7\12\1\6\7\12\1\6\7\12\1\6"+
    "\7\12\1\6\40\0\57\6\1\12\325\6\3\12\31\6"+
    "\11\12\6\0\1\6\5\12\2\6\5\12\4\6\126\12"+
    "\2\6\2\0\2\6\3\12\1\6\132\12\1\6\4\12"+
    "\5\6\53\12\1\6\136\12\21\6\40\12\60\6\320\12"+
    "\100\6\215\12\103\6\56\12\2\6\15\12\3\6\20\12"+
    "\12\0\2\12\24\6\57\12\1\0\4\6\12\0\1\6"+
    "\37\12\2\0\120\12\2\0\45\6\11\12\2\6\147\12"+
    "\2\6\100\12\5\6\2\12\1\6\1\12\1\6\5\12"+
    "\30\6\20\12\1\0\3\12\1\0\4\12\1\0\27\12"+
    "\5\0\4\6\1\0\13\6\1\12\7\6\64\12\14\6"+
    "\2\0\62\12\22\0\12\6\12\0\6\6\22\0\6\12"+
    "\3\6\1\12\1\6\2\12\13\0\34\12\10\0\2\6"+
    "\27\12\15\0\14\6\35\12\3\6\4\0\57\12\16\0"+
    "\16\6\1\12\12\0\6\6\5\12\1\0\12\12\12\0"+
    "\5\12\1\6\51\12\16\0\11\6\3\12\1\0\10\12"+
    "\2\0\2\6\12\0\6\6\27\12\3\6\1\12\3\0"+
    "\62\12\1\0\1\12\3\0\2\12\2\0\5\12\2\0"+
    "\1\12\1\0\1\12\30\6\3\12\2\6\13\12\5\0"+
    "\2\6\3\12\2\0\12\6\6\12\2\6\6\12\2\6"+
    "\6\12\11\6\7\12\1\6\7\12\1\6\53\12\1\6"+
    "\16\12\6\6\163\12\10\0\1\6\2\0\2\6\12\0"+
    "\6\6\244\12\14\6\27\12\4\6\61\12\4\6\u0100\3"+
    "\156\12\2\6\152\12\46\6\7\12\14\6\5\12\5\6"+
    "\1\12\1\0\12\12\1\6\15\12\1\6\5\12\1\6"+
    "\1\12\1\6\2\12\1\6\2\12\1\6\154\12\41\6"+
    "\153\12\22\6\100\12\2\6\66\12\50\6\15\12\3\6"+
    "\20\0\20\6\20\0\3\6\2\12\30\6\3\12\31\6"+
    "\1\12\6\6\5\12\1\6\207\12\2\6\1\0\4\6"+
    "\1\12\13\6\12\0\7\6\32\12\4\6\1\12\1\6"+
    "\32\12\13\6\131\12\3\6\6\12\2\6\6\12\2\6"+
    "\6\12\2\6\3\12\3\6\2\12\3\6\2\12\22\6"+
    "\3\0\4\6\14\12\1\6\32\12\1\6\23\12\1\6"+
    "\2\12\1\6\17\12\2\6\16\12\42\6\173\12\105\6"+
    "\65\12\210\6\1\0\202\6\35\12\3\6\61\12\17\6"+
    "\1\0\37\6\40\12\15\6\36\12\5\6\46\12\5\0"+
    "\5\6\36\12\2\6\44\12\4\6\10\12\1\6\5\12"+
    "\52\6\236\12\2\6\12\0\6\6\44\12\4\6\44\12"+
    "\4\6\50\12\10\6\64\12\14\6\13\12\1\6\17\12"+
    "\1\6\7\12\1\6\2\12\1\6\13\12\1\6\17\12"+
    "\1\6\7\12\1\6\2\12\103\6\67\12\11\6\26\12"+
    "\12\6\10\12\30\6\6\12\1\6\52\12\1\6\11\12"+
    "\105\6\6\12\2\6\1\12\1\6\54\12\1\6\2\12"+
    "\3\6\1\12\2\6\27\12\12\6\27\12\11\6\37\12"+
    "\101\6\23\12\1\6\2\12\12\6\26\12\12\6\32\12"+
    "\106\6\70\12\6\6\2\12\100\6\1\12\3\0\1\6"+
    "\2\0\5\6\4\0\4\12\1\6\3\12\1\6\35\12"+
    "\2\6\3\0\4\6\1\0\40\6\35\12\3\6\35\12"+
    "\43\6\10\12\1\6\34\12\2\0\31\6\66\12\12\6"+
    "\26\12\12\6\23\12\15\6\22\12\156\6\111\12\67\6"+
    "\63\12\15\6\63\12\15\6\44\12\4\0\10\6\12\0"+
    "\u0146\6\52\12\1\6\2\0\3\6\2\12\113\6\3\0"+
    "\35\12\12\6\1\12\10\6\26\12\13\0\37\6\22\12"+
    "\4\0\52\6\25\12\33\6\27\12\11\6\3\0\65\12"+
    "\17\0\37\6\13\0\2\12\2\0\1\12\11\6\4\0"+
    "\55\12\13\0\2\6\1\0\4\6\1\0\12\6\1\0"+
    "\2\6\31\12\7\6\12\0\6\6\3\0\44\12\16\0"+
    "\1\6\12\0\4\6\1\12\2\0\1\12\10\6\43\12"+
    "\1\0\2\6\1\12\11\6\3\0\60\12\16\0\4\12"+
    "\4\6\4\0\1\6\14\0\1\12\1\6\1\12\43\6"+
    "\22\12\1\6\31\12\14\0\6\6\1\0\2\12\1\0"+
    "\76\6\7\12\1\6\1\12\1\6\4\12\1\6\17\12"+
    "\1\6\12\12\7\6\57\12\14\0\5\6\12\0\6\6"+
    "\4\0\1\6\10\12\2\6\2\12\2\6\26\12\1\6"+
    "\7\12\1\6\2\12\1\6\5\12\1\6\2\0\1\12"+
    "\7\0\2\6\2\0\2\6\3\0\2\6\1\12\6\6"+
    "\1\0\5\6\5\12\2\0\2\6\7\0\3\6\5\0"+
    "\213\6\65\12\22\0\4\12\5\6\12\0\4\6\1\0"+
    "\3\12\36\6\60\12\24\0\2\12\1\6\1\12\10\6"+
    "\12\0\246\6\57\12\7\0\2\6\11\0\27\6\4\12"+
    "\2\0\42\6\60\12\21\0\3\6\1\12\13\6\12\0"+
    "\46\6\53\12\15\0\1\12\7\6\12\0\66\6\33\12"+
    "\2\6\17\0\4\6\12\0\6\6\7\12\271\6\54\12"+
    "\17\0\145\6\100\12\12\0\25\6\10\12\2\6\1\12"+
    "\2\6\10\12\1\6\2\12\1\6\30\12\6\0\1\6"+
    "\2\0\2\6\4\0\1\12\1\0\1\12\2\0\14\6"+
    "\12\0\106\6\10\12\2\6\47\12\7\0\2\6\7\0"+
    "\1\12\1\6\1\12\1\0\33\6\1\12\12\0\50\12"+
    "\7\0\1\12\4\0\10\6\1\0\10\6\1\12\13\0"+
    "\56\12\20\0\3\6\1\12\22\6\111\12\7\6\11\12"+
    "\1\6\45\12\10\0\1\6\10\0\1\12\17\6\12\0"+
    "\30\6\36\12\2\6\26\0\1\6\16\0\111\6\7\12"+
    "\1\6\2\12\1\6\46\12\6\0\3\6\1\0\1\6"+
    "\2\0\1\6\7\0\1\12\1\0\10\6\12\0\6\6"+
    "\6\12\1\6\2\12\1\6\40\12\5\0\1\6\2\0"+
    "\1\6\5\0\1\12\7\6\12\0\u0136\6\23\12\4\0"+
    "\11\6\2\0\1\12\1\0\15\12\1\6\42\12\7\0"+
    "\3\6\5\0\15\6\12\0\126\6\1\12\54\6\4\12"+
    "\37\6\232\12\146\6\157\12\21\6\304\12\u014c\6\141\12"+
    "\17\6\60\12\21\0\6\12\17\0\252\6\107\12\271\6"+
    "\71\12\7\6\37\12\1\6\12\0\6\6\117\12\1\6"+
    "\12\0\6\6\36\12\2\6\5\0\13\6\60\12\7\0"+
    "\11\6\4\12\14\6\12\0\11\6\25\12\5\6\23\12"+
    "\260\6\100\12\200\6\113\12\4\6\1\0\1\12\67\0"+
    "\7\6\4\0\15\12\100\6\2\12\1\6\1\12\1\0"+
    "\13\6\2\0\16\6\370\12\10\6\326\12\52\6\11\12"+
    "\u01e7\6\4\12\1\6\7\12\1\6\2\12\1\6\43\12"+
    "\17\6\1\12\35\6\3\12\2\6\1\12\16\6\4\12"+
    "\10\6\u018c\12\4\6\153\12\5\6\15\12\3\6\11\12"+
    "\7\6\12\12\3\6\2\0\1\6\4\0\134\6\56\0"+
    "\2\6\27\0\u011e\6\5\0\3\6\26\0\2\6\7\0"+
    "\36\6\4\0\224\6\3\0\273\6\125\12\1\6\107\12"+
    "\1\6\2\12\2\6\1\12\2\6\2\12\2\6\4\12"+
    "\1\6\14\12\1\6\1\12\1\6\7\12\1\6\101\12"+
    "\1\6\4\12\2\6\10\12\1\6\7\12\1\6\34\12"+
    "\1\6\4\12\1\6\5\12\1\6\1\12\3\6\7\12"+
    "\1\6\u0154\12\2\6\31\12\1\6\31\12\1\6\37\12"+
    "\1\6\31\12\1\6\37\12\1\6\31\12\1\6\37\12"+
    "\1\6\31\12\1\6\37\12\1\6\31\12\1\6\10\12"+
    "\2\6\151\0\4\6\62\0\10\6\1\0\16\6\1\0"+
    "\26\6\5\0\1\6\17\0\120\6\37\12\6\6\6\12"+
    "\325\6\7\0\1\6\21\0\2\6\7\0\1\6\2\0"+
    "\1\6\5\0\5\6\76\12\41\6\1\0\160\6\55\12"+
    "\3\6\7\0\7\12\2\6\12\0\4\6\1\12\u0141\6"+
    "\36\12\1\0\21\6\54\12\16\0\5\6\1\12\320\6"+
    "\34\12\16\0\346\6\7\12\1\6\4\12\1\6\2\12"+
    "\1\6\17\12\1\6\305\12\13\6\7\0\51\6\104\12"+
    "\7\0\1\12\4\6\12\0\u0156\6\1\12\117\6\4\12"+
    "\1\6\33\12\1\6\2\12\1\6\1\12\2\6\1\12"+
    "\1\6\12\12\1\6\4\12\1\6\1\12\1\6\1\12"+
    "\6\6\1\12\4\6\1\12\1\6\1\12\1\6\1\12"+
    "\1\6\3\12\1\6\2\12\1\6\1\12\2\6\1\12"+
    "\1\6\1\12\1\6\1\12\1\6\1\12\1\6\1\12"+
    "\1\6\2\12\1\6\1\12\2\6\4\12\1\6\7\12"+
    "\1\6\4\12\1\6\4\12\1\6\1\12\1\6\12\12"+
    "\1\6\21\12\5\6\3\12\1\6\5\12\1\6\21\12"+
    "\u0134\6\12\0\6\6\340\12\40\6\72\12\6\6\336\12"+
    "\2\6\u0182\12\16\6\u0131\12\17\6\156\12\242\6\36\12"+
    "\342\6\113\12\5\6\u0160\12\121\6\1\0\36\6\140\0"+
    "\200\6\360\0\20\6";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[33024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\10\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\5\1\10\1\11\2\7\1\12\1\13\1\3\17\6"+
    "\1\1\1\14\1\11\1\5\1\3\21\6\1\11\1\15"+
    "\1\1\1\16\1\7\14\6\1\1\1\2\1\17\1\0"+
    "\1\17\1\7\1\11\1\5\1\3\1\1\1\20\1\7"+
    "\1\21\1\11\1\5\1\3\2\1\1\2\1\0\1\7"+
    "\1\11\1\5\1\3\1\1\1\20\1\22\1\7\1\11"+
    "\1\5\1\3\1\1\1\23\2\0\1\24\1\0\10\6"+
    "\1\25\13\6\1\0\7\6\1\25\2\6\1\25\13\6"+
    "\1\0\1\24\21\6\3\17\1\20\1\3\1\26\1\27"+
    "\2\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\3\17\1\3\1\26\1\27\2\40\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\4\0\1\24\1\13\20\6\2\0"+
    "\36\6\1\25\10\6\1\41\2\0\1\42\1\30\1\43"+
    "\2\0\1\40\4\0\13\6\1\0\31\6\1\12\3\0"+
    "\4\6\1\25\6\6\1\25\7\6\1\25\3\6\1\44"+
    "\2\0\7\6\2\0\2\6\1\45\2\0\1\46";

  private static int [] zzUnpackAction() {
    int [] result = new int[365];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\120\0\240\0\360\0\u0140\0\u0190\0\u01e0\0\u0230"+
    "\0\u0280\0\u0280\0\u02d0\0\u0280\0\u0280\0\u0280\0\u0320\0\u0370"+
    "\0\u03c0\0\u0280\0\u0280\0\u0280\0\u0410\0\u0460\0\u0460\0\u04b0"+
    "\0\u0500\0\u0550\0\u05a0\0\u05f0\0\u0640\0\u0690\0\u06e0\0\u0730"+
    "\0\u0780\0\u07d0\0\u0820\0\u0870\0\u08c0\0\u0910\0\u0960\0\u09b0"+
    "\0\u0280\0\u0a00\0\u0a50\0\u0aa0\0\u0af0\0\u0b40\0\u0b90\0\u0be0"+
    "\0\u0c30\0\u0c80\0\u0cd0\0\u0d20\0\u0d70\0\u0dc0\0\u0e10\0\u0e60"+
    "\0\u0eb0\0\u0f00\0\u0f50\0\u0fa0\0\u0ff0\0\u1040\0\u0280\0\u03c0"+
    "\0\u0280\0\u04b0\0\u1090\0\u10e0\0\u1130\0\u1180\0\u11d0\0\u1220"+
    "\0\u1270\0\u12c0\0\u1310\0\u1360\0\u13b0\0\u1400\0\u1450\0\u1450"+
    "\0\u0280\0\u1450\0\u14a0\0\u1450\0\u1450\0\u1450\0\u14f0\0\u1540"+
    "\0\u1590\0\u1590\0\u0280\0\u1590\0\u1590\0\u15e0\0\u1630\0\u1680"+
    "\0\u1680\0\u1680\0\u1680\0\u1680\0\u1680\0\u16d0\0\u1720\0\u1770"+
    "\0\u0280\0\u1770\0\u1770\0\u1770\0\u17c0\0\u1810\0\u0280\0\u1860"+
    "\0\u18b0\0\u1900\0\u1950\0\u19a0\0\u19f0\0\u1a40\0\u1a90\0\u1ae0"+
    "\0\u1b30\0\u1b80\0\u1bd0\0\u0320\0\u1c20\0\u1c70\0\u1cc0\0\u1d10"+
    "\0\u1d60\0\u1db0\0\u1e00\0\u1e50\0\u1ea0\0\u1ef0\0\u1f40\0\u1f90"+
    "\0\u1fe0\0\u2030\0\u2080\0\u20d0\0\u2120\0\u2170\0\u21c0\0\u2210"+
    "\0\u2260\0\u22b0\0\u2300\0\u2350\0\u23a0\0\u23f0\0\u2440\0\u2490"+
    "\0\u24e0\0\u2530\0\u2580\0\u25d0\0\u2620\0\u2670\0\u1040\0\u0280"+
    "\0\u26c0\0\u2710\0\u2760\0\u27b0\0\u2800\0\u2850\0\u28a0\0\u28f0"+
    "\0\u2940\0\u2990\0\u29e0\0\u2a30\0\u2a80\0\u2ad0\0\u2b20\0\u2b70"+
    "\0\u2bc0\0\u1450\0\u2c10\0\u2c60\0\u2cb0\0\u2cb0\0\u2d00\0\u2d00"+
    "\0\u2d50\0\u2da0\0\u2d00\0\u2d00\0\u2d00\0\u2d00\0\u2d00\0\u2d00"+
    "\0\u0280\0\u2df0\0\u2e40\0\u2e90\0\u1770\0\u0280\0\u0280\0\u2ee0"+
    "\0\u2f30\0\u0280\0\u0280\0\u0280\0\u0280\0\u0280\0\u0280\0\u2f80"+
    "\0\u2fd0\0\u3020\0\u3070\0\u30c0\0\u1950\0\u3110\0\u3160\0\u31b0"+
    "\0\u3200\0\u3250\0\u32a0\0\u32f0\0\u3340\0\u3390\0\u33e0\0\u3430"+
    "\0\u3480\0\u34d0\0\u3520\0\u3570\0\u35c0\0\u3610\0\u3660\0\u36b0"+
    "\0\u3700\0\u3750\0\u37a0\0\u37f0\0\u3840\0\u3890\0\u38e0\0\u3930"+
    "\0\u3980\0\u39d0\0\u3a20\0\u3a70\0\u3ac0\0\u3b10\0\u3b60\0\u3bb0"+
    "\0\u3c00\0\u3c50\0\u3ca0\0\u3cf0\0\u3d40\0\u3d90\0\u3de0\0\u3e30"+
    "\0\u3e80\0\u3ed0\0\u3f20\0\u3f70\0\u3fc0\0\u4010\0\u4060\0\u40b0"+
    "\0\u4100\0\u4150\0\u41a0\0\u41f0\0\u4240\0\u4290\0\u0280\0\u2c60"+
    "\0\u42e0\0\u0280\0\u4330\0\u0280\0\u2e90\0\u4380\0\u0280\0\u43d0"+
    "\0\u4420\0\u4470\0\u44c0\0\u4510\0\u4560\0\u45b0\0\u4600\0\u4650"+
    "\0\u46a0\0\u46f0\0\u4740\0\u4790\0\u47e0\0\u4830\0\u4880\0\u48d0"+
    "\0\u4920\0\u4970\0\u49c0\0\u4a10\0\u4a60\0\u4ab0\0\u4b00\0\u4b50"+
    "\0\u4ba0\0\u4bf0\0\u4c40\0\u4c90\0\u4ce0\0\u4d30\0\u4d80\0\u4dd0"+
    "\0\u4e20\0\u4e70\0\u4ec0\0\u4f10\0\u4f60\0\u4fb0\0\u5000\0\u5050"+
    "\0\u0320\0\u50a0\0\u50f0\0\u5140\0\u5190\0\u51e0\0\u5230\0\u5280"+
    "\0\u52d0\0\u5320\0\u5370\0\u53c0\0\u5410\0\u5460\0\u54b0\0\u5500"+
    "\0\u5550\0\u55a0\0\u55f0\0\u5640\0\u5690\0\u56e0\0\u5730\0\u5780"+
    "\0\u57d0\0\u5820\0\u5870\0\u0280\0\u58c0\0\u5910\0\u5960\0\u59b0"+
    "\0\u5a00\0\u5a50\0\u5aa0\0\u5af0\0\u5b40\0\u5b90\0\u5be0\0\u5c30"+
    "\0\u5c80\0\u0280\0\u5cd0\0\u5d20\0\u0280";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[365];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\11\2\12\1\0\1\12\1\13\1\11\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\2\23\2\24\2\16"+
    "\1\25\1\26\3\27\1\16\3\30\11\17\1\31\5\17"+
    "\1\32\7\17\1\23\1\11\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\17\1\42\2\17\1\43\2\17"+
    "\1\44\1\17\1\45\2\17\1\46\1\47\1\17\1\23"+
    "\1\50\1\23\1\0\1\11\2\12\1\0\1\12\1\13"+
    "\4\11\1\17\1\20\1\11\1\51\1\52\1\23\2\24"+
    "\2\16\1\24\1\26\3\27\1\53\1\54\1\14\1\30"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\2\17\1\63"+
    "\3\17\1\64\1\65\1\66\1\67\1\70\1\71\1\72"+
    "\1\73\1\74\1\75\1\17\1\23\1\11\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\2\17\1\63\2\17\1\64"+
    "\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74"+
    "\1\75\1\17\1\76\1\11\1\23\1\0\1\11\2\12"+
    "\1\0\1\12\1\13\1\11\1\14\1\77\1\11\1\17"+
    "\1\20\1\100\1\101\2\23\2\24\2\16\1\25\4\27"+
    "\1\16\1\30\1\102\1\30\21\17\1\103\5\17\1\23"+
    "\1\11\1\17\1\104\1\105\1\106\1\107\1\110\2\17"+
    "\1\111\3\17\1\112\1\17\1\113\1\114\1\115\1\116"+
    "\1\17\1\46\1\47\1\17\1\23\1\50\1\23\1\0"+
    "\1\117\1\120\1\121\1\122\1\120\1\123\5\117\1\124"+
    "\1\117\1\11\2\125\2\124\2\126\1\124\4\117\1\126"+
    "\1\127\1\117\1\127\27\117\1\125\1\130\26\117\1\125"+
    "\1\117\1\125\1\122\2\131\1\121\2\131\1\123\5\131"+
    "\1\132\1\131\1\133\2\134\2\132\2\135\1\132\4\131"+
    "\1\135\1\136\1\131\1\136\27\131\1\134\1\137\26\131"+
    "\1\134\1\131\1\134\1\131\1\140\1\141\1\121\1\142"+
    "\1\141\1\123\5\140\1\143\1\140\1\11\2\144\2\143"+
    "\2\145\1\143\4\140\1\145\1\146\1\140\1\146\27\140"+
    "\1\144\1\147\26\140\1\144\1\140\1\144\1\142\2\150"+
    "\1\121\2\150\1\123\2\150\1\151\2\150\1\152\2\150"+
    "\2\153\2\152\2\154\1\152\4\150\1\154\1\155\1\150"+
    "\1\155\27\150\1\153\1\156\26\150\1\153\1\150\1\153"+
    "\3\150\1\121\2\150\1\123\2\150\1\157\2\150\1\152"+
    "\2\150\2\153\2\152\2\154\1\152\4\150\1\154\1\155"+
    "\1\150\1\155\27\150\1\153\1\156\26\150\1\153\1\150"+
    "\1\153\1\150\122\0\1\12\115\0\1\17\11\0\1\17"+
    "\12\0\4\17\4\0\27\17\2\0\26\17\3\0\1\17"+
    "\13\0\1\160\120\0\1\14\123\0\1\161\3\0\1\162"+
    "\116\0\1\163\1\0\4\27\122\0\1\14\64\0\1\17"+
    "\11\0\1\17\12\0\4\17\4\0\1\164\26\17\2\0"+
    "\26\17\3\0\2\17\11\0\1\17\12\0\4\17\4\0"+
    "\1\165\26\17\2\0\26\17\3\0\2\17\11\0\1\17"+
    "\12\0\4\17\4\0\27\17\2\0\17\17\1\166\6\17"+
    "\3\0\2\17\11\0\1\17\12\0\4\17\4\0\27\17"+
    "\2\0\17\17\1\167\6\17\3\0\2\17\11\0\1\17"+
    "\12\0\4\17\4\0\27\17\2\0\1\170\6\17\1\171"+
    "\2\17\1\172\2\17\1\173\10\17\3\0\2\17\11\0"+
    "\1\17\12\0\4\17\4\0\27\17\2\0\15\17\1\174"+
    "\10\17\3\0\2\17\11\0\1\17\12\0\4\17\4\0"+
    "\27\17\2\0\12\17\1\170\13\17\3\0\2\17\11\0"+
    "\1\17\12\0\4\17\4\0\27\17\2\0\12\17\1\175"+
    "\2\17\1\176\10\17\3\0\2\17\11\0\1\17\12\0"+
    "\4\17\4\0\27\17\2\0\4\17\1\177\21\17\3\0"+
    "\2\17\11\0\1\17\12\0\4\17\4\0\27\17\2\0"+
    "\5\17\1\174\6\17\1\200\11\17\3\0\2\17\11\0"+
    "\1\17\12\0\4\17\4\0\27\17\2\0\1\201\25\17"+
    "\3\0\2\17\11\0\1\17\12\0\4\17\4\0\27\17"+
    "\2\0\17\17\1\202\6\17\3\0\2\17\11\0\1\17"+
    "\12\0\4\17\4\0\27\17\2\0\2\17\1\203\16\17"+
    "\1\204\2\17\1\205\1\17\3\0\2\17\11\0\1\17"+
    "\12\0\4\17\4\0\27\17\2\0\15\17\1\206\10\17"+
    "\3\0\2\17\11\0\1\17\12\0\4\17\4\0\27\17"+
    "\2\0\7\17\1\207\16\17\3\0\1\17\115\0\1\14"+
    "\22\0\1\210\132\0\1\24\117\0\2\14\63\0\1\17"+
    "\11\0\1\17\12\0\4\17\4\0\15\17\1\211\2\17"+
    "\1\212\6\17\2\0\14\17\1\211\2\17\1\212\6\17"+
    "\3\0\2\17\11\0\1\17\12\0\4\17\4\0\4\17"+
    "\1\213\11\17\1\214\1\17\1\215\6\17\2\0\4\17"+
    "\1\213\10\17\1\214\1\17\1\215\6\17\3\0\2\17"+
    "\11\0\1\17\12\0\4\17\4\0\1\216\6\17\1\74"+
    "\6\17\1\217\10\17\2\0\1\216\6\17\1\74\5\17"+
    "\1\217\10\17\3\0\2\17\11\0\1\17\12\0\4\17"+
    "\4\0\16\17\1\220\10\17\2\0\15\17\1\220\10\17"+
    "\3\0\2\17\11\0\1\17\12\0\4\17\4\0\13\17"+
    "\1\216\1\17\1\211\11\17\2\0\12\17\1\216\1\17"+
    "\1\211\11\17\3\0\2\17\11\0\1\17\12\0\4\17"+
    "\4\0\16\17\1\221\4\17\1\222\3\17\2\0\15\17"+
    "\1\221\4\17\1\222\3\17\3\0\2\17\11\0\1\17"+
    "\12\0\4\17\4\0\5\17\1\174\7\17\1\223\11\17"+
    "\2\0\5\17\1\174\6\17\1\223\11\17\3\0\2\17"+
    "\11\0\1\17\12\0\4\17\4\0\16\17\1\211\10\17"+
    "\2\0\15\17\1\211\10\17\3\0\2\17\11\0\1\17"+
    "\12\0\4\17\4\0\16\17\1\224\10\17\2\0\15\17"+
    "\1\224\10\17\3\0\2\17\11\0\1\17\12\0\4\17"+
    "\4\0\5\17\1\174\12\17\1\174\6\17\2\0\5\17"+
    "\1\174\11\17\1\174\6\17\3\0\2\17\11\0\1\17"+
    "\12\0\4\17\4\0\1\225\17\17\1\226\6\17\2\0"+
    "\1\225\16\17\1\226\6\17\3\0\2\17\11\0\1\17"+
    "\12\0\4\17\4\0\4\17\1\227\22\17\2\0\4\17"+
    "\1\227\21\17\3\0\2\17\11\0\1\17\12\0\4\17"+
    "\4\0\4\17\1\224\15\17\1\230\2\17\1\231\1\17"+
    "\2\0\4\17\1\224\14\17\1\230\2\17\1\231\1\17"+
    "\3\0\2\17\11\0\1\17\12\0\4\17\4\0\7\17"+
    "\1\232\6\17\1\174\7\17\1\233\2\0\7\17\1\232"+
    "\5\17\1\174\10\17\3\0\2\17\11\0\1\17\12\0"+
    "\4\17\4\0\15\17\1\234\11\17\2\0\14\17\1\234"+
    "\11\17\3\0\2\17\11\0\1\17\12\0\4\17\4\0"+
    "\1\221\26\17\2\0\1\221\25\17\3\0\2\17\11\0"+
    "\1\17\12\0\4\17\4\0\7\17\1\235\1\236\16\17"+
    "\2\0\7\17\1\235\1\236\15\17\3\0\1\17\2\237"+
    "\1\0\113\237\1\240\1\237\1\17\11\0\1\17\12\0"+
    "\4\17\4\0\27\17\2\0\21\17\1\204\4\17\3\0"+
    "\2\17\11\0\1\17\12\0\4\17\4\0\27\17\2\0"+
    "\15\17\1\241\1\17\1\167\6\17\3\0\2\17\11\0"+
    "\1\17\12\0\4\17\4\0\27\17\2\0\1\170\6\17"+
    "\1\242\2\17\1\243\2\17\1\244\10\17\3\0\2\17"+
    "\11\0\1\17\12\0\4\17\4\0\27\17\2\0\4\17"+
    "\1\245\10\17\1\174\10\17\3\0\2\17\11\0\1\17"+
    "\12\0\4\17\4\0\27\17\2\0\12\17\1\170\12\17"+
    "\1\246\3\0\2\17\11\0\1\17\12\0\4\17\4\0"+
    "\27\17\2\0\1\247\11\17\1\250\2\17\1\176\10\17"+
    "\3\0\2\17\11\0\1\17\12\0\4\17\4\0\27\17"+
    "\2\0\5\17\1\174\6\17\1\251\11\17\3\0\2\17"+
    "\11\0\1\17\12\0\4\17\4\0\27\17\2\0\4\17"+
    "\1\252\15\17\1\253\3\17\3\0\2\17\11\0\1\17"+
    "\12\0\4\17\4\0\27\17\2\0\17\17\1\254\2\17"+
    "\1\255\3\17\3\0\2\17\11\0\1\17\12\0\4\17"+
    "\4\0\27\17\2\0\4\17\1\256\21\17\3\0\2\17"+
    "\11\0\1\17\12\0\4\17\4\0\27\17\2\0\22\17"+
    "\1\257\1\17\1\205\1\17\3\0\2\17\11\0\1\17"+
    "\12\0\4\17\4\0\27\17\2\0\7\17\1\260\7\17"+
    "\1\261\6\17\3\0\1\17\15\0\1\151\104\0\1\121"+
    "\132\0\1\151\15\0\1\14\64\0\2\121\4\0\2\121"+
    "\1\262\4\121\1\262\7\121\2\263\1\264\35\121\1\262"+
    "\1\121\1\262\3\121\1\262\6\121\1\262\2\121\1\262"+
    "\1\121\1\262\7\121\1\0\2\265\1\0\2\265\1\0"+
    "\7\265\1\133\47\265\1\0\34\265\1\0\2\265\1\0"+
    "\7\265\1\133\15\265\1\266\31\265\1\0\32\265\2\121"+
    "\4\0\2\121\1\267\4\121\1\270\7\121\2\271\1\272"+
    "\35\121\1\273\1\121\1\274\3\121\1\275\6\121\1\276"+
    "\2\121\1\277\1\121\1\300\7\121\16\0\1\301\117\0"+
    "\1\301\15\0\1\14\64\0\2\121\4\0\2\121\1\302"+
    "\4\121\1\302\7\121\2\303\1\304\35\121\1\302\1\121"+
    "\1\302\3\121\1\302\6\121\1\302\2\121\1\302\1\121"+
    "\1\302\7\121\1\0\2\150\1\0\2\150\1\0\2\150"+
    "\1\0\54\150\1\0\34\150\1\0\2\150\1\0\2\150"+
    "\1\0\22\150\1\305\31\150\1\0\32\150\2\121\4\0"+
    "\2\121\1\306\4\121\1\307\7\121\2\310\1\311\35\121"+
    "\1\312\1\121\1\313\3\121\1\314\6\121\1\315\2\121"+
    "\1\316\1\121\1\317\7\121\47\0\1\320\5\0\1\321"+
    "\43\0\20\322\1\323\77\322\2\162\1\240\2\162\1\324"+
    "\112\162\25\0\4\325\67\0\1\17\11\0\1\17\12\0"+
    "\4\17\4\0\24\17\1\326\2\17\2\0\26\17\3\0"+
    "\2\17\11\0\1\17\12\0\4\17\4\0\21\17\1\327"+
    "\5\17\2\0\26\17\3\0\2\17\11\0\1\17\12\0"+
    "\4\17\4\0\27\17\2\0\17\17\1\330\6\17\3\0"+
    "\2\17\11\0\1\17\12\0\4\17\4\0\27\17\2\0"+
    "\4\17\1\331\21\17\3\0\2\17\11\0\1\17\12\0"+
    "\4\17\4\0\27\17\2\0\20\17\1\332\5\17\3\0"+
    "\2\17\11\0\1\17\12\0\4\17\4\0\27\17\2\0"+
    "\1\176\25\17\3\0\2\17\11\0\1\17\12\0\4\17"+
    "\4\0\27\17\2\0\17\17\1\333\6\17\3\0\2\17"+
    "\11\0\1\17\12\0\4\17\4\0\27\17\2\0\14\17"+
    "\1\334\11\17\3\0\2\17\11\0\1\17\12\0\4\17"+
    "\4\0\27\17\2\0\15\17\1\335\10\17\3\0\2\17"+
    "\11\0\1\17\12\0\4\17\4\0\27\17\2\0\17\17"+
    "\1\174\6\17\3\0\2\17\11\0\1\17\12\0\4\17"+
    "\4\0\27\17\2\0\21\17\1\336\4\17\3\0\2\17"+
    "\11\0\1\17\12\0\4\17\4\0\27\17\2\0\2\17"+
    "\1\337\16\17\1\174\4\17\3\0\2\17\11\0\1\17"+
    "\12\0\4\17\4\0\27\17\2\0\10\17\1\340\15\17"+
    "\3\0\2\17\11\0\1\17\12\0\4\17\4\0\27\17"+
    "\2\0\10\17\1\341\15\17\3\0\2\17\11\0\1\17"+
    "\12\0\4\17\4\0\27\17\2\0\1\342\25\17\3\0"+
    "\2\17\11\0\1\17\12\0\4\17\4\0\27\17\2\0"+
    "\17\17\1\343\6\17\3\0\2\17\11\0\1\17\12\0"+
    "\4\17\4\0\27\17\2\0\10\17\1\177\15\17\3\0"+
    "\2\17\11\0\1\17\12\0\4\17\4\0\27\17\2\0"+
    "\10\17\1\344\15\17\3\0\2\17\11\0\1\17\12\0"+
    "\4\17\4\0\27\17\2\0\10\17\1\345\15\17\3\0"+
    "\1\17\20\346\1\347\77\346\1\17\11\0\1\17\12\0"+
    "\4\17\4\0\3\17\1\174\23\17\2\0\3\17\1\174"+
    "\22\17\3\0\2\17\11\0\1\17\12\0\4\17\4\0"+
    "\20\17\1\350\6\17\2\0\17\17\1\350\6\17\3\0"+
    "\2\17\11\0\1\17\12\0\4\17\4\0\6\17\1\351"+
    "\20\17\2\0\6\17\1\351\17\17\3\0\2\17\11\0"+
    "\1\17\12\0\4\17\4\0\16\17\1\352\10\17\2\0"+
    "\15\17\1\352\10\17\3\0\2\17\11\0\1\17\12\0"+
    "\4\17\4\0\4\17\1\353\22\17\2\0\4\17\1\353"+
    "\21\17\3\0\2\17\11\0\1\17\12\0\4\17\4\0"+
    "\21\17\1\354\5\17\2\0\20\17\1\354\5\17\3\0"+
    "\2\17\11\0\1\17\12\0\4\17\4\0\15\17\1\355"+
    "\11\17\2\0\14\17\1\355\11\17\3\0\2\17\11\0"+
    "\1\17\12\0\4\17\4\0\25\17\1\356\1\17\2\0"+
    "\24\17\1\356\1\17\3\0\2\17\11\0\1\17\12\0"+
    "\4\17\4\0\20\17\1\174\6\17\2\0\17\17\1\174"+
    "\6\17\3\0\2\17\11\0\1\17\12\0\4\17\4\0"+
    "\15\17\1\357\11\17\2\0\14\17\1\357\11\17\3\0"+
    "\2\17\11\0\1\17\12\0\4\17\4\0\22\17\1\360"+
    "\4\17\2\0\21\17\1\360\4\17\3\0\2\17\11\0"+
    "\1\17\12\0\4\17\4\0\22\17\1\174\4\17\2\0"+
    "\21\17\1\174\4\17\3\0\2\17\11\0\1\17\12\0"+
    "\4\17\4\0\2\17\1\361\24\17\2\0\2\17\1\361"+
    "\23\17\3\0\2\17\11\0\1\17\12\0\4\17\4\0"+
    "\10\17\1\362\5\17\1\363\10\17\2\0\10\17\1\362"+
    "\4\17\1\363\10\17\3\0\2\17\11\0\1\17\12\0"+
    "\4\17\4\0\1\364\1\17\1\365\14\17\1\366\2\17"+
    "\1\367\4\17\2\0\1\364\1\17\1\365\13\17\1\366"+
    "\2\17\1\367\4\17\3\0\2\17\11\0\1\17\12\0"+
    "\4\17\4\0\20\17\1\370\6\17\2\0\17\17\1\370"+
    "\6\17\3\0\2\17\11\0\1\17\12\0\4\17\4\0"+
    "\10\17\1\371\16\17\2\0\10\17\1\371\15\17\3\0"+
    "\2\17\11\0\1\17\12\0\4\17\4\0\4\17\1\372"+
    "\22\17\2\0\4\17\1\372\21\17\3\0\2\17\11\0"+
    "\1\17\12\0\4\17\4\0\17\17\1\354\7\17\2\0"+
    "\16\17\1\354\7\17\3\0\2\17\11\0\1\17\12\0"+
    "\4\17\4\0\22\17\1\373\4\17\2\0\21\17\1\373"+
    "\4\17\3\0\2\17\11\0\1\17\12\0\4\17\4\0"+
    "\10\17\1\374\16\17\2\0\10\17\1\374\15\17\3\0"+
    "\2\17\11\0\1\17\12\0\4\17\4\0\22\17\1\375"+
    "\4\17\2\0\21\17\1\375\4\17\3\0\2\17\11\0"+
    "\1\17\12\0\4\17\4\0\27\17\2\0\15\17\1\376"+
    "\10\17\3\0\2\17\11\0\1\17\12\0\4\17\4\0"+
    "\27\17\2\0\1\377\25\17\3\0\2\17\11\0\1\17"+
    "\12\0\4\17\4\0\27\17\2\0\1\u0100\25\17\3\0"+
    "\2\17\11\0\1\17\12\0\4\17\4\0\27\17\2\0"+
    "\14\17\1\u0101\11\17\3\0\2\17\11\0\1\17\12\0"+
    "\4\17\4\0\27\17\2\0\5\17\1\u0102\20\17\3\0"+
    "\2\17\11\0\1\17\12\0\4\17\4\0\27\17\2\0"+
    "\21\17\1\u0103\4\17\3\0\2\17\11\0\1\17\12\0"+
    "\4\17\4\0\27\17\2\0\12\17\1\u0104\13\17\3\0"+
    "\2\17\11\0\1\17\12\0\4\17\4\0\27\17\2\0"+
    "\15\17\1\u0105\10\17\3\0\2\17\11\0\1\17\12\0"+
    "\4\17\4\0\27\17\2\0\21\17\1\u0106\4\17\3\0"+
    "\2\17\11\0\1\17\12\0\4\17\4\0\27\17\2\0"+
    "\24\17\1\174\1\17\3\0\2\17\11\0\1\17\12\0"+
    "\4\17\4\0\27\17\2\0\12\17\1\u0107\13\17\3\0"+
    "\2\17\11\0\1\17\12\0\4\17\4\0\27\17\2\0"+
    "\10\17\1\u0108\4\17\1\u0109\10\17\3\0\2\17\11\0"+
    "\1\17\12\0\4\17\4\0\27\17\2\0\1\17\1\u010a"+
    "\24\17\3\0\2\17\11\0\1\17\12\0\4\17\4\0"+
    "\27\17\2\0\21\17\1\u010b\4\17\3\0\2\17\11\0"+
    "\1\17\12\0\4\17\4\0\27\17\2\0\16\17\1\u010c"+
    "\7\17\3\0\2\17\11\0\1\17\12\0\4\17\4\0"+
    "\27\17\2\0\10\17\1\u010d\15\17\3\0\2\17\11\0"+
    "\1\17\12\0\4\17\4\0\27\17\2\0\22\17\1\u010e"+
    "\3\17\3\0\1\17\15\0\1\u010f\7\0\3\u0110\105\0"+
    "\1\u010f\7\0\3\u0111\70\0\2\265\1\0\2\265\1\0"+
    "\7\265\1\0\47\265\1\0\32\265\15\0\1\133\117\0"+
    "\1\u0112\7\0\3\272\105\0\1\u0112\7\0\3\u0113\105\0"+
    "\1\157\117\0\1\u0114\7\0\3\u0115\105\0\1\u0114\7\0"+
    "\3\u0116\115\0\3\311\115\0\3\u0117\125\0\1\u0118\117\0"+
    "\1\u0119\17\0\1\u011a\42\0\20\322\1\u011b\77\322\20\0"+
    "\1\323\3\0\1\240\75\0\1\240\115\0\1\17\11\0"+
    "\1\17\12\0\4\17\4\0\1\174\26\17\2\0\26\17"+
    "\3\0\2\17\11\0\1\17\12\0\4\17\4\0\2\17"+
    "\1\u011c\24\17\2\0\26\17\3\0\2\17\11\0\1\17"+
    "\12\0\4\17\4\0\27\17\2\0\4\17\1\u011d\21\17"+
    "\3\0\2\17\11\0\1\17\12\0\4\17\4\0\27\17"+
    "\2\0\1\u011e\25\17\3\0\2\17\11\0\1\17\12\0"+
    "\4\17\4\0\27\17\2\0\4\17\1\174\21\17\3\0"+
    "\2\17\11\0\1\17\12\0\4\17\4\0\27\17\2\0"+
    "\20\17\1\u011f\5\17\3\0\2\17\11\0\1\17\12\0"+
    "\4\17\4\0\27\17\2\0\20\17\1\u0120\1\u0121\4\17"+
    "\3\0\2\17\11\0\1\17\12\0\4\17\4\0\27\17"+
    "\2\0\1\u0120\25\17\3\0\2\17\11\0\1\17\12\0"+
    "\4\17\4\0\27\17\2\0\2\17\1\u0122\23\17\3\0"+
    "\2\17\11\0\1\17\12\0\4\17\4\0\27\17\2\0"+
    "\12\17\1\u0123\13\17\3\0\2\17\11\0\1\17\12\0"+
    "\4\17\4\0\27\17\2\0\14\17\1\174\11\17\3\0"+
    "\2\17\11\0\1\17\12\0\4\17\4\0\27\17\2\0"+
    "\14\17\1\u0124\11\17\3\0\2\17\11\0\1\17\12\0"+
    "\4\17\4\0\27\17\2\0\14\17\1\u0125\11\17\3\0"+
    "\2\17\11\0\1\17\12\0\4\17\4\0\27\17\2\0"+
    "\10\17\1\u0126\15\17\3\0\2\17\11\0\1\17\12\0"+
    "\4\17\4\0\27\17\2\0\3\17\1\174\22\17\3\0"+
    "\2\17\11\0\1\17\12\0\4\17\4\0\27\17\2\0"+
    "\12\17\1\332\13\17\3\0\1\17\20\346\1\u0127\77\346"+
    "\17\0\1\240\1\347\77\0\1\17\11\0\1\17\12\0"+
    "\4\17\4\0\1\u0128\26\17\2\0\1\u0128\25\17\3\0"+
    "\2\17\11\0\1\17\12\0\4\17\4\0\10\17\1\372"+
    "\16\17\2\0\10\17\1\372\15\17\3\0\2\17\11\0"+
    "\1\17\12\0\4\17\4\0\13\17\1\u0129\13\17\2\0"+
    "\12\17\1\u0129\13\17\3\0\2\17\11\0\1\17\12\0"+
    "\4\17\4\0\1\u012a\26\17\2\0\1\u012a\25\17\3\0"+
    "\2\17\11\0\1\17\12\0\4\17\4\0\4\17\1\174"+
    "\22\17\2\0\4\17\1\174\21\17\3\0\2\17\11\0"+
    "\1\17\12\0\4\17\4\0\21\17\1\224\1\u012b\4\17"+
    "\2\0\20\17\1\224\1\u012b\4\17\3\0\2\17\11\0"+
    "\1\17\12\0\4\17\4\0\15\17\1\u012c\11\17\2\0"+
    "\14\17\1\u012c\11\17\3\0\2\17\11\0\1\17\12\0"+
    "\4\17\4\0\2\17\1\u012d\24\17\2\0\2\17\1\u012d"+
    "\23\17\3\0\2\17\11\0\1\17\12\0\4\17\4\0"+
    "\4\17\1\u012e\22\17\2\0\4\17\1\u012e\21\17\3\0"+
    "\2\17\11\0\1\17\12\0\4\17\4\0\12\17\1\u012f"+
    "\14\17\2\0\11\17\1\u012f\14\17\3\0\2\17\11\0"+
    "\1\17\12\0\4\17\4\0\15\17\1\u0130\11\17\2\0"+
    "\14\17\1\u0130\11\17\3\0\2\17\11\0\1\17\12\0"+
    "\4\17\4\0\2\17\1\u0131\3\17\1\u0132\20\17\2\0"+
    "\2\17\1\u0131\3\17\1\u0132\17\17\3\0\2\17\11\0"+
    "\1\17\12\0\4\17\4\0\13\17\1\174\13\17\2\0"+
    "\12\17\1\174\13\17\3\0\2\17\11\0\1\17\12\0"+
    "\4\17\4\0\16\17\1\u0133\10\17\2\0\15\17\1\u0133"+
    "\10\17\3\0\2\17\11\0\1\17\12\0\4\17\4\0"+
    "\4\17\1\u0134\22\17\2\0\4\17\1\u0134\21\17\3\0"+
    "\2\17\11\0\1\17\12\0\4\17\4\0\23\17\1\u0135"+
    "\3\17\2\0\22\17\1\u0135\3\17\3\0\2\17\11\0"+
    "\1\17\12\0\4\17\4\0\10\17\1\u0136\16\17\2\0"+
    "\10\17\1\u0136\15\17\3\0\2\17\11\0\1\17\12\0"+
    "\4\17\4\0\22\17\1\u0137\4\17\2\0\21\17\1\u0137"+
    "\4\17\3\0\2\17\11\0\1\17\12\0\4\17\4\0"+
    "\15\17\1\174\11\17\2\0\14\17\1\174\11\17\3\0"+
    "\2\17\11\0\1\17\12\0\4\17\4\0\10\17\1\364"+
    "\16\17\2\0\10\17\1\364\15\17\3\0\2\17\11\0"+
    "\1\17\12\0\4\17\4\0\13\17\1\354\13\17\2\0"+
    "\12\17\1\354\13\17\3\0\2\17\11\0\1\17\12\0"+
    "\4\17\4\0\7\17\1\174\17\17\2\0\7\17\1\174"+
    "\16\17\3\0\2\17\11\0\1\17\12\0\4\17\4\0"+
    "\27\17\2\0\12\17\1\u0138\13\17\3\0\2\17\11\0"+
    "\1\17\12\0\4\17\4\0\27\17\2\0\17\17\1\u0106"+
    "\6\17\3\0\2\17\11\0\1\17\12\0\4\17\4\0"+
    "\27\17\2\0\20\17\1\u010d\5\17\3\0\2\17\11\0"+
    "\1\17\12\0\4\17\4\0\27\17\2\0\21\17\1\u0121"+
    "\4\17\3\0\2\17\11\0\1\17\12\0\4\17\4\0"+
    "\27\17\2\0\1\u0139\25\17\3\0\2\17\11\0\1\17"+
    "\12\0\4\17\4\0\27\17\2\0\4\17\1\u013a\21\17"+
    "\3\0\2\17\11\0\1\17\12\0\4\17\4\0\27\17"+
    "\2\0\20\17\1\u010e\5\17\3\0\2\17\11\0\1\17"+
    "\12\0\4\17\4\0\27\17\2\0\1\251\25\17\3\0"+
    "\2\17\11\0\1\17\12\0\4\17\4\0\27\17\2\0"+
    "\10\17\1\u013b\15\17\3\0\2\17\11\0\1\17\12\0"+
    "\4\17\4\0\27\17\2\0\12\17\1\174\13\17\3\0"+
    "\2\17\11\0\1\17\12\0\4\17\4\0\27\17\2\0"+
    "\14\17\1\u013c\6\17\1\u013d\2\17\3\0\2\17\11\0"+
    "\1\17\12\0\4\17\4\0\27\17\2\0\21\17\1\u013e"+
    "\4\17\3\0\2\17\11\0\1\17\12\0\4\17\4\0"+
    "\27\17\2\0\12\17\1\u013f\13\17\3\0\2\17\11\0"+
    "\1\17\12\0\4\17\4\0\27\17\2\0\22\17\1\u0140"+
    "\3\17\3\0\2\17\11\0\1\17\12\0\4\17\4\0"+
    "\27\17\2\0\4\17\1\176\21\17\3\0\2\17\11\0"+
    "\1\17\12\0\4\17\4\0\27\17\2\0\20\17\1\174"+
    "\5\17\3\0\2\17\11\0\1\17\12\0\4\17\4\0"+
    "\27\17\2\0\4\17\1\u0141\21\17\3\0\1\17\15\0"+
    "\1\u010f\117\0\1\u0112\117\0\1\u0114\163\0\1\u0142\114\0"+
    "\1\u0143\114\0\1\u0144\44\0\20\322\1\u011b\3\322\1\240"+
    "\73\322\1\17\11\0\1\17\12\0\4\17\4\0\1\u0145"+
    "\26\17\2\0\26\17\3\0\2\17\11\0\1\17\12\0"+
    "\4\17\4\0\27\17\2\0\6\17\1\u0146\17\17\3\0"+
    "\2\17\11\0\1\17\12\0\4\17\4\0\27\17\2\0"+
    "\11\17\1\174\14\17\3\0\2\17\11\0\1\17\12\0"+
    "\4\17\4\0\27\17\2\0\2\17\1\176\23\17\3\0"+
    "\2\17\11\0\1\17\12\0\4\17\4\0\27\17\2\0"+
    "\21\17\1\174\4\17\3\0\2\17\11\0\1\17\12\0"+
    "\4\17\4\0\27\17\2\0\10\17\1\u0147\15\17\3\0"+
    "\2\17\11\0\1\17\12\0\4\17\4\0\27\17\2\0"+
    "\7\17\1\174\16\17\3\0\2\17\11\0\1\17\12\0"+
    "\4\17\4\0\27\17\2\0\22\17\1\u0148\3\17\3\0"+
    "\2\17\11\0\1\17\12\0\4\17\4\0\27\17\2\0"+
    "\21\17\1\u0149\4\17\3\0\2\17\11\0\1\17\12\0"+
    "\4\17\4\0\27\17\2\0\5\17\1\174\20\17\3\0"+
    "\2\17\11\0\1\17\12\0\4\17\4\0\27\17\2\0"+
    "\14\17\1\u014a\11\17\3\0\1\17\17\346\1\240\1\u0127"+
    "\77\346\1\17\11\0\1\17\12\0\4\17\4\0\26\17"+
    "\1\174\2\0\26\17\3\0\2\17\11\0\1\17\12\0"+
    "\4\17\4\0\4\17\1\u014b\22\17\2\0\4\17\1\u014b"+
    "\21\17\3\0\2\17\11\0\1\17\12\0\4\17\4\0"+
    "\12\17\1\174\14\17\2\0\11\17\1\174\14\17\3\0"+
    "\2\17\11\0\1\17\12\0\4\17\4\0\10\17\1\u014c"+
    "\16\17\2\0\10\17\1\u014c\15\17\3\0\2\17\11\0"+
    "\1\17\12\0\4\17\4\0\22\17\1\u014d\4\17\2\0"+
    "\21\17\1\u014d\4\17\3\0\2\17\11\0\1\17\12\0"+
    "\4\17\4\0\22\17\1\u014e\4\17\2\0\21\17\1\u014e"+
    "\4\17\3\0\2\17\11\0\1\17\12\0\4\17\4\0"+
    "\6\17\1\u014f\20\17\2\0\6\17\1\u014f\17\17\3\0"+
    "\2\17\11\0\1\17\12\0\4\17\4\0\4\17\1\211"+
    "\22\17\2\0\4\17\1\211\21\17\3\0\2\17\11\0"+
    "\1\17\12\0\4\17\4\0\22\17\1\u0150\4\17\2\0"+
    "\21\17\1\u0150\4\17\3\0\2\17\11\0\1\17\12\0"+
    "\4\17\4\0\4\17\1\u0151\22\17\2\0\4\17\1\u0151"+
    "\21\17\3\0\2\17\11\0\1\17\12\0\4\17\4\0"+
    "\20\17\1\u0152\6\17\2\0\17\17\1\u0152\6\17\3\0"+
    "\2\17\11\0\1\17\12\0\4\17\4\0\20\17\1\211"+
    "\6\17\2\0\17\17\1\211\6\17\3\0\2\17\11\0"+
    "\1\17\12\0\4\17\4\0\1\224\26\17\2\0\1\224"+
    "\25\17\3\0\2\17\11\0\1\17\12\0\4\17\4\0"+
    "\20\17\1\372\6\17\2\0\17\17\1\372\6\17\3\0"+
    "\2\17\11\0\1\17\12\0\4\17\4\0\15\17\1\u0153"+
    "\11\17\2\0\14\17\1\u0153\11\17\3\0\2\17\11\0"+
    "\1\17\12\0\4\17\4\0\2\17\1\375\24\17\2\0"+
    "\2\17\1\375\23\17\3\0\2\17\11\0\1\17\12\0"+
    "\4\17\4\0\27\17\2\0\4\17\1\u0154\21\17\3\0"+
    "\2\17\11\0\1\17\12\0\4\17\4\0\27\17\2\0"+
    "\22\17\1\u0155\3\17\3\0\2\17\11\0\1\17\12\0"+
    "\4\17\4\0\27\17\2\0\14\17\1\u0156\11\17\3\0"+
    "\2\17\11\0\1\17\12\0\4\17\4\0\27\17\2\0"+
    "\14\17\1\u0157\11\17\3\0\2\17\11\0\1\17\12\0"+
    "\4\17\4\0\27\17\2\0\21\17\1\u0158\4\17\3\0"+
    "\2\17\11\0\1\17\12\0\4\17\4\0\27\17\2\0"+
    "\1\u0159\25\17\3\0\2\17\11\0\1\17\12\0\4\17"+
    "\4\0\27\17\2\0\4\17\1\u015a\21\17\3\0\2\17"+
    "\11\0\1\17\12\0\4\17\4\0\27\17\2\0\10\17"+
    "\1\u015b\15\17\3\0\2\17\11\0\1\17\12\0\4\17"+
    "\4\0\27\17\2\0\17\17\1\340\6\17\3\0\1\17"+
    "\35\0\1\u015c\121\0\1\u015d\123\0\1\u015e\54\0\1\17"+
    "\11\0\1\17\12\0\4\17\4\0\13\17\1\174\13\17"+
    "\2\0\26\17\3\0\2\17\11\0\1\17\12\0\4\17"+
    "\4\0\27\17\2\0\12\17\1\36\13\17\3\0\2\17"+
    "\11\0\1\17\12\0\4\17\4\0\27\17\2\0\14\17"+
    "\1\u015f\11\17\3\0\2\17\11\0\1\17\12\0\4\17"+
    "\4\0\27\17\2\0\3\17\1\332\22\17\3\0\2\17"+
    "\11\0\1\17\12\0\4\17\4\0\27\17\2\0\5\17"+
    "\1\174\4\17\1\340\13\17\3\0\2\17\11\0\1\17"+
    "\12\0\4\17\4\0\27\17\2\0\6\17\1\174\17\17"+
    "\3\0\2\17\11\0\1\17\12\0\4\17\4\0\1\372"+
    "\26\17\2\0\1\372\25\17\3\0\2\17\11\0\1\17"+
    "\12\0\4\17\4\0\15\17\1\u0160\11\17\2\0\14\17"+
    "\1\u0160\11\17\3\0\2\17\11\0\1\17\12\0\4\17"+
    "\4\0\16\17\1\174\10\17\2\0\15\17\1\174\10\17"+
    "\3\0\2\17\11\0\1\17\12\0\4\17\4\0\10\17"+
    "\1\u0161\16\17\2\0\10\17\1\u0161\15\17\3\0\2\17"+
    "\11\0\1\17\12\0\4\17\4\0\4\17\1\221\22\17"+
    "\2\0\4\17\1\221\21\17\3\0\2\17\11\0\1\17"+
    "\12\0\4\17\4\0\13\17\1\372\13\17\2\0\12\17"+
    "\1\372\13\17\3\0\2\17\11\0\1\17\12\0\4\17"+
    "\4\0\3\17\1\u0162\23\17\2\0\3\17\1\u0162\22\17"+
    "\3\0\2\17\11\0\1\17\12\0\4\17\4\0\1\u0163"+
    "\26\17\2\0\1\u0163\25\17\3\0\2\17\11\0\1\17"+
    "\12\0\4\17\4\0\6\17\1\174\20\17\2\0\6\17"+
    "\1\174\17\17\3\0\2\17\11\0\1\17\12\0\4\17"+
    "\4\0\27\17\2\0\1\340\25\17\3\0\2\17\11\0"+
    "\1\17\12\0\4\17\4\0\27\17\2\0\12\17\1\u0120"+
    "\13\17\3\0\2\17\11\0\1\17\12\0\4\17\4\0"+
    "\27\17\2\0\3\17\1\u010d\22\17\3\0\2\17\11\0"+
    "\1\17\12\0\4\17\4\0\27\17\2\0\16\17\1\u0164"+
    "\7\17\3\0\2\17\11\0\1\17\12\0\4\17\4\0"+
    "\27\17\2\0\12\17\1\340\13\17\3\0\2\17\11\0"+
    "\1\17\12\0\4\17\4\0\27\17\2\0\21\17\1\332"+
    "\4\17\3\0\2\17\11\0\1\17\12\0\4\17\4\0"+
    "\27\17\2\0\2\17\1\u0165\23\17\3\0\2\17\11\0"+
    "\1\17\12\0\4\17\4\0\27\17\2\0\2\17\1\174"+
    "\23\17\3\0\1\17\35\0\1\u0166\137\0\1\u0167\42\0"+
    "\1\17\11\0\1\17\12\0\4\17\4\0\27\17\2\0"+
    "\22\17\1\332\3\17\3\0\2\17\11\0\1\17\12\0"+
    "\4\17\4\0\23\17\1\354\3\17\2\0\22\17\1\354"+
    "\3\17\3\0\2\17\11\0\1\17\12\0\4\17\4\0"+
    "\16\17\1\372\10\17\2\0\15\17\1\372\10\17\3\0"+
    "\2\17\11\0\1\17\12\0\4\17\4\0\23\17\1\u0168"+
    "\3\17\2\0\22\17\1\u0168\3\17\3\0\2\17\11\0"+
    "\1\17\12\0\4\17\4\0\14\17\1\174\12\17\2\0"+
    "\13\17\1\174\12\17\3\0\2\17\11\0\1\17\12\0"+
    "\4\17\4\0\27\17\2\0\22\17\1\u0120\3\17\3\0"+
    "\2\17\11\0\1\17\12\0\4\17\4\0\27\17\2\0"+
    "\21\17\1\u0169\4\17\3\0\1\17\50\0\1\u016a\104\0"+
    "\1\u016b\62\0\1\17\11\0\1\17\12\0\4\17\4\0"+
    "\20\17\1\354\6\17\2\0\17\17\1\354\6\17\3\0"+
    "\2\17\11\0\1\17\12\0\4\17\4\0\27\17\2\0"+
    "\4\17\1\344\21\17\3\0\1\17\51\0\1\u016c\103\0"+
    "\1\u016d\62\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[23920];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\10\0\2\11\1\1\3\11\3\1\3\11\24\1\1\11"+
    "\25\1\1\11\1\1\1\11\17\1\1\11\1\0\10\1"+
    "\1\11\6\1\1\0\6\1\1\11\5\1\1\11\2\0"+
    "\1\1\1\0\24\1\1\0\26\1\1\0\1\11\40\1"+
    "\1\11\4\1\2\11\2\1\6\11\4\0\22\1\2\0"+
    "\47\1\1\11\2\0\1\11\1\1\1\11\2\0\1\11"+
    "\4\0\13\1\1\0\32\1\3\0\27\1\1\11\2\0"+
    "\7\1\2\0\2\1\1\11\2\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[365];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    StringBuilder string;
    private Coloreado coloreado(TypeTkn type){
        return new Coloreado(type, yychar, yylength());
    }

    private Coloreado coloreadoStr(TypeTkn type){
        return new Coloreado(type, yychar - string.toString().length() - 1, string.toString().length() + 2);
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PintorLexer(java.io.Reader in) {
      string = new StringBuilder();
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Coloreado yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return coloreado(TypeTkn.ERROR);
            }
          // fall through
          case 39: break;
          case 2:
            { /* ignoramos */
            }
          // fall through
          case 40: break;
          case 3:
            { return coloreado(TypeTkn.COMPARATOR);
            }
          // fall through
          case 41: break;
          case 4:
            { string.setLength(0); yybegin(STRING);
            }
          // fall through
          case 42: break;
          case 5:
            { return coloreado(TypeTkn.OTHERS);
            }
          // fall through
          case 43: break;
          case 6:
            { return coloreado(TypeTkn.ID);
            }
          // fall through
          case 44: break;
          case 7:
            { return coloreado(TypeTkn.OPERATOR);
            }
          // fall through
          case 45: break;
          case 8:
            { string.setLength(0); yybegin(CHARLITERAL);
            }
          // fall through
          case 46: break;
          case 9:
            { return coloreado(TypeTkn.DELIMITATOR);
            }
          // fall through
          case 47: break;
          case 10:
            { return coloreado(TypeTkn.BOOLEANS);
            }
          // fall through
          case 48: break;
          case 11:
            { return coloreado(TypeTkn.LITERALS);
            }
          // fall through
          case 49: break;
          case 12:
            { string.setLength(0); yybegin(P_CHAR_STRING);
            }
          // fall through
          case 50: break;
          case 13:
            { string.setLength(0); yybegin(JSTRING);
            }
          // fall through
          case 51: break;
          case 14:
            { string.setLength(0); yybegin(JCHARLITERAL);
            }
          // fall through
          case 52: break;
          case 15:
            { return coloreadoStr(TypeTkn.ERROR);
            }
          // fall through
          case 53: break;
          case 16:
            { string.append( yytext() );
            }
          // fall through
          case 54: break;
          case 17:
            { yybegin(PASCAL); return coloreadoStr(TypeTkn.STRINGS);
            }
          // fall through
          case 55: break;
          case 18:
            { yybegin(YYINITIAL); return coloreadoStr(TypeTkn.STRINGS);
            }
          // fall through
          case 56: break;
          case 19:
            { yybegin(JAVA); return coloreadoStr(TypeTkn.STRINGS);
            }
          // fall through
          case 57: break;
          case 20:
            { return coloreado(TypeTkn.COMMENTARY);
            }
          // fall through
          case 58: break;
          case 21:
            { return coloreado(TypeTkn.RESERVED_WORD);
            }
          // fall through
          case 59: break;
          case 22:
            { string.append( '\"' );
            }
          // fall through
          case 60: break;
          case 23:
            { string.append( '\'' );
            }
          // fall through
          case 61: break;
          case 24:
            { char val = (char) Integer.parseInt(yytext().substring(1),8);
                                                                   string.append( val );
            }
          // fall through
          case 62: break;
          case 25:
            { string.append( '\\' );
            }
          // fall through
          case 63: break;
          case 26:
            { string.append( '\b' );
            }
          // fall through
          case 64: break;
          case 27:
            { string.append( '\f' );
            }
          // fall through
          case 65: break;
          case 28:
            { string.append( '\n' );
            }
          // fall through
          case 66: break;
          case 29:
            { string.append( '\r' );
            }
          // fall through
          case 67: break;
          case 30:
            { string.append( '\t' );
            }
          // fall through
          case 68: break;
          case 31:
            { yybegin(JAVA); return coloreado(TypeTkn.STRINGS);
            }
          // fall through
          case 69: break;
          case 32:
            { char val = (char) Integer.parseInt(yytext().substring(1),8);
                                                string.append( val );
            }
          // fall through
          case 70: break;
          case 33:
            { yybegin(YYINITIAL);
                                                int val = Integer.parseInt(yytext().substring(1,yylength()-1),8);
                                                return coloreadoStr(TypeTkn.STRINGS);
            }
          // fall through
          case 71: break;
          case 34:
            { yybegin(PASCAL);
                                                            int val = Integer.parseInt(yytext().substring(1,yylength()-1),8);
                                                          return coloreadoStr(TypeTkn.STRINGS);
            }
          // fall through
          case 72: break;
          case 35:
            { yybegin(JAVA);
                                                int val = Integer.parseInt(yytext().substring(1,yylength()-1),8);
                                                return coloreadoStr(TypeTkn.STRINGS);
            }
          // fall through
          case 73: break;
          case 36:
            { yybegin(JAVA); return coloreado(TypeTkn.SECTION);
            }
          // fall through
          case 74: break;
          case 37:
            { yybegin(PASCAL); return coloreado(TypeTkn.SECTION);
            }
          // fall through
          case 75: break;
          case 38:
            { yybegin(YYINITIAL); return coloreado(TypeTkn.SECTION);
            }
          // fall through
          case 76: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
